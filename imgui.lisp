;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

;; Enum interface generated does not seem to work for lisp when the values specified depend on the value of symbols in the same enum definition.
;; Since I could not find a way to fix the enums in the interface file, it is edited inside this file by hand.

;; Other issues with the plain wrapper:
;; - some math expressions such as `32+1' are not translated at all (-> #.(1+ 32) and such)
;; - Enum values are not translated when used as an init field (-> #.(cffi:foreign-enum-value 'enum-type :the-symbol))
;; - `operator bool() const' is completely garbled
;; - Weird (__aref__ :pointer) fields appearing
;; Some of these seem related to C++ + struct keyword when really describing a class.
;; - Function named Shutdown has to be renamed because it is a predefined function in some(?) lisps (this should really be done in the interface instead of manually...)
;; Shaving off the functions defined in the structs from the generated bindings will only work so long as nothing virtual comes into play. Alignments and sizes change otherwise.

;; Additional modifications:
;; - Removed  prefixes from every function name
;; - For all enums, the EnumName_ prefix was removed (e.g. :ImGuiWindowFlags_NoSavedSettings becomes :NoSavedSettings)
;; - Many return types are wrong (:pointer when it should be, e.g. :bool), this is only partially fixed.

;; XXX: SWIG generator registeres the same lisp function name for variants of the same function (e.g. template specialization or variants of the same function with differing arguments).
;; XXX: This is obviously wrong for our use because it ends up shadowing all but the last definition registered.
;; XXX: I will rename variants manually as I need them, obviously this isn't production-quality stuff.
;; XXX: In total, there are just over 600 function variants to rename all in all, over a total of 191 unique function names.

(in-package :imgui)


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant IMGUI_VERSION "1.78")

(cl:defconstant IMGUI_VERSION_NUM 17800)

(cffi:defctype Col :int)

(cffi:defctype Cond :int)

(cffi:defctype DataType :int)

(cffi:defctype Dir :int)

(cffi:defctype Key :int)

(cffi:defctype NavInput :int)

(cffi:defctype MouseButton :int)

(cffi:defctype MouseCursor :int)

(cffi:defctype StyleVar :int)

(cffi:defctype ImDrawCornerFlags :int)

(cffi:defctype ImDrawListFlags :int)

(cffi:defctype ImFontAtlasFlags :int)

(cffi:defctype BackendFlags :int)

(cffi:defctype ButtonFlags :int)

(cffi:defctype ColorEditFlags :int)

(cffi:defctype ConfigFlags :int)

(cffi:defctype ComboFlags :int)

(cffi:defctype DragDropFlags :int)

(cffi:defctype FocusedFlags :int)

(cffi:defctype HoveredFlags :int)

(cffi:defctype InputTextFlags :int)

(cffi:defctype KeyModFlags :int)

(cffi:defctype PopupFlags :int)

(cffi:defctype SelectableFlags :int)

(cffi:defctype SliderFlags :int)

(cffi:defctype TabBarFlags :int)

(cffi:defctype TabItemFlags :int)

(cffi:defctype TreeNodeFlags :int)

(cffi:defctype WindowFlags :int)

(cffi:defctype ImTextureID :pointer)

(cffi:defctype ID :unsigned-int)

(cffi:defctype InputTextCallback :pointer)

(cffi:defctype SizeCallback :pointer)

(cffi:defctype ImWchar16 :unsigned-short)

(cffi:defctype ImWchar32 :unsigned-int)

(cffi:defctype ImWchar :unsigned-short)

(cffi:defctype ImS8 :char)

(cffi:defctype ImU8 :unsigned-char)

(cffi:defctype ImS16 :short)

(cffi:defctype ImU16 :unsigned-short)

(cffi:defctype ImS32 :int)

(cffi:defctype ImU32 :unsigned-int)

(cffi:defctype ImS64 :long-long)

(cffi:defctype ImU64 :unsigned-long-long)

(cffi:defcstruct ImVec2
	(x :float)
	(y :float)
	(__aref__ :pointer)
	(__aref__ :pointer))

(cffi:defcstruct ImVec4
	(x :float)
	(y :float)
	(z :float)
	(w :float))

;(cffi:defcfun ("_wrap_CreateContext__SWIG_0" CreateContext) :pointer
;  (shared_font_atlas :pointer))

(cffi:defcfun ("_wrap_CreateContext__SWIG_1" CreateContext) :pointer)

(cffi:defcfun ("_wrap_DestroyContext__SWIG_0" DestroyContext) :void
  (ctx :pointer))

(cffi:defcfun ("_wrap_DestroyContext__SWIG_1" DestroyContext) :void)

(cffi:defcfun ("_wrap_GetCurrentContext" GetCurrentContext) :pointer)

(cffi:defcfun ("_wrap_SetCurrentContext" SetCurrentContext) :void
  (ctx :pointer))

(cffi:defcfun ("_wrap_GetIO" GetIO) :pointer)

(cffi:defcfun ("_wrap_GetStyle" GetStyle) :pointer)

(cffi:defcfun ("_wrap_NewFrame" NewFrame) :void)

(cffi:defcfun ("_wrap_EndFrame" EndFrame) :void)

(cffi:defcfun ("_wrap_Render" Render) :void)

(cffi:defcfun ("_wrap_GetDrawData" GetDrawData) :pointer)

(cffi:defcfun ("_wrap_ShowDemoWindow__SWIG_0" ShowDemoWindow) :void
  (p_open :pointer))

(cffi:defcfun ("_wrap_ShowDemoWindow__SWIG_1" ShowDemoWindow) :void)

(cffi:defcfun ("_wrap_ShowAboutWindow__SWIG_0" ShowAboutWindow) :void
  (p_open :pointer))

(cffi:defcfun ("_wrap_ShowAboutWindow__SWIG_1" ShowAboutWindow) :void)

(cffi:defcfun ("_wrap_ShowMetricsWindow__SWIG_0" ShowMetricsWindow) :void
  (p_open :pointer))

(cffi:defcfun ("_wrap_ShowMetricsWindow__SWIG_1" ShowMetricsWindow) :void)

(cffi:defcfun ("_wrap_ShowStyleEditor__SWIG_0" ShowStyleEditor) :void
  (ref :pointer))

(cffi:defcfun ("_wrap_ShowStyleEditor__SWIG_1" ShowStyleEditor) :void)

(cffi:defcfun ("_wrap_ShowStyleSelector" ShowStyleSelector) :pointer
  (label :string))

(cffi:defcfun ("_wrap_ShowFontSelector" ShowFontSelector) :void
  (label :string))

(cffi:defcfun ("_wrap_ShowUserGuide" ShowUserGuide) :void)

(cffi:defcfun ("_wrap_GetVersion" GetVersion) :string)

(cffi:defcfun ("_wrap_StyleColorsDark__SWIG_0" StyleColorsDark) :void
  (dst :pointer))

(cffi:defcfun ("_wrap_StyleColorsDark__SWIG_1" StyleColorsDark) :void)

(cffi:defcfun ("_wrap_StyleColorsClassic__SWIG_0" StyleColorsClassic) :void
  (dst :pointer))

(cffi:defcfun ("_wrap_StyleColorsClassic__SWIG_1" StyleColorsClassic) :void)

(cffi:defcfun ("_wrap_StyleColorsLight__SWIG_0" StyleColorsLight) :void
  (dst :pointer))

(cffi:defcfun ("_wrap_StyleColorsLight__SWIG_1" StyleColorsLight) :void)

(cffi:defcfun ("_wrap_Begin__SWIG_0" Begin3) :pointer
  (name :string)
  (p_open :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_Begin__SWIG_1" Begin2) :pointer
  (name :string)
  (p_open :pointer))

(cffi:defcfun ("_wrap_Begin__SWIG_2" Begin) :pointer
  (name :string))

(cffi:defcfun ("_wrap_End" End) :void)

(cffi:defcfun ("_wrap_BeginChild__SWIG_0" BeginChild) :pointer
  (str_id :string)
  (size :pointer)
  (border :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_BeginChild__SWIG_1" BeginChild) :pointer
  (str_id :string)
  (size :pointer)
  (border :pointer))

(cffi:defcfun ("_wrap_BeginChild__SWIG_2" BeginChild) :pointer
  (str_id :string)
  (size :pointer))

(cffi:defcfun ("_wrap_BeginChild__SWIG_3" BeginChild) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_BeginChild__SWIG_4" BeginChild) :pointer
  (id :unsigned-int)
  (size :pointer)
  (border :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_BeginChild__SWIG_5" BeginChild) :pointer
  (id :unsigned-int)
  (size :pointer)
  (border :pointer))

(cffi:defcfun ("_wrap_BeginChild__SWIG_6" BeginChild) :pointer
  (id :unsigned-int)
  (size :pointer))

(cffi:defcfun ("_wrap_BeginChild__SWIG_7" BeginChild) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_EndChild" EndChild) :void)

(cffi:defcfun ("_wrap_IsWindowAppearing" IsWindowAppearing) :pointer)

(cffi:defcfun ("_wrap_IsWindowCollapsed" IsWindowCollapsed) :pointer)

(cffi:defcfun ("_wrap_IsWindowFocused__SWIG_0" IsWindowFocused) :pointer
  (flags :int))

(cffi:defcfun ("_wrap_IsWindowFocused__SWIG_1" IsWindowFocused) :pointer)

(cffi:defcfun ("_wrap_IsWindowHovered__SWIG_0" IsWindowHovered) :pointer
  (flags :int))

(cffi:defcfun ("_wrap_IsWindowHovered__SWIG_1" IsWindowHovered) :pointer)

(cffi:defcfun ("_wrap_GetWindowDrawList" GetWindowDrawList) :pointer)

(cffi:defcfun ("_wrap_GetWindowPos" GetWindowPos) ImVec2)

(cffi:defcfun ("_wrap_GetWindowSize" GetWindowSize) ImVec2)

(cffi:defcfun ("_wrap_GetWindowWidth" GetWindowWidth) :float)

(cffi:defcfun ("_wrap_GetWindowHeight" GetWindowHeight) :float)

(cffi:defcfun ("_wrap_SetNextWindowPos__SWIG_0" SetNextWindowPos) :void
  (pos :pointer)
  (cond :int)
  (pivot :pointer))

(cffi:defcfun ("_wrap_SetNextWindowPos__SWIG_1" SetNextWindowPos) :void
  (pos :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetNextWindowPos__SWIG_2" SetNextWindowPos) :void
  (pos :pointer))

(cffi:defcfun ("_wrap_SetNextWindowSize__SWIG_0" SetNextWindowSize) :void
  (size :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetNextWindowSize__SWIG_1" SetNextWindowSize) :void
  (size :pointer))

(cffi:defcfun ("_wrap_SetNextWindowSizeConstraints__SWIG_0" SetNextWindowSizeConstraints) :void
  (size_min :pointer)
  (size_max :pointer)
  (custom_callback :pointer)
  (custom_callback_data :pointer))

(cffi:defcfun ("_wrap_SetNextWindowSizeConstraints__SWIG_1" SetNextWindowSizeConstraints) :void
  (size_min :pointer)
  (size_max :pointer)
  (custom_callback :pointer))

(cffi:defcfun ("_wrap_SetNextWindowSizeConstraints__SWIG_2" SetNextWindowSizeConstraints) :void
  (size_min :pointer)
  (size_max :pointer))

(cffi:defcfun ("_wrap_SetNextWindowContentSize" SetNextWindowContentSize) :void
  (size :pointer))

(cffi:defcfun ("_wrap_SetNextWindowCollapsed__SWIG_0" SetNextWindowCollapsed) :void
  (collapsed :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetNextWindowCollapsed__SWIG_1" SetNextWindowCollapsed) :void
  (collapsed :pointer))

(cffi:defcfun ("_wrap_SetNextWindowFocus" SetNextWindowFocus) :void)

(cffi:defcfun ("_wrap_SetNextWindowBgAlpha" SetNextWindowBgAlpha) :void
  (alpha :float))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_0" SetWindowPos) :void
  (pos :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_1" SetWindowPos) :void
  (pos :pointer))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_0" SetWindowSize) :void
  (size :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_1" SetWindowSize) :void
  (size :pointer))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_0" SetWindowCollapsed) :void
  (collapsed :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_1" SetWindowCollapsed) :void
  (collapsed :pointer))

(cffi:defcfun ("_wrap_SetWindowFocus__SWIG_0" SetWindowFocus) :void)

(cffi:defcfun ("_wrap_SetWindowFontScale" SetWindowFontScale) :void
  (scale :float))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_2" SetWindowPos) :void
  (name :string)
  (pos :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_3" SetWindowPos) :void
  (name :string)
  (pos :pointer))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_2" SetWindowSize) :void
  (name :string)
  (size :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_3" SetWindowSize) :void
  (name :string)
  (size :pointer))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_2" SetWindowCollapsed) :void
  (name :string)
  (collapsed :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_3" SetWindowCollapsed) :void
  (name :string)
  (collapsed :pointer))

(cffi:defcfun ("_wrap_SetWindowFocus__SWIG_1" SetWindowFocus) :void
  (name :string))

(cffi:defcfun ("_wrap_GetContentRegionMax" GetContentRegionMax) ImVec2)

(cffi:defcfun ("_wrap_GetContentRegionAvail" GetContentRegionAvail) ImVec2)

(cffi:defcfun ("_wrap_GetWindowContentRegionMin" GetWindowContentRegionMin) ImVec2)

(cffi:defcfun ("_wrap_GetWindowContentRegionMax" GetWindowContentRegionMax) ImVec2)

(cffi:defcfun ("_wrap_GetWindowContentRegionWidth" GetWindowContentRegionWidth) :float)

(cffi:defcfun ("_wrap_GetScrollX" GetScrollX) :float)

(cffi:defcfun ("_wrap_GetScrollY" GetScrollY) :float)

(cffi:defcfun ("_wrap_GetScrollMaxX" GetScrollMaxX) :float)

(cffi:defcfun ("_wrap_GetScrollMaxY" GetScrollMaxY) :float)

(cffi:defcfun ("_wrap_SetScrollX__SWIG_0" SetScrollX) :void
  (scroll_x :float))

(cffi:defcfun ("_wrap_SetScrollY__SWIG_0" SetScrollY) :void
  (scroll_y :float))

(cffi:defcfun ("_wrap_SetScrollHereX__SWIG_0" SetScrollHereX) :void
  (center_x_ratio :float))

(cffi:defcfun ("_wrap_SetScrollHereX__SWIG_1" SetScrollHereX) :void)

(cffi:defcfun ("_wrap_SetScrollHereY__SWIG_0" SetScrollHereY) :void
  (center_y_ratio :float))

(cffi:defcfun ("_wrap_SetScrollHereY__SWIG_1" SetScrollHereY) :void)

(cffi:defcfun ("_wrap_SetScrollFromPosX__SWIG_0" SetScrollFromPosX) :void
  (local_x :float)
  (center_x_ratio :float))

(cffi:defcfun ("_wrap_SetScrollFromPosY__SWIG_0" SetScrollFromPosY) :void
  (local_y :float)
  (center_y_ratio :float))

(cffi:defcfun ("_wrap_PushFont" PushFont) :void
  (font :pointer))

(cffi:defcfun ("_wrap_PopFont" PopFont) :void)

(cffi:defcfun ("_wrap_PushStyleColor__SWIG_0" PushStyleColor) :void
  (idx :int)
  (col :unsigned-int))

(cffi:defcfun ("_wrap_PushStyleColor__SWIG_1" PushStyleColor) :void
  (idx :int)
  (col :pointer))

(cffi:defcfun ("_wrap_PopStyleColor__SWIG_0" PopStyleColor) :void
  (count :int))

(cffi:defcfun ("_wrap_PopStyleColor__SWIG_1" PopStyleColor) :void)

(cffi:defcfun ("_wrap_PushStyleVar__SWIG_0" PushStyleVar) :void
  (idx :int)
  (val :float))

(cffi:defcfun ("_wrap_PushStyleVar__SWIG_1" PushStyleVar) :void
  (idx :int)
  (val :pointer))

(cffi:defcfun ("_wrap_PopStyleVar__SWIG_0" PopStyleVar) :void
  (count :int))

(cffi:defcfun ("_wrap_PopStyleVar__SWIG_1" PopStyleVar) :void)

(cffi:defcfun ("_wrap_GetStyleColorVec4" GetStyleColorVec4) :pointer
  (idx :int))

(cffi:defcfun ("_wrap_GetFont" GetFont) :pointer)

(cffi:defcfun ("_wrap_GetFontSize" GetFontSize) :float)

(cffi:defcfun ("_wrap_GetFontTexUvWhitePixel" GetFontTexUvWhitePixel) ImVec2)

(cffi:defcfun ("_wrap_GetColorU32__SWIG_0" GetColorU32) :unsigned-int
  (idx :int)
  (alpha_mul :float))

(cffi:defcfun ("_wrap_GetColorU32__SWIG_1" GetColorU32) :unsigned-int
  (idx :int))

(cffi:defcfun ("_wrap_GetColorU32__SWIG_2" GetColorU32) :unsigned-int
  (col :pointer))

(cffi:defcfun ("_wrap_GetColorU32__SWIG_3" GetColorU32) :unsigned-int
  (col :unsigned-int))

(cffi:defcfun ("_wrap_PushItemWidth" PushItemWidth) :void
  (item_width :float))

(cffi:defcfun ("_wrap_PopItemWidth" PopItemWidth) :void)

(cffi:defcfun ("_wrap_SetNextItemWidth" SetNextItemWidth) :void
  (item_width :float))

(cffi:defcfun ("_wrap_CalcItemWidth" CalcItemWidth) :float)

(cffi:defcfun ("_wrap_PushTextWrapPos__SWIG_0" PushTextWrapPos) :void
  (wrap_local_pos_x :float))

(cffi:defcfun ("_wrap_PushTextWrapPos__SWIG_1" PushTextWrapPos) :void)

(cffi:defcfun ("_wrap_PopTextWrapPos" PopTextWrapPos) :void)

(cffi:defcfun ("_wrap_PushAllowKeyboardFocus" PushAllowKeyboardFocus) :void
  (allow_keyboard_focus :pointer))

(cffi:defcfun ("_wrap_PopAllowKeyboardFocus" PopAllowKeyboardFocus) :void)

(cffi:defcfun ("_wrap_PushButtonRepeat" PushButtonRepeat) :void
  (repeat :pointer))

(cffi:defcfun ("_wrap_PopButtonRepeat" PopButtonRepeat) :void)

(cffi:defcfun ("_wrap_Separator" Separator) :void)

(cffi:defcfun ("_wrap_SameLine__SWIG_0" SameLine) :void
  (offset_from_start_x :float)
  (spacing :float))

(cffi:defcfun ("_wrap_SameLine__SWIG_1" SameLine) :void
  (offset_from_start_x :float))

(cffi:defcfun ("_wrap_SameLine__SWIG_2" SameLine) :void)

(cffi:defcfun ("_wrap_NewLine" NewLine) :void)

(cffi:defcfun ("_wrap_Spacing" Spacing) :void)

(cffi:defcfun ("_wrap_Dummy" Dummy) :void
  (size :pointer))

(cffi:defcfun ("_wrap_Indent__SWIG_0" Indent) :void
  (indent_w :float))

(cffi:defcfun ("_wrap_Indent__SWIG_1" Indent) :void)

(cffi:defcfun ("_wrap_Unindent__SWIG_0" Unindent) :void
  (indent_w :float))

(cffi:defcfun ("_wrap_Unindent__SWIG_1" Unindent) :void)

(cffi:defcfun ("_wrap_BeginGroup" BeginGroup) :void)

(cffi:defcfun ("_wrap_EndGroup" EndGroup) :void)

(cffi:defcfun ("_wrap_GetCursorPos" GetCursorPos) ImVec2)

(cffi:defcfun ("_wrap_GetCursorPosX" GetCursorPosX) :float)

(cffi:defcfun ("_wrap_GetCursorPosY" GetCursorPosY) :float)

(cffi:defcfun ("_wrap_SetCursorPos" SetCursorPos) :void
  (local_pos :pointer))

(cffi:defcfun ("_wrap_SetCursorPosX" SetCursorPosX) :void
  (local_x :float))

(cffi:defcfun ("_wrap_SetCursorPosY" SetCursorPosY) :void
  (local_y :float))

(cffi:defcfun ("_wrap_GetCursorStartPos" GetCursorStartPos) ImVec2)

(cffi:defcfun ("_wrap_GetCursorScreenPos" GetCursorScreenPos) ImVec2)

(cffi:defcfun ("_wrap_SetCursorScreenPos" SetCursorScreenPos) :void
  (pos :pointer))

(cffi:defcfun ("_wrap_AlignTextToFramePadding" AlignTextToFramePadding) :void)

(cffi:defcfun ("_wrap_GetTextLineHeight" GetTextLineHeight) :float)

(cffi:defcfun ("_wrap_GetTextLineHeightWithSpacing" GetTextLineHeightWithSpacing) :float)

(cffi:defcfun ("_wrap_GetFrameHeight" GetFrameHeight) :float)

(cffi:defcfun ("_wrap_GetFrameHeightWithSpacing" GetFrameHeightWithSpacing) :float)

(cffi:defcfun ("_wrap_PushID__SWIG_0" PushID) :void
  (str_id :string))

(cffi:defcfun ("_wrap_PushID__SWIG_1" PushID) :void
  (str_id_begin :string)
  (str_id_end :string))

(cffi:defcfun ("_wrap_PushID__SWIG_2" PushID) :void
  (ptr_id :pointer))

(cffi:defcfun ("_wrap_PushID__SWIG_3" PushID) :void
  (int_id :int))

(cffi:defcfun ("_wrap_PopID" PopID) :void)

(cffi:defcfun ("_wrap_GetID__SWIG_0" GetID) :unsigned-int
  (str_id :string))

(cffi:defcfun ("_wrap_GetID__SWIG_1" GetID) :unsigned-int
  (str_id_begin :string)
  (str_id_end :string))

(cffi:defcfun ("_wrap_GetID__SWIG_2" GetID) :unsigned-int
  (ptr_id :pointer))

(cffi:defcfun ("_wrap_TextUnformatted__SWIG_0" TextUnformatted) :void
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_TextUnformatted__SWIG_1" TextUnformatted) :void
  (text :string))

(cffi:defcfun ("_wrap_Text" Text) :void
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TextV" TextV) :void
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_TextColored" TextColored) :void
  (col :pointer)
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TextColoredV" TextColoredV) :void
;;  (col :pointer)
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_TextDisabled" TextDisabled) :void
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TextDisabledV" TextDisabledV) :void
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_TextWrapped" TextWrapped) :void
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TextWrappedV" TextWrappedV) :void
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_LabelText" LabelText) :void
  (label :string)
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_LabelTextV" LabelTextV) :void
;;  (label :string)
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_BulletText" BulletText) :void
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_BulletTextV" BulletTextV) :void
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_Button__SWIG_0" Button) :bool
  (label :string)
  (size :pointer))

(cffi:defcfun ("_wrap_Button__SWIG_1" Button) :bool
  (label :string))

(cffi:defcfun ("_wrap_SmallButton" SmallButton) :bool
  (label :string))

(cffi:defcfun ("_wrap_InvisibleButton__SWIG_0" InvisibleButton) :bool
  (str_id :string)
  (size :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InvisibleButton__SWIG_1" InvisibleButton) :bool
  (str_id :string)
  (size :pointer))

(cffi:defcfun ("_wrap_ArrowButton" ArrowButton) :bool
  (str_id :string)
  (dir :int))

(cffi:defcfun ("_wrap_Image__SWIG_0" Image) :void
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (tint_col :pointer)
  (border_col :pointer))

(cffi:defcfun ("_wrap_Image__SWIG_1" Image) :void
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (tint_col :pointer))

(cffi:defcfun ("_wrap_Image__SWIG_2" Image) :void
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer))

(cffi:defcfun ("_wrap_Image__SWIG_3" Image) :void
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer))

(cffi:defcfun ("_wrap_Image__SWIG_4" Image) :void
  (user_texture_id :pointer)
  (size :pointer))

(cffi:defcfun ("_wrap_ImageButton__SWIG_0" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (frame_padding :int)
  (bg_col :pointer)
  (tint_col :pointer))

(cffi:defcfun ("_wrap_ImageButton__SWIG_1" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (frame_padding :int)
  (bg_col :pointer))

(cffi:defcfun ("_wrap_ImageButton__SWIG_2" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (frame_padding :int))

(cffi:defcfun ("_wrap_ImageButton__SWIG_3" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer))

(cffi:defcfun ("_wrap_ImageButton__SWIG_4" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer)
  (uv0 :pointer))

(cffi:defcfun ("_wrap_ImageButton__SWIG_5" ImageButton) :pointer
  (user_texture_id :pointer)
  (size :pointer))

(cffi:defcfun ("_wrap_Checkbox" Checkbox) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_CheckboxFlags" CheckboxFlags) :pointer
  (label :string)
  (flags :pointer)
  (flags_value :unsigned-int))

(cffi:defcfun ("_wrap_RadioButton__SWIG_0" RadioButton) :pointer
  (label :string)
  (active :pointer))

(cffi:defcfun ("_wrap_RadioButton__SWIG_1" RadioButton) :pointer
  (label :string)
  (v :pointer)
  (v_button :int))

(cffi:defcfun ("_wrap_ProgressBar__SWIG_0" ProgressBar) :void
  (fraction :float)
  (size_arg :pointer)
  (overlay :string))

(cffi:defcfun ("_wrap_ProgressBar__SWIG_1" ProgressBar) :void
  (fraction :float)
  (size_arg :pointer))

(cffi:defcfun ("_wrap_ProgressBar__SWIG_2" ProgressBar) :void
  (fraction :float))

(cffi:defcfun ("_wrap_Bullet" Bullet) :void)

(cffi:defcfun ("_wrap_BeginCombo__SWIG_0" BeginCombo) :pointer
  (label :string)
  (preview_value :string)
  (flags :int))

(cffi:defcfun ("_wrap_BeginCombo__SWIG_1" BeginCombo) :pointer
  (label :string)
  (preview_value :string))

(cffi:defcfun ("_wrap_EndCombo" EndCombo) :void)

(cffi:defcfun ("_wrap_Combo__SWIG_0" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items :pointer)
  (items_count :int)
  (popup_max_height_in_items :int))

(cffi:defcfun ("_wrap_Combo__SWIG_1" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items :pointer)
  (items_count :int))

(cffi:defcfun ("_wrap_Combo__SWIG_2" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items_separated_by_zeros :string)
  (popup_max_height_in_items :int))

(cffi:defcfun ("_wrap_Combo__SWIG_3" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items_separated_by_zeros :string))

(cffi:defcfun ("_wrap_Combo__SWIG_4" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items_getter :pointer)
  (data :pointer)
  (items_count :int)
  (popup_max_height_in_items :int))

(cffi:defcfun ("_wrap_Combo__SWIG_5" Combo) :pointer
  (label :string)
  (current_item :pointer)
  (items_getter :pointer)
  (data :pointer)
  (items_count :int))

(cffi:defcfun ("_wrap_DragFloat__SWIG_0" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragFloat__SWIG_1" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_DragFloat__SWIG_2" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_DragFloat__SWIG_3" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float))

(cffi:defcfun ("_wrap_DragFloat__SWIG_4" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragFloat__SWIG_5" DragFloat) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_0" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_1" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_2" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_3" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_4" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_5" DragFloat2) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_0" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_1" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_2" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_3" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_4" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_5" DragFloat3) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_0" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_1" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_2" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_3" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_4" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_5" DragFloat4) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_0" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (format_max :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_1" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (format_max :string))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_2" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_3" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_4" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :float))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_5" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragFloatRange2__SWIG_6" DragFloatRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer))

(cffi:defcfun ("_wrap_DragInt__SWIG_0" DragInt) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragInt__SWIG_1" DragInt) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_DragInt__SWIG_2" DragInt) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_DragInt__SWIG_3" DragInt) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int))

(cffi:defcfun ("_wrap_DragInt__SWIG_4" DragInt) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragInt__SWIG_5" DragInt) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragInt2__SWIG_0" DragInt2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragInt2__SWIG_1" DragInt2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_DragInt2__SWIG_2" DragInt2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_DragInt2__SWIG_3" DragInt2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int))

(cffi:defcfun ("_wrap_DragInt2__SWIG_4" DragInt2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragInt2__SWIG_5" DragInt2) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragInt3__SWIG_0" DragInt3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragInt3__SWIG_1" DragInt3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_DragInt3__SWIG_2" DragInt3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_DragInt3__SWIG_3" DragInt3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int))

(cffi:defcfun ("_wrap_DragInt3__SWIG_4" DragInt3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragInt3__SWIG_5" DragInt3) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragInt4__SWIG_0" DragInt4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragInt4__SWIG_1" DragInt4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_DragInt4__SWIG_2" DragInt4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_DragInt4__SWIG_3" DragInt4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :int))

(cffi:defcfun ("_wrap_DragInt4__SWIG_4" DragInt4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragInt4__SWIG_5" DragInt4) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_0" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (format_max :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_1" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string)
  (format_max :string))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_2" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_3" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_4" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float)
  (v_min :int))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_5" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragIntRange2__SWIG_6" DragIntRange2) :pointer
  (label :string)
  (v_current_min :pointer)
  (v_current_max :pointer))

(cffi:defcfun ("_wrap_DragScalar__SWIG_0" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragScalar__SWIG_1" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string))

(cffi:defcfun ("_wrap_DragScalar__SWIG_2" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_DragScalar__SWIG_3" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float)
  (p_min :pointer))

(cffi:defcfun ("_wrap_DragScalar__SWIG_4" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_0" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_1" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_2" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_3" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float)
  (p_min :pointer))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_4" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float))

(cffi:defcfun ("_wrap_SliderFloat__SWIG_0" SliderFloat) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderFloat__SWIG_1" SliderFloat) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_SliderFloat__SWIG_2" SliderFloatMinMax) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_SliderFloat2__SWIG_0" SliderFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderFloat2__SWIG_1" SliderFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_SliderFloat2__SWIG_2" SliderFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_SliderFloat3__SWIG_0" SliderFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderFloat3__SWIG_1" SliderFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_SliderFloat3__SWIG_2" SliderFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_SliderFloat4__SWIG_0" SliderFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderFloat4__SWIG_1" SliderFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_SliderFloat4__SWIG_2" SliderFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_SliderAngle__SWIG_0" SliderAngle) :pointer
  (label :string)
  (v_rad :pointer)
  (v_degrees_min :float)
  (v_degrees_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderAngle__SWIG_1" SliderAngle) :pointer
  (label :string)
  (v_rad :pointer)
  (v_degrees_min :float)
  (v_degrees_max :float)
  (format :string))

(cffi:defcfun ("_wrap_SliderAngle__SWIG_2" SliderAngle) :pointer
  (label :string)
  (v_rad :pointer)
  (v_degrees_min :float)
  (v_degrees_max :float))

(cffi:defcfun ("_wrap_SliderAngle__SWIG_3" SliderAngle) :pointer
  (label :string)
  (v_rad :pointer)
  (v_degrees_min :float))

(cffi:defcfun ("_wrap_SliderAngle__SWIG_4" SliderAngle) :pointer
  (label :string)
  (v_rad :pointer))

(cffi:defcfun ("_wrap_SliderInt__SWIG_0" SliderInt) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderInt__SWIG_1" SliderInt) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_SliderInt__SWIG_2" SliderInt) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_SliderInt2__SWIG_0" SliderInt2) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderInt2__SWIG_1" SliderInt2) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_SliderInt2__SWIG_2" SliderInt2) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_SliderInt3__SWIG_0" SliderInt3) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderInt3__SWIG_1" SliderInt3) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_SliderInt3__SWIG_2" SliderInt3) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_SliderInt4__SWIG_0" SliderInt4) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderInt4__SWIG_1" SliderInt4) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_SliderInt4__SWIG_2" SliderInt4) :pointer
  (label :string)
  (v :pointer)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_SliderScalar__SWIG_0" SliderScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderScalar__SWIG_1" SliderScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string))

(cffi:defcfun ("_wrap_SliderScalar__SWIG_2" SliderScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_SliderScalarN__SWIG_0" SliderScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderScalarN__SWIG_1" SliderScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_min :pointer)
  (p_max :pointer)
  (format :string))

(cffi:defcfun ("_wrap_SliderScalarN__SWIG_2" SliderScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_VSliderFloat__SWIG_0" VSliderFloat) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_VSliderFloat__SWIG_1" VSliderFloat) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string))

(cffi:defcfun ("_wrap_VSliderFloat__SWIG_2" VSliderFloat) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :float)
  (v_max :float))

(cffi:defcfun ("_wrap_VSliderInt__SWIG_0" VSliderInt) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_VSliderInt__SWIG_1" VSliderInt) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :int)
  (v_max :int)
  (format :string))

(cffi:defcfun ("_wrap_VSliderInt__SWIG_2" VSliderInt) :pointer
  (label :string)
  (size :pointer)
  (v :pointer)
  (v_min :int)
  (v_max :int))

(cffi:defcfun ("_wrap_VSliderScalar__SWIG_0" VSliderScalar) :pointer
  (label :string)
  (size :pointer)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_VSliderScalar__SWIG_1" VSliderScalar) :pointer
  (label :string)
  (size :pointer)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string))

(cffi:defcfun ("_wrap_VSliderScalar__SWIG_2" VSliderScalar) :pointer
  (label :string)
  (size :pointer)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_InputText__SWIG_0" InputTextUCB) :pointer
  (label :string)
  (buf :pointer)
  (buf_size :int)
  (flags :int)
  (callback :pointer)
  (user_data :pointer))

(cffi:defcfun ("_wrap_InputText__SWIG_1" InputTextCB) :pointer
  (label :string)
  (buf :pointer)
  (buf_size :int)
  (flags :int)
  (callback :pointer))

(cffi:defcfun ("_wrap_InputText__SWIG_2" InputText) :pointer
  (label :string)
  (buf :pointer)
  (buf_size :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputText__SWIG_3" InputText) :pointer
  (label :string)
  (buf :pointer)
  (buf_size :int))

(cffi:defcfun ("_wrap_InputTextMultiline__SWIG_0" InputTextMultilineUCB) :pointer
  (label :string)
  (buf :string)
  (buf_size :int)
  (size :pointer)
  (flags :int)
  (callback :pointer)
  (user_data :pointer))

(cffi:defcfun ("_wrap_InputTextMultiline__SWIG_1" InputTextMultilineCB) :pointer
  (label :string)
  (buf :string)
  (buf_size :int)
  (size :pointer)
  (flags :int)
  (callback :pointer))

(cffi:defcfun ("_wrap_InputTextMultiline__SWIG_2" InputTextMultiline) :pointer
  (label :string)
  (buf :string)
  (buf_size :int)
  (size :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InputTextMultiline__SWIG_3" InputTextMultiline) :pointer
  (label :string)
  (buf :string)
  (buf_size :int)
  (size :pointer))

(cffi:defcfun ("_wrap_InputTextMultiline__SWIG_4" InputTextMultiline) :pointer
  (label :string)
  (buf :string)
  (buf_size :int))

(cffi:defcfun ("_wrap_InputTextWithHint__SWIG_0" InputTextWithHint) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :pointer)
  (flags :int)
  (callback :pointer)
  (user_data :pointer))

(cffi:defcfun ("_wrap_InputTextWithHint__SWIG_1" InputTextWithHint) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :pointer)
  (flags :int)
  (callback :pointer))

(cffi:defcfun ("_wrap_InputTextWithHint__SWIG_2" InputTextWithHint) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InputTextWithHint__SWIG_3" InputTextWithHint) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :pointer))

(cffi:defcfun ("_wrap_InputFloat__SWIG_0" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float)
  (step_fast :float)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat__SWIG_1" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float)
  (step_fast :float)
  (format :string))

(cffi:defcfun ("_wrap_InputFloat__SWIG_2" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float)
  (step_fast :float))

(cffi:defcfun ("_wrap_InputFloat__SWIG_3" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float))

(cffi:defcfun ("_wrap_InputFloat__SWIG_4" InputFloat) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputFloat2__SWIG_0" InputFloat2) :pointer
  (label :string)
  (v :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat2__SWIG_1" InputFloat2) :pointer
  (label :string)
  (v :pointer)
  (format :string))

(cffi:defcfun ("_wrap_InputFloat2__SWIG_2" InputFloat2) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputFloat3__SWIG_0" InputFloat3) :pointer
  (label :string)
  (v :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat3__SWIG_1" InputFloat3) :pointer
  (label :string)
  (v :pointer)
  (format :string))

(cffi:defcfun ("_wrap_InputFloat3__SWIG_2" InputFloat3) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputFloat4__SWIG_0" InputFloat4) :pointer
  (label :string)
  (v :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat4__SWIG_1" InputFloat4) :pointer
  (label :string)
  (v :pointer)
  (format :string))

(cffi:defcfun ("_wrap_InputFloat4__SWIG_2" InputFloat4) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputInt__SWIG_0" InputInt) :pointer
  (label :string)
  (v :pointer)
  (step :int)
  (step_fast :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputInt__SWIG_1" InputInt) :pointer
  (label :string)
  (v :pointer)
  (step :int)
  (step_fast :int))

(cffi:defcfun ("_wrap_InputInt__SWIG_2" InputInt) :pointer
  (label :string)
  (v :pointer)
  (step :int))

(cffi:defcfun ("_wrap_InputInt__SWIG_3" InputInt) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputInt2__SWIG_0" InputInt2) :pointer
  (label :string)
  (v :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InputInt2__SWIG_1" InputInt2) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputInt3__SWIG_0" InputInt3) :pointer
  (label :string)
  (v :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InputInt3__SWIG_1" InputInt3) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputInt4__SWIG_0" InputInt4) :pointer
  (label :string)
  (v :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_InputInt4__SWIG_1" InputInt4) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputDouble__SWIG_0" InputDouble) :pointer
  (label :string)
  (v :pointer)
  (step :double)
  (step_fast :double)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputDouble__SWIG_1" InputDouble) :pointer
  (label :string)
  (v :pointer)
  (step :double)
  (step_fast :double)
  (format :string))

(cffi:defcfun ("_wrap_InputDouble__SWIG_2" InputDouble) :pointer
  (label :string)
  (v :pointer)
  (step :double)
  (step_fast :double))

(cffi:defcfun ("_wrap_InputDouble__SWIG_3" InputDouble) :pointer
  (label :string)
  (v :pointer)
  (step :double))

(cffi:defcfun ("_wrap_InputDouble__SWIG_4" InputDouble) :pointer
  (label :string)
  (v :pointer))

(cffi:defcfun ("_wrap_InputScalar__SWIG_0" InputScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_step :pointer)
  (p_step_fast :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputScalar__SWIG_1" InputScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_step :pointer)
  (p_step_fast :pointer)
  (format :string))

(cffi:defcfun ("_wrap_InputScalar__SWIG_2" InputScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_step :pointer)
  (p_step_fast :pointer))

(cffi:defcfun ("_wrap_InputScalar__SWIG_3" InputScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_step :pointer))

(cffi:defcfun ("_wrap_InputScalar__SWIG_4" InputScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer))

(cffi:defcfun ("_wrap_InputScalarN__SWIG_0" InputScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_step :pointer)
  (p_step_fast :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_InputScalarN__SWIG_1" InputScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_step :pointer)
  (p_step_fast :pointer)
  (format :string))

(cffi:defcfun ("_wrap_InputScalarN__SWIG_2" InputScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_step :pointer)
  (p_step_fast :pointer))

(cffi:defcfun ("_wrap_InputScalarN__SWIG_3" InputScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_step :pointer))

(cffi:defcfun ("_wrap_InputScalarN__SWIG_4" InputScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int))

(cffi:defcfun ("_wrap_ColorEdit3__SWIG_0" ColorEdit3) :pointer
  (label :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorEdit3__SWIG_1" ColorEdit3) :pointer
  (label :string)
  (col :pointer))

(cffi:defcfun ("_wrap_ColorEdit4__SWIG_0" ColorEdit4) :pointer
  (label :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorEdit4__SWIG_1" ColorEdit4) :pointer
  (label :string)
  (col :pointer))

(cffi:defcfun ("_wrap_ColorPicker3__SWIG_0" ColorPicker3) :pointer
  (label :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorPicker3__SWIG_1" ColorPicker3) :pointer
  (label :string)
  (col :pointer))

(cffi:defcfun ("_wrap_ColorPicker4__SWIG_0" ColorPicker4) :pointer
  (label :string)
  (col :pointer)
  (flags :int)
  (ref_col :pointer))

(cffi:defcfun ("_wrap_ColorPicker4__SWIG_1" ColorPicker4) :pointer
  (label :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorPicker4__SWIG_2" ColorPicker4) :pointer
  (label :string)
  (col :pointer))

(cffi:defcfun ("_wrap_ColorButton__SWIG_0" ColorButton) :pointer
  (desc_id :string)
  (col :pointer)
  (flags :int)
  (size ImVec2))

(cffi:defcfun ("_wrap_ColorButton__SWIG_1" ColorButton) :pointer
  (desc_id :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorButton__SWIG_2" ColorButton) :pointer
  (desc_id :string)
  (col :pointer))

(cffi:defcfun ("_wrap_SetColorEditOptions" SetColorEditOptions) :void
  (flags :int))

(cffi:defcfun ("_wrap_TreeNode__SWIG_0" TreeNode) :pointer
  (label :string))

(cffi:defcfun ("_wrap_TreeNode__SWIG_1" TreeNode) :pointer
  (str_id :string)
  (fmt :string)
  &rest)

(cffi:defcfun ("_wrap_TreeNode__SWIG_2" TreeNode) :pointer
  (ptr_id :pointer)
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TreeNodeV__SWIG_0" TreeNodeV) :pointer
;;  (str_id :string)
;;  (fmt :string)
;;  (args :pointer))

;;(cffi:defcfun ("_wrap_TreeNodeV__SWIG_1" TreeNodeV) :pointer
;;  (ptr_id :pointer)
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_TreeNodeEx__SWIG_0" TreeNodeEx) :pointer
  (label :string)
  (flags :int))

(cffi:defcfun ("_wrap_TreeNodeEx__SWIG_1" TreeNodeEx) :pointer
  (label :string))

(cffi:defcfun ("_wrap_TreeNodeEx__SWIG_2" TreeNodeEx) :pointer
  (str_id :string)
  (flags :int)
  (fmt :string)
  &rest)

(cffi:defcfun ("_wrap_TreeNodeEx__SWIG_3" TreeNodeEx) :pointer
  (ptr_id :pointer)
  (flags :int)
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_TreeNodeExV__SWIG_0" TreeNodeExV) :pointer
;;  (str_id :string)
;;  (flags :int)
;;  (fmt :string)
;;  (args :pointer))
;;
;;(cffi:defcfun ("_wrap_TreeNodeExV__SWIG_1" TreeNodeExV) :pointer
;;  (ptr_id :pointer)
;;  (flags :int)
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_TreePush__SWIG_0" TreePush) :void
  (str_id :string))

(cffi:defcfun ("_wrap_TreePush__SWIG_1" TreePush) :void
  (ptr_id :pointer))

(cffi:defcfun ("_wrap_TreePush__SWIG_2" TreePush) :void)

(cffi:defcfun ("_wrap_TreePop" TreePop) :void)

(cffi:defcfun ("_wrap_GetTreeNodeToLabelSpacing" GetTreeNodeToLabelSpacing) :float)

(cffi:defcfun ("_wrap_CollapsingHeader__SWIG_0" CollapsingHeader) :pointer
  (label :string)
  (flags :int))

(cffi:defcfun ("_wrap_CollapsingHeader__SWIG_1" CollapsingHeader) :pointer
  (label :string))

(cffi:defcfun ("_wrap_CollapsingHeader__SWIG_2" CollapsingHeader) :pointer
  (label :string)
  (p_open :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_CollapsingHeader__SWIG_3" CollapsingHeader) :pointer
  (label :string)
  (p_open :pointer))

(cffi:defcfun ("_wrap_SetNextItemOpen__SWIG_0" SetNextItemOpen) :void
  (is_open :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetNextItemOpen__SWIG_1" SetNextItemOpen) :void
  (is_open :pointer))

(cffi:defcfun ("_wrap_Selectable__SWIG_0" Selectable) :pointer
  (label :string)
  (selected :pointer)
  (flags :int)
  (size :pointer))

(cffi:defcfun ("_wrap_Selectable__SWIG_1" Selectable) :pointer
  (label :string)
  (selected :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_Selectable__SWIG_2" Selectable) :pointer
  (label :string)
  (selected :pointer))

(cffi:defcfun ("_wrap_Selectable__SWIG_3" Selectable) :pointer
  (label :string))

(cffi:defcfun ("_wrap_Selectable__SWIG_4" Selectable) :pointer
  (label :string)
  (p_selected :pointer)
  (flags :int)
  (size :pointer))

(cffi:defcfun ("_wrap_Selectable__SWIG_5" Selectable) :pointer
  (label :string)
  (p_selected :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_Selectable__SWIG_6" Selectable) :pointer
  (label :string)
  (p_selected :pointer))

(cffi:defcfun ("_wrap_ListBox__SWIG_0" ListBox) :pointer
  (label :string)
  (current_item :pointer)
  (items :pointer)
  (items_count :int)
  (height_in_items :int))

(cffi:defcfun ("_wrap_ListBox__SWIG_1" ListBox) :pointer
  (label :string)
  (current_item :pointer)
  (items :pointer)
  (items_count :int))

(cffi:defcfun ("_wrap_ListBox__SWIG_2" ListBox) :pointer
  (label :string)
  (current_item :pointer)
  (items_getter :pointer)
  (data :pointer)
  (items_count :int)
  (height_in_items :int))

(cffi:defcfun ("_wrap_ListBox__SWIG_3" ListBox) :pointer
  (label :string)
  (current_item :pointer)
  (items_getter :pointer)
  (data :pointer)
  (items_count :int))

(cffi:defcfun ("_wrap_ListBoxHeader__SWIG_0" ListBoxHeader) :pointer
  (label :string)
  (size :pointer))

(cffi:defcfun ("_wrap_ListBoxHeader__SWIG_1" ListBoxHeader) :pointer
  (label :string))

(cffi:defcfun ("_wrap_ListBoxHeader__SWIG_2" ListBoxHeader) :pointer
  (label :string)
  (items_count :int)
  (height_in_items :int))

(cffi:defcfun ("_wrap_ListBoxHeader__SWIG_3" ListBoxHeader) :pointer
  (label :string)
  (items_count :int))

(cffi:defcfun ("_wrap_ListBoxFooter" ListBoxFooter) :void)

(cffi:defcfun ("_wrap_PlotLines__SWIG_0" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2)
  (stride :int))

(cffi:defcfun ("_wrap_PlotLines__SWIG_1" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2))

(cffi:defcfun ("_wrap_PlotLines__SWIG_2" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float))

(cffi:defcfun ("_wrap_PlotLines__SWIG_3" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float))

(cffi:defcfun ("_wrap_PlotLines__SWIG_4" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string))

(cffi:defcfun ("_wrap_PlotLines__SWIG_5" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int))

(cffi:defcfun ("_wrap_PlotLines__SWIG_6" PlotLines) :void
  (label :string)
  (values :pointer)
  (values_count :int))

(cffi:defcfun ("_wrap_PlotLines__SWIG_7" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2))

(cffi:defcfun ("_wrap_PlotLines__SWIG_8" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float))

(cffi:defcfun ("_wrap_PlotLines__SWIG_9" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float))

(cffi:defcfun ("_wrap_PlotLines__SWIG_10" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string))

(cffi:defcfun ("_wrap_PlotLines__SWIG_11" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int))

(cffi:defcfun ("_wrap_PlotLines__SWIG_12" PlotLines) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_0" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2)
  (stride :int))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_1" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_2" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_3" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_4" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_5" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int)
  (values_offset :int))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_6" PlotHistogram) :void
  (label :string)
  (values :pointer)
  (values_count :int))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_7" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (graph_size ImVec2))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_8" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_9" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_10" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_11" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int))

(cffi:defcfun ("_wrap_PlotHistogram__SWIG_12" PlotHistogram) :void
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int))

(cffi:defcfun ("_wrap_Value__SWIG_0" Value) :void
  (prefix :string)
  (b :pointer))

(cffi:defcfun ("_wrap_Value__SWIG_1" Value) :void
  (prefix :string)
  (v :int))

(cffi:defcfun ("_wrap_Value__SWIG_2" Value) :void
  (prefix :string)
  (v :unsigned-int))

(cffi:defcfun ("_wrap_Value__SWIG_3" Value) :void
  (prefix :string)
  (v :float)
  (float_format :string))

(cffi:defcfun ("_wrap_Value__SWIG_4" Value) :void
  (prefix :string)
  (v :float))

(cffi:defcfun ("_wrap_BeginMenuBar" BeginMenuBar) :pointer)

(cffi:defcfun ("_wrap_EndMenuBar" EndMenuBar) :void)

(cffi:defcfun ("_wrap_BeginMainMenuBar" BeginMainMenuBar) :pointer)

(cffi:defcfun ("_wrap_EndMainMenuBar" EndMainMenuBar) :void)

(cffi:defcfun ("_wrap_BeginMenu__SWIG_0" BeginMenu) :pointer
  (label :string)
  (enabled :pointer))

(cffi:defcfun ("_wrap_BeginMenu__SWIG_1" BeginMenu) :pointer
  (label :string))

(cffi:defcfun ("_wrap_EndMenu" EndMenu) :void)

(cffi:defcfun ("_wrap_MenuItem__SWIG_0" MenuItem) :pointer
  (label :string)
  (shortcut :string)
  (selected :pointer)
  (enabled :pointer))

(cffi:defcfun ("_wrap_MenuItem__SWIG_1" MenuItem) :pointer
  (label :string)
  (shortcut :string)
  (selected :pointer))

(cffi:defcfun ("_wrap_MenuItem__SWIG_2" MenuItem) :pointer
  (label :string)
  (shortcut :string))

(cffi:defcfun ("_wrap_MenuItem__SWIG_3" MenuItem) :pointer
  (label :string))

(cffi:defcfun ("_wrap_MenuItem__SWIG_4" MenuItem) :pointer
  (label :string)
  (shortcut :string)
  (p_selected :pointer)
  (enabled :pointer))

(cffi:defcfun ("_wrap_MenuItem__SWIG_5" MenuItem) :pointer
  (label :string)
  (shortcut :string)
  (p_selected :pointer))

(cffi:defcfun ("_wrap_BeginTooltip" BeginTooltip) :void)

(cffi:defcfun ("_wrap_EndTooltip" EndTooltip) :void)

(cffi:defcfun ("_wrap_SetTooltip" SetTooltip) :void
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_SetTooltipV" SetTooltipV) :void
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_BeginPopup__SWIG_0" BeginPopup) :pointer
  (str_id :string)
  (flags :int))

(cffi:defcfun ("_wrap_BeginPopup__SWIG_1" BeginPopup) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_BeginPopupModal__SWIG_0" BeginPopupModal) :pointer
  (name :string)
  (p_open :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_BeginPopupModal__SWIG_1" BeginPopupModal) :pointer
  (name :string)
  (p_open :pointer))

(cffi:defcfun ("_wrap_BeginPopupModal__SWIG_2" BeginPopupModal) :pointer
  (name :string))

(cffi:defcfun ("_wrap_EndPopup" EndPopup) :void)

(cffi:defcfun ("_wrap_OpenPopup__SWIG_0" OpenPopup) :void
  (str_id :string)
  (popup_flags :int))

(cffi:defcfun ("_wrap_OpenPopup__SWIG_1" OpenPopup) :void
  (str_id :string))

(cffi:defcfun ("_wrap_OpenPopupContextItem__SWIG_0" OpenPopupContextItem) :pointer
  (str_id :string)
  (popup_flags :int))

(cffi:defcfun ("_wrap_OpenPopupContextItem__SWIG_1" OpenPopupContextItem) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_OpenPopupContextItem__SWIG_2" OpenPopupContextItem) :pointer)

(cffi:defcfun ("_wrap_CloseCurrentPopup" CloseCurrentPopup) :void)

(cffi:defcfun ("_wrap_BeginPopupContextItem__SWIG_0" BeginPopupContextItem) :pointer
  (str_id :string)
  (popup_flags :int))

(cffi:defcfun ("_wrap_BeginPopupContextItem__SWIG_1" BeginPopupContextItem) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_BeginPopupContextItem__SWIG_2" BeginPopupContextItem) :pointer)

(cffi:defcfun ("_wrap_BeginPopupContextWindow__SWIG_0" BeginPopupContextWindow) :pointer
  (str_id :string)
  (popup_flags :int))

(cffi:defcfun ("_wrap_BeginPopupContextWindow__SWIG_1" BeginPopupContextWindow) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_BeginPopupContextWindow__SWIG_2" BeginPopupContextWindow) :pointer)

(cffi:defcfun ("_wrap_BeginPopupContextVoid__SWIG_0" BeginPopupContextVoid) :pointer
  (str_id :string)
  (popup_flags :int))

(cffi:defcfun ("_wrap_BeginPopupContextVoid__SWIG_1" BeginPopupContextVoid) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_BeginPopupContextVoid__SWIG_2" BeginPopupContextVoid) :pointer)

(cffi:defcfun ("_wrap_IsPopupOpen__SWIG_0" IsPopupOpen) :pointer
  (str_id :string)
  (flags :int))

(cffi:defcfun ("_wrap_IsPopupOpen__SWIG_1" IsPopupOpen) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_Columns__SWIG_0" Columns) :void
  (count :int)
  (id :string)
  (border :pointer))

(cffi:defcfun ("_wrap_Columns__SWIG_1" Columns) :void
  (count :int)
  (id :string))

(cffi:defcfun ("_wrap_Columns__SWIG_2" Columns1) :void
  (count :int))

(cffi:defcfun ("_wrap_Columns__SWIG_3" Columns) :void)

(cffi:defcfun ("_wrap_NextColumn" NextColumn) :void)

(cffi:defcfun ("_wrap_GetColumnIndex" GetColumnIndex) :int)

(cffi:defcfun ("_wrap_GetColumnWidth__SWIG_0" GetColumnWidth) :float
  (column_index :int))

(cffi:defcfun ("_wrap_GetColumnWidth__SWIG_1" GetColumnWidth) :float)

(cffi:defcfun ("_wrap_SetColumnWidth" SetColumnWidth) :void
  (column_index :int)
  (width :float))

(cffi:defcfun ("_wrap_GetColumnOffset__SWIG_0" GetColumnOffset) :float
  (column_index :int))

(cffi:defcfun ("_wrap_GetColumnOffset__SWIG_1" GetColumnOffset) :float)

(cffi:defcfun ("_wrap_SetColumnOffset" SetColumnOffset) :void
  (column_index :int)
  (offset_x :float))

(cffi:defcfun ("_wrap_GetColumnsCount" GetColumnsCount) :int)

(cffi:defcfun ("_wrap_BeginTabBar__SWIG_0" BeginTabBar2) :bool
  (str_id :string)
  (flags :int))

(cffi:defcfun ("_wrap_BeginTabBar__SWIG_1" BeginTabBar) :bool
  (str_id :string))

(cffi:defcfun ("_wrap_EndTabBar" EndTabBar) :void)

(cffi:defcfun ("_wrap_BeginTabItem__SWIG_0" BeginTabItem3) :bool
  (label :string)
  (p_open :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_BeginTabItem__SWIG_1" BeginTabItem) :bool
  (label :string)
  (p_open :pointer))

(cffi:defcfun ("_wrap_BeginTabItem__SWIG_2" BeginTabItem) :bool
  (label :string))

(cffi:defcfun ("_wrap_EndTabItem" EndTabItem) :void)

(cffi:defcfun ("_wrap_SetTabItemClosed" SetTabItemClosed) :void
  (tab_or_docked_window_label :string))

(cffi:defcfun ("_wrap_LogToTTY__SWIG_0" LogToTTY) :void
  (auto_open_depth :int))

(cffi:defcfun ("_wrap_LogToTTY__SWIG_1" LogToTTY) :void)

(cffi:defcfun ("_wrap_LogToFile__SWIG_0" LogToFile) :void
  (auto_open_depth :int)
  (filename :string))

(cffi:defcfun ("_wrap_LogToFile__SWIG_1" LogToFile) :void
  (auto_open_depth :int))

(cffi:defcfun ("_wrap_LogToFile__SWIG_2" LogToFile) :void)

(cffi:defcfun ("_wrap_LogToClipboard__SWIG_0" LogToClipboard) :void
  (auto_open_depth :int))

(cffi:defcfun ("_wrap_LogToClipboard__SWIG_1" LogToClipboard) :void)

(cffi:defcfun ("_wrap_LogFinish" LogFinish) :void)

(cffi:defcfun ("_wrap_LogButtons" LogButtons) :void)

(cffi:defcfun ("_wrap_LogText" LogText) :void
  (fmt :string)
  &rest)

(cffi:defcfun ("_wrap_BeginDragDropSource__SWIG_0" BeginDragDropSource) :pointer
  (flags :int))

(cffi:defcfun ("_wrap_BeginDragDropSource__SWIG_1" BeginDragDropSource) :pointer)

(cffi:defcfun ("_wrap_SetDragDropPayload__SWIG_0" SetDragDropPayload) :pointer
  (type :string)
  (data :pointer)
  (sz :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetDragDropPayload__SWIG_1" SetDragDropPayload) :pointer
  (type :string)
  (data :pointer)
  (sz :pointer))

(cffi:defcfun ("_wrap_EndDragDropSource" EndDragDropSource) :void)

(cffi:defcfun ("_wrap_BeginDragDropTarget" BeginDragDropTarget) :pointer)

(cffi:defcfun ("_wrap_AcceptDragDropPayload__SWIG_0" AcceptDragDropPayload) :pointer
  (type :string)
  (flags :int))

(cffi:defcfun ("_wrap_AcceptDragDropPayload__SWIG_1" AcceptDragDropPayload) :pointer
  (type :string))

(cffi:defcfun ("_wrap_EndDragDropTarget" EndDragDropTarget) :void)

(cffi:defcfun ("_wrap_GetDragDropPayload" GetDragDropPayload) :pointer)

(cffi:defcfun ("_wrap_PushClipRect" PushClipRect) :void
  (clip_rect_min :pointer)
  (clip_rect_max :pointer)
  (intersect_with_current_clip_rect :pointer))

(cffi:defcfun ("_wrap_PopClipRect" PopClipRect) :void)

(cffi:defcfun ("_wrap_SetItemDefaultFocus" SetItemDefaultFocus) :void)

(cffi:defcfun ("_wrap_SetKeyboardFocusHere__SWIG_0" SetKeyboardFocusHere) :void
  (offset :int))

(cffi:defcfun ("_wrap_SetKeyboardFocusHere__SWIG_1" SetKeyboardFocusHere) :void)

(cffi:defcfun ("_wrap_IsItemHovered__SWIG_0" IsItemHovered) :pointer
  (flags :int))

(cffi:defcfun ("_wrap_IsItemHovered__SWIG_1" IsItemHovered) :pointer)

(cffi:defcfun ("_wrap_IsItemActive" IsItemActive) :pointer)

(cffi:defcfun ("_wrap_IsItemFocused" IsItemFocused) :pointer)

(cffi:defcfun ("_wrap_IsItemClicked__SWIG_0" IsItemClicked) :pointer
  (mouse_button :int))

(cffi:defcfun ("_wrap_IsItemClicked__SWIG_1" IsItemClicked) :pointer)

(cffi:defcfun ("_wrap_IsItemVisible" IsItemVisible) :pointer)

(cffi:defcfun ("_wrap_IsItemEdited" IsItemEdited) :pointer)

(cffi:defcfun ("_wrap_IsItemActivated" IsItemActivated) :pointer)

(cffi:defcfun ("_wrap_IsItemDeactivated" IsItemDeactivated) :pointer)

(cffi:defcfun ("_wrap_IsItemDeactivatedAfterEdit" IsItemDeactivatedAfterEdit) :pointer)

(cffi:defcfun ("_wrap_IsItemToggledOpen" IsItemToggledOpen) :pointer)

(cffi:defcfun ("_wrap_IsAnyItemHovered" IsAnyItemHovered) :pointer)

(cffi:defcfun ("_wrap_IsAnyItemActive" IsAnyItemActive) :pointer)

(cffi:defcfun ("_wrap_IsAnyItemFocused" IsAnyItemFocused) :pointer)

(cffi:defcfun ("_wrap_GetItemRectMin" GetItemRectMin) ImVec2)

(cffi:defcfun ("_wrap_GetItemRectMax" GetItemRectMax) ImVec2)

(cffi:defcfun ("_wrap_GetItemRectSize" GetItemRectSize) ImVec2)

(cffi:defcfun ("_wrap_SetItemAllowOverlap" SetItemAllowOverlap) :void)

(cffi:defcfun ("_wrap_IsRectVisible__SWIG_0" IsRectVisible) :pointer
  (size :pointer))

(cffi:defcfun ("_wrap_IsRectVisible__SWIG_1" IsRectVisible) :pointer
  (rect_min :pointer)
  (rect_max :pointer))

(cffi:defcfun ("_wrap_GetTime" GetTime) :double)

(cffi:defcfun ("_wrap_GetFrameCount" GetFrameCount) :int)

(cffi:defcfun ("_wrap_GetBackgroundDrawList" GetBackgroundDrawList) :pointer)

(cffi:defcfun ("_wrap_GetForegroundDrawList__SWIG_0" GetForegroundDrawList) :pointer)

(cffi:defcfun ("_wrap_GetDrawListSharedData" GetDrawListSharedData) :pointer)

(cffi:defcfun ("_wrap_GetStyleColorName" GetStyleColorName) :string
  (idx :int))

(cffi:defcfun ("_wrap_SetStateStorage" SetStateStorage) :void
  (storage :pointer))

(cffi:defcfun ("_wrap_GetStateStorage" GetStateStorage) :pointer)

(cffi:defcfun ("_wrap_CalcListClipping" CalcListClipping) :void
  (items_count :int)
  (items_height :float)
  (out_items_display_start :pointer)
  (out_items_display_end :pointer))

(cffi:defcfun ("_wrap_BeginChildFrame__SWIG_0" BeginChildFrame) :pointer
  (id :unsigned-int)
  (size :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_BeginChildFrame__SWIG_1" BeginChildFrame) :pointer
  (id :unsigned-int)
  (size :pointer))

(cffi:defcfun ("_wrap_EndChildFrame" EndChildFrame) :void)

(cffi:defcfun ("_wrap_CalcTextSize__SWIG_0" CalcTextSize) ImVec2
  (text :string)
  (text_end :string)
  (hide_text_after_double_hash :pointer)
  (wrap_width :float))

(cffi:defcfun ("_wrap_CalcTextSize__SWIG_1" CalcTextSize) ImVec2
  (text :string)
  (text_end :string)
  (hide_text_after_double_hash :pointer))

(cffi:defcfun ("_wrap_CalcTextSize__SWIG_2" CalcTextSize) ImVec2
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_CalcTextSize__SWIG_3" CalcTextSize) ImVec2
  (text :string))

(cffi:defcfun ("_wrap_ColorConvertU32ToFloat4" ColorConvertU32ToFloat4) ImVec4
  (in :unsigned-int))

(cffi:defcfun ("_wrap_ColorConvertFloat4ToU32" ColorConvertFloat4ToU32) :unsigned-int
  (in :pointer))

(cffi:defcfun ("_wrap_ColorConvertRGBtoHSV" ColorConvertRGBtoHSV) :void
  (r :float)
  (g :float)
  (b :float)
  (out_h :pointer)
  (out_s :pointer)
  (out_v :pointer))

(cffi:defcfun ("_wrap_ColorConvertHSVtoRGB" ColorConvertHSVtoRGB) :void
  (h :float)
  (s :float)
  (v :float)
  (out_r :pointer)
  (out_g :pointer)
  (out_b :pointer))

(cffi:defcfun ("_wrap_GetKeyIndex" GetKeyIndex) :int
  (imgui_key :int))

(cffi:defcfun ("_wrap_IsKeyDown" IsKeyDown) :pointer
  (user_key_index :int))

(cffi:defcfun ("_wrap_IsKeyPressed__SWIG_0" IsKeyPressed) :pointer
  (user_key_index :int)
  (repeat :pointer))

(cffi:defcfun ("_wrap_IsKeyPressed__SWIG_1" IsKeyPressed) :pointer
  (user_key_index :int))

(cffi:defcfun ("_wrap_IsKeyReleased" IsKeyReleased) :pointer
  (user_key_index :int))

(cffi:defcfun ("_wrap_GetKeyPressedAmount" GetKeyPressedAmount) :int
  (key_index :int)
  (repeat_delay :float)
  (rate :float))

(cffi:defcfun ("_wrap_CaptureKeyboardFromApp__SWIG_0" CaptureKeyboardFromApp) :void
  (want_capture_keyboard_value :pointer))

(cffi:defcfun ("_wrap_CaptureKeyboardFromApp__SWIG_1" CaptureKeyboardFromApp) :void)

(cffi:defcfun ("_wrap_IsMouseDown" IsMouseDown) :pointer
  (button :int))

(cffi:defcfun ("_wrap_IsMouseClicked__SWIG_0" IsMouseClicked) :pointer
  (button :int)
  (repeat :pointer))

(cffi:defcfun ("_wrap_IsMouseClicked__SWIG_1" IsMouseClicked) :pointer
  (button :int))

(cffi:defcfun ("_wrap_IsMouseReleased" IsMouseReleased) :pointer
  (button :int))

(cffi:defcfun ("_wrap_IsMouseDoubleClicked" IsMouseDoubleClicked) :pointer
  (button :int))

(cffi:defcfun ("_wrap_IsMouseHoveringRect__SWIG_0" IsMouseHoveringRect) :pointer
  (r_min :pointer)
  (r_max :pointer)
  (clip :pointer))

(cffi:defcfun ("_wrap_IsMouseHoveringRect__SWIG_1" IsMouseHoveringRect) :pointer
  (r_min :pointer)
  (r_max :pointer))

(cffi:defcfun ("_wrap_IsMousePosValid__SWIG_0" IsMousePosValid) :pointer
  (mouse_pos :pointer))

(cffi:defcfun ("_wrap_IsMousePosValid__SWIG_1" IsMousePosValid) :pointer)

(cffi:defcfun ("_wrap_IsAnyMouseDown" IsAnyMouseDown) :pointer)

(cffi:defcfun ("_wrap_GetMousePos" GetMousePos) ImVec2)

(cffi:defcfun ("_wrap_GetMousePosOnOpeningCurrentPopup" GetMousePosOnOpeningCurrentPopup) ImVec2)

(cffi:defcfun ("_wrap_IsMouseDragging__SWIG_0" IsMouseDragging) :pointer
  (button :int)
  (lock_threshold :float))

(cffi:defcfun ("_wrap_IsMouseDragging__SWIG_1" IsMouseDragging) :pointer
  (button :int))

(cffi:defcfun ("_wrap_GetMouseDragDelta__SWIG_0" GetMouseDragDelta) ImVec2
  (button :int)
  (lock_threshold :float))

(cffi:defcfun ("_wrap_GetMouseDragDelta__SWIG_1" GetMouseDragDelta) ImVec2
  (button :int))

(cffi:defcfun ("_wrap_GetMouseDragDelta__SWIG_2" GetMouseDragDelta) ImVec2)

(cffi:defcfun ("_wrap_ResetMouseDragDelta__SWIG_0" ResetMouseDragDelta) :void
  (button :int))

(cffi:defcfun ("_wrap_ResetMouseDragDelta__SWIG_1" ResetMouseDragDelta) :void)

(cffi:defcfun ("_wrap_GetMouseCursor" GetMouseCursor) :int)

(cffi:defcfun ("_wrap_SetMouseCursor" SetMouseCursor) :void
  (cursor_type :int))

(cffi:defcfun ("_wrap_CaptureMouseFromApp__SWIG_0" CaptureMouseFromApp) :void
  (want_capture_mouse_value :pointer))

(cffi:defcfun ("_wrap_CaptureMouseFromApp__SWIG_1" CaptureMouseFromApp) :void)

(cffi:defcfun ("_wrap_GetClipboardText" GetClipboardText) :string)

(cffi:defcfun ("_wrap_SetClipboardText" SetClipboardText) :void
  (text :string))

(cffi:defcfun ("_wrap_LoadIniSettingsFromDisk" LoadIniSettingsFromDisk) :void
  (ini_filename :string))

(cffi:defcfun ("_wrap_LoadIniSettingsFromMemory__SWIG_0" LoadIniSettingsFromMemory) :void
  (ini_data :string)
  (ini_size :pointer))

(cffi:defcfun ("_wrap_LoadIniSettingsFromMemory__SWIG_1" LoadIniSettingsFromMemory) :void
  (ini_data :string))

(cffi:defcfun ("_wrap_SaveIniSettingsToDisk" SaveIniSettingsToDisk) :void
  (ini_filename :string))

(cffi:defcfun ("_wrap_SaveIniSettingsToMemory__SWIG_0" SaveIniSettingsToMemory) :string
  (out_ini_size :pointer))

(cffi:defcfun ("_wrap_SaveIniSettingsToMemory__SWIG_1" SaveIniSettingsToMemory) :string)

(cffi:defcfun ("_wrap_DebugCheckVersionAndDataLayout" DebugCheckVersionAndDataLayout) :pointer
  (version_str :string)
  (sz_io :pointer)
  (sz_style :pointer)
  (sz_vec2 :pointer)
  (sz_vec4 :pointer)
  (sz_drawvert :pointer)
  (sz_drawidx :pointer))

(cffi:defcfun ("_wrap_SetAllocatorFunctions__SWIG_0" SetAllocatorFunctions) :void
  (alloc_func :pointer)
  (free_func :pointer)
  (user_data :pointer))

(cffi:defcfun ("_wrap_SetAllocatorFunctions__SWIG_1" SetAllocatorFunctions) :void
  (alloc_func :pointer)
  (free_func :pointer))

(cffi:defcfun ("_wrap_MemAlloc" MemAlloc) :pointer
  (size :pointer))

(cffi:defcfun ("_wrap_MemFree" MemFree) :void
  (ptr :pointer))

(cffi:defcenum WindowFlags_
	(:None #.0)
	(:NoTitleBar #.(cl:ash 1 0))
	(:NoResize #.(cl:ash 1 1))
	(:NoMove #.(cl:ash 1 2))
	(:NoScrollbar #.(cl:ash 1 3))
	(:NoScrollWithMouse #.(cl:ash 1 4))
	(:NoCollapse #.(cl:ash 1 5))
	(:AlwaysAutoResize #.(cl:ash 1 6))
	(:NoBackground #.(cl:ash 1 7))
	(:NoSavedSettings #.(cl:ash 1 8))
	(:NoMouseInputs #.(cl:ash 1 9))
	(:MenuBar #.(cl:ash 1 10))
	(:HorizontalScrollbar #.(cl:ash 1 11))
	(:NoFocusOnAppearing #.(cl:ash 1 12))
	(:NoBringToFrontOnFocus #.(cl:ash 1 13))
	(:AlwaysVerticalScrollbar #.(cl:ash 1 14))
	(:AlwaysHorizontalScrollbar #.(cl:ash 1 15))
	(:AlwaysUseWindowPadding #.(cl:ash 1 16))
	(:NoNavInputs #.(cl:ash 1 18))
	(:NoNavFocus #.(cl:ash 1 19))
	(:UnsavedDocument #.(cl:ash 1 20))
	(:NoNav #.(cl:logior (cl:ash 1 18) (cl:ash 1 19)))
	(:NoDecoration #.(cl:logior (cl:ash 1 0) (cl:ash 1 1) (cl:ash 1 3) (cl:ash 1 5)))
	(:NoInputs #.(cl:logior (cl:ash 1 9) (cl:ash 1 18) (cl:ash 1 19)))
	(:NavFlattened #.(cl:ash 1 23))
	(:ChildWindow #.(cl:ash 1 24))
	(:Tooltip #.(cl:ash 1 25))
	(:Popup #.(cl:ash 1 26))
	(:Modal #.(cl:ash 1 27))
	(:ChildMenu #.(cl:ash 1 28)))

(cffi:defcenum InputTextFlags_
	(:None #.0)
	(:CharsDecimal #.(cl:ash 1 0))
	(:CharsHexadecimal #.(cl:ash 1 1))
	(:CharsUppercase #.(cl:ash 1 2))
	(:CharsNoBlank #.(cl:ash 1 3))
	(:AutoSelectAll #.(cl:ash 1 4))
	(:EnterReturnsTrue #.(cl:ash 1 5))
	(:CallbackCompletion #.(cl:ash 1 6))
	(:CallbackHistory #.(cl:ash 1 7))
	(:CallbackAlways #.(cl:ash 1 8))
	(:CallbackCharFilter #.(cl:ash 1 9))
	(:AllowTabInput #.(cl:ash 1 10))
	(:CtrlEnterForNewLine #.(cl:ash 1 11))
	(:NoHorizontalScroll #.(cl:ash 1 12))
	(:AlwaysInsertMode #.(cl:ash 1 13))
	(:ReadOnly #.(cl:ash 1 14))
	(:Password #.(cl:ash 1 15))
	(:NoUndoRedo #.(cl:ash 1 16))
	(:CharsScientific #.(cl:ash 1 17))
	(:CallbackResize #.(cl:ash 1 18))
	(:Multiline #.(cl:ash 1 20))
	(:NoMarkEdited #.(cl:ash 1 21)))

(cffi:defcenum TreeNodeFlags_
	(:None #.0)
	(:Selected #.(cl:ash 1 0))
	(:Framed #.(cl:ash 1 1))
	(:AllowItemOverlap #.(cl:ash 1 2))
	(:NoTreePushOnOpen #.(cl:ash 1 3))
	(:NoAutoOpenOnLog #.(cl:ash 1 4))
	(:DefaultOpen #.(cl:ash 1 5))
	(:OpenOnDoubleClick #.(cl:ash 1 6))
	(:OpenOnArrow #.(cl:ash 1 7))
	(:Leaf #.(cl:ash 1 8))
	(:Bullet #.(cl:ash 1 9))
	(:FramePadding #.(cl:ash 1 10))
	(:SpanAvailWidth #.(cl:ash 1 11))
	(:SpanFullWidth #.(cl:ash 1 12))
	(:NavLeftJumpsBackHere #.(cl:ash 1 13))
	(:CollapsingHeader #.(cl:logior (cl:ash 1 1) (cl:ash 1 3) (cl:ash 1 4))))

(cffi:defcenum PopupFlags_
	(:None #.0)
	(:MouseButtonLeft #.0)
	(:MouseButtonRight #.1)
	(:MouseButtonMiddle #.2)
	(:MouseButtonMask_ #.#x1F)
	(:MouseButtonDefault_ #.1)
	(:NoOpenOverExistingPopup #.(cl:ash 1 5))
	(:NoOpenOverItems #.(cl:ash 1 6))
	(:AnyPopupId #.(cl:ash 1 7))
	(:AnyPopupLevel #.(cl:ash 1 8))
	(:AnyPopup #.(cl:logior (cl:ash 1 7) (cl:ash 1 8))))

(cffi:defcenum SelectableFlags_
	(:None #.0)
	(:DontClosePopups #.(cl:ash 1 0))
	(:SpanAllColumns #.(cl:ash 1 1))
	(:AllowDoubleClick #.(cl:ash 1 2))
	(:Disabled #.(cl:ash 1 3))
	(:AllowItemOverlap #.(cl:ash 1 4)))

(cffi:defcenum ComboFlags_
	(:None #.0)
	(:PopupAlignLeft #.(cl:ash 1 0))
	(:HeightSmall #.(cl:ash 1 1))
	(:HeightRegular #.(cl:ash 1 2))
	(:HeightLarge #.(cl:ash 1 3))
	(:HeightLargest #.(cl:ash 1 4))
	(:NoArrowButton #.(cl:ash 1 5))
	(:NoPreview #.(cl:ash 1 6))
	(:HeightMask_ #.(cl:logior (cl:ash 1 1) (cl:ash 1 2) (cl:ash 1 3) (cl:ash 1 4))))

(cffi:defcenum TabBarFlags_
	(:None #.0)
	(:Reorderable #.(cl:ash 1 0))
	(:AutoSelectNewTabs #.(cl:ash 1 1))
	(:TabListPopupButton #.(cl:ash 1 2))
	(:NoCloseWithMiddleMouseButton #.(cl:ash 1 3))
	(:NoTabListScrollingButtons #.(cl:ash 1 4))
	(:NoTooltip #.(cl:ash 1 5))
	(:FittingPolicyResizeDown #.(cl:ash 1 6))
	(:FittingPolicyScroll #.(cl:ash 1 7))
	(:FittingPolicyMask_ #.(cl:logior (cl:ash 1 6) (cl:ash 1 7)))
	(:FittingPolicyDefault_ #.(cl:ash 1 6)))

(cffi:defcenum TabItemFlags_
	(:None #.0)
	(:UnsavedDocument #.(cl:ash 1 0))
	(:SetSelected #.(cl:ash 1 1))
	(:NoCloseWithMiddleMouseButton #.(cl:ash 1 2))
	(:NoPushId #.(cl:ash 1 3))
	(:NoTooltip #.(cl:ash 1 4)))

(cffi:defcenum FocusedFlags_
	(:None #.0)
	(:ChildWindows #.(cl:ash 1 0))
	(:RootWindow #.(cl:ash 1 1))
	(:AnyWindow #.(cl:ash 1 2))
	(:RootAndChildWindows #.(cl:logior (cl:ash 1 1) (cl:ash 1 0))))

(cffi:defcenum HoveredFlags_
	(:None #.0)
	(:ChildWindows #.(cl:ash 1 0))
	(:RootWindow #.(cl:ash 1 1))
	(:AnyWindow #.(cl:ash 1 2))
	(:AllowWhenBlockedByPopup #.(cl:ash 1 3))
	(:AllowWhenBlockedByActiveItem #.(cl:ash 1 5))
	(:AllowWhenOverlapped #.(cl:ash 1 6))
	(:AllowWhenDisabled #.(cl:ash 1 7))
	(:RectOnly #.(cl:logior (cl:ash 1 3) (cl:ash 1 5) (cl:ash 1 6)))
	(:RootAndChildWindows #.(cl:logior (cl:ash 1 1) (cl:ash 1 0))))

(cffi:defcenum DragDropFlags_
	(:None #.0)
	(:SourceNoPreviewTooltip #.(cl:ash 1 0))
	(:SourceNoDisableHover #.(cl:ash 1 1))
	(:SourceNoHoldToOpenOthers #.(cl:ash 1 2))
	(:SourceAllowNullID #.(cl:ash 1 3))
	(:SourceExtern #.(cl:ash 1 4))
	(:SourceAutoExpirePayload #.(cl:ash 1 5))
	(:AcceptBeforeDelivery #.(cl:ash 1 10))
	(:AcceptNoDrawDefaultRect #.(cl:ash 1 11))
	(:AcceptNoPreviewTooltip #.(cl:ash 1 12))
	(:AcceptPeekOnly #.(cl:logior (cl:ash 1 10) (cl:ash 1 11))))

(cl:defconstant IMGUI_PAYLOAD_TYPE_COLOR_3F "_COL3F")

(cl:defconstant IMGUI_PAYLOAD_TYPE_COLOR_4F "_COL4F")

(cffi:defcenum DataType_
	:S8
	:U8
	:S16
	:U16
	:S32
	:U32
	:S64
	:U64
	:Float
	:Double
	:COUNT)

(cffi:defcenum Dir_
	(:None #.-1)
	(:Left #.0)
	(:Right #.1)
	(:Up #.2)
	(:Down #.3)
	:COUNT)

(cffi:defcenum Key_
	:Tab
	:LeftArrow
	:RightArrow
	:UpArrow
	:DownArrow
	:PageUp
	:PageDown
	:Home
	:End
	:Insert
	:Delete
	:Backspace
	:Space
	:Enter
	:Escape
	:KeyPadEnter
	:A
	:C
	:V
	:X
	:Y
	:Z
	:COUNT)

(cffi:defcenum KeyModFlags_
	(:None #.0)
	(:Ctrl #.(cl:ash 1 0))
	(:Shift #.(cl:ash 1 1))
	(:Alt #.(cl:ash 1 2))
	(:Super #.(cl:ash 1 3)))

(cffi:defcenum NavInput_
	:Activate
	:Cancel
	:Input
	:Menu
	:DpadLeft
	:DpadRight
	:DpadUp
	:DpadDown
	:LStickLeft
	:LStickRight
	:LStickUp
	:LStickDown
	:FocusPrev
	:FocusNext
	:TweakSlow
	:TweakFast
	:KeyMenu_
	:KeyLeft_
	:KeyRight_
	:KeyUp_
	:KeyDown_
	:COUNT
	(:InternalStart_ #.16))

(cffi:defcenum ConfigFlags_
	(:None #.0)
	(:NavEnableKeyboard #.(cl:ash 1 0))
	(:NavEnableGamepad #.(cl:ash 1 1))
	(:NavEnableSetMousePos #.(cl:ash 1 2))
	(:NavNoCaptureKeyboard #.(cl:ash 1 3))
	(:NoMouse #.(cl:ash 1 4))
	(:NoMouseCursorChange #.(cl:ash 1 5))
	(:IsSRGB #.(cl:ash 1 20))
	(:IsTouchScreen #.(cl:ash 1 21)))

(cffi:defcenum BackendFlags_
	(:None #.0)
	(:HasGamepad #.(cl:ash 1 0))
	(:HasMouseCursors #.(cl:ash 1 1))
	(:HasSetMousePos #.(cl:ash 1 2))
	(:RendererHasVtxOffset #.(cl:ash 1 3)))

(cffi:defcenum Col_
	:Text
	:TextDisabled
	:WindowBg
	:ChildBg
	:PopupBg
	:Border
	:BorderShadow
	:FrameBg
	:FrameBgHovered
	:FrameBgActive
	:TitleBg
	:TitleBgActive
	:TitleBgCollapsed
	:MenuBarBg
	:ScrollbarBg
	:ScrollbarGrab
	:ScrollbarGrabHovered
	:ScrollbarGrabActive
	:CheckMark
	:SliderGrab
	:SliderGrabActive
	:Button
	:ButtonHovered
	:ButtonActive
	:Header
	:HeaderHovered
	:HeaderActive
	:Separator
	:SeparatorHovered
	:SeparatorActive
	:ResizeGrip
	:ResizeGripHovered
	:ResizeGripActive
	:Tab
	:TabHovered
	:TabActive
	:TabUnfocused
	:TabUnfocusedActive
	:PlotLines
	:PlotLinesHovered
	:PlotHistogram
	:PlotHistogramHovered
	:TextSelectedBg
	:DragDropTarget
	:NavHighlight
	:NavWindowingHighlight
	:NavWindowingDimBg
	:ModalWindowDimBg
	:COUNT
	(:ModalWindowDarkening #.47))

(cffi:defcenum StyleVar_
	:Alpha
	:WindowPadding
	:WindowRounding
	:WindowBorderSize
	:WindowMinSize
	:WindowTitleAlign
	:ChildRounding
	:ChildBorderSize
	:PopupRounding
	:PopupBorderSize
	:FramePadding
	:FrameRounding
	:FrameBorderSize
	:ItemSpacing
	:ItemInnerSpacing
	:IndentSpacing
	:ScrollbarSize
	:ScrollbarRounding
	:GrabMinSize
	:GrabRounding
	:TabRounding
	:ButtonTextAlign
	:SelectableTextAlign
	:COUNT
	(:Count_ #.23))

(cffi:defcenum ButtonFlags_
	(:None #.0)
	(:MouseButtonLeft #.(cl:ash 1 0))
	(:MouseButtonRight #.(cl:ash 1 1))
	(:MouseButtonMiddle #.(cl:ash 1 2))
	(:MouseButtonMask_ #.(cl:logior (cl:ash 1 0) (cl:ash 1 1) (cl:ash 1 2)))
	(:MouseButtonDefault_ #.(cl:ash 1 0)))

(cffi:defcenum ColorEditFlags_
	(:None #.0)
	(:NoAlpha #.(cl:ash 1 1))
	(:NoPicker #.(cl:ash 1 2))
	(:NoOptions #.(cl:ash 1 3))
	(:NoSmallPreview #.(cl:ash 1 4))
	(:NoInputs #.(cl:ash 1 5))
	(:NoTooltip #.(cl:ash 1 6))
	(:NoLabel #.(cl:ash 1 7))
	(:NoSidePreview #.(cl:ash 1 8))
	(:NoDragDrop #.(cl:ash 1 9))
	(:NoBorder #.(cl:ash 1 10))
	(:AlphaBar #.(cl:ash 1 16))
	(:AlphaPreview #.(cl:ash 1 17))
	(:AlphaPreviewHalf #.(cl:ash 1 18))
	(:HDR #.(cl:ash 1 19))
	(:DisplayRGB #.(cl:ash 1 20))
	(:DisplayHSV #.(cl:ash 1 21))
	(:DisplayHex #.(cl:ash 1 22))
	(:Uint8 #.(cl:ash 1 23))
	(:Float #.(cl:ash 1 24))
	(:PickerHueBar #.(cl:ash 1 25))
	(:PickerHueWheel #.(cl:ash 1 26))
	(:InputRGB #.(cl:ash 1 27))
	(:InputHSV #.(cl:ash 1 28))
	(:_OptionsDefault #.(cl:logior (cl:ash 1 23) (cl:ash 1 20) (cl:ash 1 27) (cl:ash 1 25)))
	(:_DisplayMask #.(cl:logior (cl:ash 1 20) (cl:ash 1 21) (cl:ash 1 22)))
	(:_DataTypeMask #.(cl:logior (cl:ash 1 23) (cl:ash 1 24)))
	(:_PickerMask #.(cl:logior (cl:ash 1 26) (cl:ash 1 25)))
	(:_InputMask #.(cl:logior (cl:ash 1 27) (cl:ash 1 28)))
	(:RGB #.(cl:ash 1 20))
	(:HSV #.(cl:ash 1 21))
	(:HEX #.(cl:ash 1 22)))

(cffi:defcenum SliderFlags_
	(:None #.0)
	(:ClampOnInput #.(cl:ash 1 4))
	(:Logarithmic #.(cl:ash 1 5))
	(:NoRoundToFormat #.(cl:ash 1 6))
	(:NoInput #.(cl:ash 1 7))
	(:InvalidMask_ #.#x7000000F))

(cffi:defcenum MouseButton_
	(:Left #.0)
	(:Right #.1)
	(:Middle #.2)
	(:COUNT #.5))

(cffi:defcenum MouseCursor_
	(:None #.-1)
	(:Arrow #.0)
	:TextInput
	:ResizeAll
	:ResizeNS
	:ResizeEW
	:ResizeNESW
	:ResizeNWSE
	:Hand
	:NotAllowed
	:COUNT
	(:Count_ #.9))

(cffi:defcenum Cond_
	(:None #.0)
	(:Always #.(cl:ash 1 0))
	(:Once #.(cl:ash 1 1))
	(:FirstUseEver #.(cl:ash 1 2))
	(:Appearing #.(cl:ash 1 3)))

(cffi:defcstruct ImNewWrapper)

(cffi:defcstruct Style
	(Alpha :float)
	(WindowPadding ImVec2)
	(WindowRounding :float)
	(WindowBorderSize :float)
	(WindowMinSize ImVec2)
	(WindowTitleAlign ImVec2)
	(WindowMenuButtonPosition :int)
	(ChildRounding :float)
	(ChildBorderSize :float)
	(PopupRounding :float)
	(PopupBorderSize :float)
	(FramePadding ImVec2)
	(FrameRounding :float)
	(FrameBorderSize :float)
	(ItemSpacing ImVec2)
	(ItemInnerSpacing ImVec2)
	(TouchExtraPadding ImVec2)
	(IndentSpacing :float)
	(ColumnsMinSpacing :float)
	(ScrollbarSize :float)
	(ScrollbarRounding :float)
	(GrabMinSize :float)
	(GrabRounding :float)
	(LogSliderDeadzone :float)
	(TabRounding :float)
	(TabBorderSize :float)
	(TabMinWidthForUnselectedCloseButton :float)
	(ColorButtonPosition :int)
	(ButtonTextAlign ImVec2)
	(SelectableTextAlign ImVec2)
	(DisplayWindowPadding ImVec2)
	(DisplaySafeAreaPadding ImVec2)
	(MouseCursorScale :float)
	(AntiAliasedLines :pointer)
	(AntiAliasedLinesUseTex :pointer)
	(AntiAliasedFill :pointer)
	(CurveTessellationTol :float)
	(CircleSegmentMaxError :float)
	(Colors :pointer :count #.(cffi:foreign-enum-value 'Col_ :COUNT))
	(ScaleAllSizes :pointer))

(cffi:defcstruct IO
	(ConfigFlags :int)
	(BackendFlags :int)
	(DisplaySize ImVec2)
	(DeltaTime :float)
	(IniSavingRate :float)
	(IniFilename :string)
	(LogFilename :string)
	(MouseDoubleClickTime :float)
	(MouseDoubleClickMaxDist :float)
	(MouseDragThreshold :float)
	(KeyMap :pointer :count #.(cffi:foreign-enum-value 'Key_ :COUNT))
	(KeyRepeatDelay :float)
	(KeyRepeatRate :float)
	(UserData :pointer)
	(Fonts :pointer)
	(FontGlobalScale :float)
	(FontAllowUserScaling :pointer)
	(FontDefault :pointer)
	(DisplayFramebufferScale ImVec2)
	(MouseDrawCursor :pointer)
	(ConfigMacOSXBehaviors :pointer)
	(ConfigInputTextCursorBlink :pointer)
	(ConfigWindowsResizeFromEdges :pointer)
	(ConfigWindowsMoveFromTitleBarOnly :pointer)
	(ConfigWindowsMemoryCompactTimer :float)
	(BackendPlatformName :string)
	(BackendRendererName :string)
	(BackendPlatformUserData :pointer)
	(BackendRendererUserData :pointer)
	(BackendLanguageUserData :pointer)
	(GetClipboardTextFn :pointer)
	(SetClipboardTextFn :pointer)
	(ClipboardUserData :pointer)
	(ImeSetInputScreenPosFn :pointer)
	(ImeWindowHandle :pointer)
	(RenderDrawListsFn :pointer)
	(MousePos ImVec2)
	(MouseDown :pointer :count 5)
	(MouseWheel :float)
	(MouseWheelH :float)
	(KeyCtrl :pointer)
	(KeyShift :pointer)
	(KeyAlt :pointer)
	(KeySuper :pointer)
	(KeysDown :pointer :count 512)
	(NavInputs :pointer :count #.(cffi:foreign-enum-value 'NavInput_ :COUNT))
	(AddInputCharacter :pointer)
	(AddInputCharacterUTF16 :pointer)
	(AddInputCharactersUTF8 :pointer)
	(ClearInputCharacters :pointer)
	(WantCaptureMouse :pointer)
	(WantCaptureKeyboard :pointer)
	(WantTextInput :pointer)
	(WantSetMousePos :pointer)
	(WantSaveIniSettings :pointer)
	(NavActive :pointer)
	(NavVisible :pointer)
	(Framerate :float)
	(MetricsRenderVertices :int)
	(MetricsRenderIndices :int)
	(MetricsRenderWindows :int)
	(MetricsActiveWindows :int)
	(MetricsActiveAllocations :int)
	(MouseDelta ImVec2)
	(KeyMods :int)
	(MousePosPrev ImVec2)
	(MouseClickedPos :pointer :count 5)
	(MouseClickedTime :pointer :count 5)
	(MouseClicked :pointer :count 5)
	(MouseDoubleClicked :pointer :count 5)
	(MouseReleased :pointer :count 5)
	(MouseDownOwned :pointer :count 5)
	(MouseDownWasDoubleClick :pointer :count 5)
	(MouseDownDuration :pointer :count 5)
	(MouseDownDurationPrev :pointer :count 5)
	(MouseDragMaxDistanceAbs :pointer :count 5)
	(MouseDragMaxDistanceSqr :pointer :count 5)
	(KeysDownDuration :pointer :count 512)
	(KeysDownDurationPrev :pointer :count 512)
	(NavInputsDownDuration :pointer :count #.(cffi:foreign-enum-value 'NavInput_ :COUNT))
	(NavInputsDownDurationPrev :pointer :count #.(cffi:foreign-enum-value 'NavInput_ :COUNT))
	(PenPressure :float)
	(InputQueueSurrogate :unsigned-short)
	(InputQueueCharacters :pointer))

(cffi:defcstruct InputTextCallbackData
	(EventFlag :int)
	(Flags :int)
	(UserData :pointer)
	(EventChar :unsigned-short)
	(EventKey :int)
	(Buf :string)
	(BufTextLen :int)
	(BufSize :int)
	(BufDirty :pointer)
	(CursorPos :int)
	(SelectionStart :int)
	(SelectionEnd :int)
	(DeleteChars :pointer)
	(InsertChars :pointer)
	(InsertChars :pointer)
	(HasSelection :pointer))

(cffi:defcstruct SizeCallbackData
	(UserData :pointer)
	(Pos ImVec2)
	(CurrentSize ImVec2)
	(DesiredSize ImVec2))

(cffi:defcstruct Payload
	(Data :pointer)
	(DataSize :int)
	(SourceId :unsigned-int)
	(SourceParentId :unsigned-int)
	(DataFrameCount :int)
	(DataType :pointer :count #.(1+ 32))
	(Preview :pointer)
	(Delivery :pointer)
	(Clear :pointer)
	(IsDataType :pointer)
	(IsPreview :pointer)
	(IsDelivery :pointer))

(cffi:defcfun ("_wrap_DragScalar__SWIG_5" DragScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_DragScalarN__SWIG_5" DragScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_DragFloat__SWIG_6" DragFloat) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_DragFloat2__SWIG_6" DragFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_DragFloat3__SWIG_6" DragFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_DragFloat4__SWIG_6" DragFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_speed :float)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderScalar__SWIG_3" SliderScalar) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderScalarN__SWIG_3" SliderScalarN) :pointer
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (components :int)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderFloat__SWIG_3" SliderFloat) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderFloat2__SWIG_3" SliderFloat2) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderFloat3__SWIG_3" SliderFloat3) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_SliderFloat4__SWIG_3" SliderFloat4) :pointer
  (label :string)
  (v :pointer)
  (v_min :float)
  (v_max :float)
  (format :string)
  (power :float))

(cffi:defcfun ("_wrap_OpenPopupOnItemClick__SWIG_0" OpenPopupOnItemClick) :pointer
  (str_id :string)
  (mb :int))

(cffi:defcfun ("_wrap_OpenPopupOnItemClick__SWIG_1" OpenPopupOnItemClick) :pointer
  (str_id :string))

(cffi:defcfun ("_wrap_OpenPopupOnItemClick__SWIG_2" OpenPopupOnItemClick) :pointer)

(cffi:defcfun ("_wrap_BeginPopupContextWindow__SWIG_3" BeginPopupContextWindow) :pointer
  (str_id :string)
  (mb :int)
  (over_items :pointer))

(cffi:defcfun ("_wrap_TreeAdvanceToLabelPos" TreeAdvanceToLabelPos) :void)

(cffi:defcfun ("_wrap_SetNextTreeNodeOpen__SWIG_0" SetNextTreeNodeOpen) :void
  (open :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetNextTreeNodeOpen__SWIG_1" SetNextTreeNodeOpen) :void
  (open :pointer))

(cffi:defcfun ("_wrap_GetContentRegionAvailWidth" GetContentRegionAvailWidth) :float)

(cffi:defcfun ("_wrap_GetOverlayDrawList" GetOverlayDrawList) :pointer)

(cffi:defcfun ("_wrap_SetScrollHere__SWIG_0" SetScrollHere) :void
  (center_ratio :float))

(cffi:defcfun ("_wrap_SetScrollHere__SWIG_1" SetScrollHere) :void)

(cffi:defcfun ("_wrap_IsItemDeactivatedAfterChange" IsItemDeactivatedAfterChange) :pointer)

(cffi:defcfun ("_wrap_InputFloat__SWIG_5" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float)
  (step_fast :float)
  (decimal_precision :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat__SWIG_6" InputFloat) :pointer
  (label :string)
  (v :pointer)
  (step :float)
  (step_fast :float)
  (decimal_precision :int))

(cffi:defcfun ("_wrap_InputFloat2__SWIG_3" InputFloat2) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat2__SWIG_4" InputFloat2) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int))

(cffi:defcfun ("_wrap_InputFloat3__SWIG_3" InputFloat3) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat3__SWIG_4" InputFloat3) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int))

(cffi:defcfun ("_wrap_InputFloat4__SWIG_3" InputFloat4) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int)
  (flags :int))

(cffi:defcfun ("_wrap_InputFloat4__SWIG_4" InputFloat4) :pointer
  (label :string)
  (v :pointer)
  (decimal_precision :int))

(cffi:defcfun ("_wrap_IsAnyWindowFocused" IsAnyWindowFocused) :pointer)

(cffi:defcfun ("_wrap_IsAnyWindowHovered" IsAnyWindowHovered) :pointer)

(cffi:defctype TextEditCallback :pointer)

(cffi:defctype TextEditCallbackData InputTextCallbackData)

(cl:defconstant IM_UNICODE_CODEPOINT_INVALID #xFFFD)

(cl:defconstant IM_UNICODE_CODEPOINT_MAX #xFFFF)

(cffi:defcstruct OnceUponAFrame
	(RefFrame :int))

(cffi:defcstruct TextFilter
	(Draw :pointer)
	(Draw :pointer)
	(Draw :pointer)
	(PassFilter :pointer)
	(PassFilter :pointer)
	(Build :pointer)
	(Clear :pointer)
	(IsActive :pointer)
	(InputBuf :pointer :count 256)
	(Filters :pointer)
	(CountGrep :int))

(cffi:defcstruct TextRange
	(b :string)
	(e :string)
	(empty :pointer)
	(split :pointer))

(cffi:defcstruct TextBuffer
	(Buf :pointer)
	(EmptyString :pointer :count 1)
	(__aref__ :pointer)
	(begin :pointer)
	(end :pointer)
	(size :pointer)
	(empty :pointer)
	(clear :pointer)
	(reserve :pointer)
	(c_str :pointer)
	(append :pointer)
	(append :pointer)
	(appendf :pointer)
	(appendfv :pointer))

(cffi:defcstruct Storage
	(Data :pointer)
	(Clear :pointer)
	(GetInt :pointer)
	(GetInt :pointer)
	(SetInt :pointer)
	(GetBool :pointer)
	(GetBool :pointer)
	(SetBool :pointer)
	(GetFloat :pointer)
	(GetFloat :pointer)
	(SetFloat :pointer)
	(GetVoidPtr :pointer)
	(SetVoidPtr :pointer)
	(GetIntRef :pointer)
	(GetIntRef :pointer)
	(GetBoolRef :pointer)
	(GetBoolRef :pointer)
	(GetFloatRef :pointer)
	(GetFloatRef :pointer)
	(GetVoidPtrRef :pointer)
	(GetVoidPtrRef :pointer)
	(SetAllInt :pointer)
	(BuildSortByKey :pointer))

(cffi:defcstruct StoragePair
	(key :unsigned-int)
	(val_i :int)
	(val_f :float)
	(val_p :pointer))

(cffi:defcstruct ListClipper
	(DisplayStart :int)
	(DisplayEnd :int)
	(ItemsCount :int)
	(StepNo :int)
	(ItemsHeight :float)
	(StartPosY :float)
	(Step :pointer)
	(Begin :pointer)
	(Begin :pointer)
	(End :pointer))

(cl:defconstant IM_COL32_R_SHIFT 0)

(cl:defconstant IM_COL32_G_SHIFT 8)

(cl:defconstant IM_COL32_B_SHIFT 16)

(cl:defconstant IM_COL32_A_SHIFT 24)

(cl:defconstant IM_COL32_A_MASK #xFF000000)

(cffi:defcstruct ImColor
	(Value ImVec4))

(cl:defconstant IM_DRAWLIST_TEX_LINES_WIDTH_MAX 63)

(cffi:defctype ImDrawCallback :pointer)

(cffi:defcstruct ImDrawCmd
	(ClipRect ImVec4)
	(TextureId :pointer)
	(VtxOffset :unsigned-int)
	(IdxOffset :unsigned-int)
	(ElemCount :unsigned-int)
	(UserCallback :pointer)
	(UserCallbackData :pointer))

(cffi:defctype ImDrawIdx :unsigned-short)

(cffi:defcstruct ImDrawVert
	(pos ImVec2)
	(uv ImVec2)
	(col :unsigned-int))

(cffi:defcstruct ImDrawChannel
	(_CmdBuffer :pointer)
	(_IdxBuffer :pointer))

(cffi:defcstruct ImDrawListSplitter
	(_Current :int)
	(_Count :int)
	(_Channels :pointer)
	(Clear :pointer)
	(ClearFreeMemory :pointer)
	(Split :pointer)
	(Merge :pointer)
	(SetCurrentChannel :pointer))

(cffi:defcenum ImDrawCornerFlags_
	(:None #.0)
	(:TopLeft #.(cl:ash 1 0))
	(:TopRight #.(cl:ash 1 1))
	(:BotLeft #.(cl:ash 1 2))
	(:BotRight #.(cl:ash 1 3))
	(:Top #.(cl:logior (cl:ash 1 0) (cl:ash 1 1)))
	(:Bot #.(cl:logior (cl:ash 1 2) (cl:ash 1 3)))
	(:Left #.(cl:logior (cl:ash 1 0) (cl:ash 1 2)))
	(:Right #.(cl:logior (cl:ash 1 1) (cl:ash 1 3)))
	(:All #.#xF))

(cffi:defcenum ImDrawListFlags_
	(:None #.0)
	(:AntiAliasedLines #.(cl:ash 1 0))
	(:AntiAliasedLinesUseTex #.(cl:ash 1 1))
	(:AntiAliasedFill #.(cl:ash 1 2))
	(:AllowVtxOffset #.(cl:ash 1 3)))

(cffi:defcstruct ImDrawList
	(CmdBuffer :pointer)
	(IdxBuffer :pointer)
	(VtxBuffer :pointer)
	(Flags :int)
	(_Data :pointer)
	(_OwnerName :string)
	(_VtxCurrentIdx :unsigned-int)
	(_VtxWritePtr :pointer)
	(_IdxWritePtr :pointer)
	(_ClipRectStack :pointer)
	(_TextureIdStack :pointer)
	(_Path :pointer)
	(_CmdHeader ImDrawCmd)
	(_Splitter ImDrawListSplitter)
	(PushClipRect :pointer)
	(PushClipRect :pointer)
	(PushClipRectFullScreen :pointer)
	(PopClipRect :pointer)
	(PushTextureID :pointer)
	(PopTextureID :pointer)
	(GetClipRectMin :pointer)
	(GetClipRectMax :pointer)
	(AddLine :pointer)
	(AddLine :pointer)
	(AddRect :pointer)
	(AddRect :pointer)
	(AddRect :pointer)
	(AddRect :pointer)
	(AddRectFilled :pointer)
	(AddRectFilled :pointer)
	(AddRectFilled :pointer)
	(AddRectFilledMultiColor :pointer)
	(AddQuad :pointer)
	(AddQuad :pointer)
	(AddQuadFilled :pointer)
	(AddTriangle :pointer)
	(AddTriangle :pointer)
	(AddTriangleFilled :pointer)
	(AddCircle :pointer)
	(AddCircle :pointer)
	(AddCircle :pointer)
	(AddCircleFilled :pointer)
	(AddCircleFilled :pointer)
	(AddNgon :pointer)
	(AddNgon :pointer)
	(AddNgonFilled :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddPolyline :pointer)
	(AddConvexPolyFilled :pointer)
	(AddBezierCurve :pointer)
	(AddBezierCurve :pointer)
	(AddImage :pointer)
	(AddImage :pointer)
	(AddImage :pointer)
	(AddImage :pointer)
	(AddImageQuad :pointer)
	(AddImageQuad :pointer)
	(AddImageQuad :pointer)
	(AddImageQuad :pointer)
	(AddImageQuad :pointer)
	(AddImageQuad :pointer)
	(AddImageRounded :pointer)
	(AddImageRounded :pointer)
	(PathClear :pointer)
	(PathLineTo :pointer)
	(PathLineToMergeDuplicate :pointer)
	(PathFillConvex :pointer)
	(PathStroke :pointer)
	(PathStroke :pointer)
	(PathArcTo :pointer)
	(PathArcTo :pointer)
	(PathArcToFast :pointer)
	(PathBezierCurveTo :pointer)
	(PathBezierCurveTo :pointer)
	(PathRect :pointer)
	(PathRect :pointer)
	(PathRect :pointer)
	(AddCallback :pointer)
	(AddDrawCmd :pointer)
	(CloneOutput :pointer)
	(ChannelsSplit :pointer)
	(ChannelsMerge :pointer)
	(ChannelsSetCurrent :pointer)
	(PrimReserve :pointer)
	(PrimUnreserve :pointer)
	(PrimRect :pointer)
	(PrimRectUV :pointer)
	(PrimQuadUV :pointer)
	(PrimWriteVtx :pointer)
	(PrimWriteIdx :pointer)
	(PrimVtx :pointer)
	(_ResetForNewFrame :pointer)
	(_ClearFreeMemory :pointer)
	(_PopUnusedDrawCmd :pointer)
	(_OnChangedClipRect :pointer)
	(_OnChangedTextureID :pointer)
	(_OnChangedVtxOffset :pointer))

(cffi:defcstruct ImDrawData
	(Valid :pointer)
	(CmdLists :pointer)
	(CmdListsCount :int)
	(TotalIdxCount :int)
	(TotalVtxCount :int)
	(DisplayPos ImVec2)
	(DisplaySize ImVec2)
	(FramebufferScale ImVec2)
	(Clear :pointer)
	(DeIndexAllBuffers :pointer)
	(ScaleClipRects :pointer))

(cffi:defcstruct ImFontConfig
	(FontData :pointer)
	(FontDataSize :int)
	(FontDataOwnedByAtlas :pointer)
	(FontNo :int)
	(SizePixels :float)
	(OversampleH :int)
	(OversampleV :int)
	(PixelSnapH :pointer)
	(GlyphExtraSpacing ImVec2)
	(GlyphOffset ImVec2)
	(GlyphRanges :pointer)
	(GlyphMinAdvanceX :float)
	(GlyphMaxAdvanceX :float)
	(MergeMode :pointer)
	(RasterizerFlags :unsigned-int)
	(RasterizerMultiply :float)
	(EllipsisChar :unsigned-short)
	(Name :pointer :count 40)
	(DstFont :pointer))

(cffi:defcstruct ImFontGlyph
	(Codepoint :unsigned-int)
	(Visible :unsigned-int)
	(AdvanceX :float)
	(X0 :float)
	(Y0 :float)
	(X1 :float)
	(Y1 :float)
	(U0 :float)
	(V0 :float)
	(U1 :float)
	(V1 :float))

(cffi:defcstruct ImFontGlyphRangesBuilder
	(UsedChars :pointer)
	(Clear :pointer)
	(GetBit :pointer)
	(SetBit :pointer)
	(AddChar :pointer)
	(AddText :pointer)
	(AddText :pointer)
	(AddRanges :pointer)
	(BuildRanges :pointer))

(cffi:defcstruct ImFontAtlasCustomRect
	(Width :unsigned-short)
	(Height :unsigned-short)
	(X :unsigned-short)
	(Y :unsigned-short)
	(GlyphID :unsigned-int)
	(GlyphAdvanceX :float)
	(GlyphOffset ImVec2)
	(Font :pointer)
	(IsPacked :pointer))

(cffi:defcenum ImFontAtlasFlags_
	(:None #.0)
	(:NoPowerOfTwoHeight #.(cl:ash 1 0))
	(:NoMouseCursors #.(cl:ash 1 1))
	(:NoBakedLines #.(cl:ash 1 2)))

(cffi:defcstruct ImFontAtlas
	(AddFont :pointer)
	(AddFontDefault :pointer)
	(AddFontDefault :pointer)
	(AddFontFromFileTTF :pointer)
	(AddFontFromFileTTF :pointer)
	(AddFontFromFileTTF :pointer)
	(AddFontFromMemoryTTF :pointer)
	(AddFontFromMemoryTTF :pointer)
	(AddFontFromMemoryTTF :pointer)
	(AddFontFromMemoryCompressedTTF :pointer)
	(AddFontFromMemoryCompressedTTF :pointer)
	(AddFontFromMemoryCompressedTTF :pointer)
	(AddFontFromMemoryCompressedBase85TTF :pointer)
	(AddFontFromMemoryCompressedBase85TTF :pointer)
	(AddFontFromMemoryCompressedBase85TTF :pointer)
	(ClearInputData :pointer)
	(ClearTexData :pointer)
	(ClearFonts :pointer)
	(Clear :pointer)
	(Build :pointer)
	(GetTexDataAsAlpha8 :pointer)
	(GetTexDataAsAlpha8 :pointer)
	(GetTexDataAsRGBA32 :pointer)
	(GetTexDataAsRGBA32 :pointer)
	(IsBuilt :pointer)
	(SetTexID :pointer)
	(GetGlyphRangesDefault :pointer)
	(GetGlyphRangesKorean :pointer)
	(GetGlyphRangesJapanese :pointer)
	(GetGlyphRangesChineseFull :pointer)
	(GetGlyphRangesChineseSimplifiedCommon :pointer)
	(GetGlyphRangesCyrillic :pointer)
	(GetGlyphRangesThai :pointer)
	(GetGlyphRangesVietnamese :pointer)
	(AddCustomRectRegular :pointer)
	(AddCustomRectFontGlyph :pointer)
	(AddCustomRectFontGlyph :pointer)
	(GetCustomRectByIndex :pointer)
	(CalcCustomRectUV :pointer)
	(GetMouseCursorTexData :pointer)
	(Locked :pointer)
	(Flags :int)
	(TexID :pointer)
	(TexDesiredWidth :int)
	(TexGlyphPadding :int)
	(TexPixelsAlpha8 :pointer)
	(TexPixelsRGBA32 :pointer)
	(TexWidth :int)
	(TexHeight :int)
	(TexUvScale ImVec2)
	(TexUvWhitePixel ImVec2)
	(Fonts :pointer)
	(CustomRects :pointer)
	(ConfigData :pointer)
	(TexUvLines :pointer :count #.(1+ 63))
	(PackIdMouseCursors :int)
	(PackIdLines :int)
	(CustomRect ImFontAtlasCustomRect)
	(GlyphRangesBuilder ImFontGlyphRangesBuilder))

(cffi:defcstruct ImFont
	(IndexAdvanceX :pointer)
	(FallbackAdvanceX :float)
	(FontSize :float)
	(IndexLookup :pointer)
	(Glyphs :pointer)
	(FallbackGlyph :pointer)
	(DisplayOffset ImVec2)
	(ContainerAtlas :pointer)
	(ConfigData :pointer)
	(ConfigDataCount :short)
	(FallbackChar :unsigned-short)
	(EllipsisChar :unsigned-short)
	(DirtyLookupTables :pointer)
	(Scale :float)
	(Ascent :float)
	(Descent :float)
	(MetricsTotalSurface :int)
	(Used4kPagesMap :pointer :count #.(floor (/ (/ (1+ #xFFFF) 4096) 8)))
	(FindGlyph :pointer)
	(FindGlyphNoFallback :pointer)
	(GetCharAdvance :pointer)
	(IsLoaded :pointer)
	(GetDebugName :pointer)
	(CalcTextSizeA :pointer)
	(CalcTextSizeA :pointer)
	(CalcTextSizeA :pointer)
	(CalcWordWrapPositionA :pointer)
	(RenderChar :pointer)
	(RenderText :pointer)
	(RenderText :pointer)
	(RenderText :pointer)
	(BuildLookupTable :pointer)
	(ClearOutputData :pointer)
	(GrowIndex :pointer)
	(AddGlyph :pointer)
	(AddRemapChar :pointer)
	(AddRemapChar :pointer)
	(SetGlyphVisible :pointer)
	(SetFallbackChar :pointer)
	(IsGlyphRangeUnused :pointer))

(cffi:defctype LayoutType :int)

(cffi:defctype ColumnsFlags :int)

(cffi:defctype ItemFlags :int)

(cffi:defctype ItemStatusFlags :int)

(cffi:defctype NavHighlightFlags :int)

(cffi:defctype NavDirSourceFlags :int)

(cffi:defctype NavMoveFlags :int)

(cffi:defctype NextItemDataFlags :int)

(cffi:defctype NextWindowDataFlags :int)

(cffi:defctype SeparatorFlags :int)

(cffi:defctype TextFlags :int)

(cffi:defctype TooltipFlags :int)

(cffi:defcvar ("GImGui" GImGui)
 :pointer)

(cl:defconstant STB_TEXTEDIT_GETWIDTH_NEWLINE -1.0d0)

(cl:defconstant STB_TEXTEDIT_UNDOSTATECOUNT 99)

(cl:defconstant STB_TEXTEDIT_UNDOCHARCOUNT 999)

(cl:defconstant IM_PI 3.14159265358979323846d0)

(cl:defconstant IM_NEWLINE "\n")

(cl:defconstant IM_TABSIZE 4)

(cffi:defcfun ("_wrap_ImHashData__SWIG_0" ImHashData) :unsigned-int
  (data :pointer)
  (data_size :pointer)
  (seed :unsigned-int))

(cffi:defcfun ("_wrap_ImHashData__SWIG_1" ImHashData) :unsigned-int
  (data :pointer)
  (data_size :pointer))

(cffi:defcfun ("_wrap_ImHashStr__SWIG_0" ImHashStr) :unsigned-int
  (data :string)
  (data_size :pointer)
  (seed :unsigned-int))

(cffi:defcfun ("_wrap_ImHashStr__SWIG_1" ImHashStr) :unsigned-int
  (data :string)
  (data_size :pointer))

(cffi:defcfun ("_wrap_ImHashStr__SWIG_2" ImHashStr) :unsigned-int
  (data :string))

(cffi:defcfun ("_wrap_ImHash__SWIG_0" ImHash) :unsigned-int
  (data :pointer)
  (size :int)
  (seed :unsigned-int))

(cffi:defcfun ("_wrap_ImHash__SWIG_1" ImHash) :unsigned-int
  (data :pointer)
  (size :int))

(cffi:defcfun ("_wrap_ImAlphaBlendColors" ImAlphaBlendColors) :unsigned-int
  (col_a :unsigned-int)
  (col_b :unsigned-int))

(cffi:defcfun ("_wrap_ImIsPowerOfTwo" ImIsPowerOfTwo) :pointer
  (v :int))

(cffi:defcfun ("_wrap_ImUpperPowerOfTwo" ImUpperPowerOfTwo) :int
  (v :int))

(cffi:defcfun ("_wrap_ImStricmp" ImStricmp) :int
  (str1 :string)
  (str2 :string))

(cffi:defcfun ("_wrap_ImStrnicmp" ImStrnicmp) :int
  (str1 :string)
  (str2 :string)
  (count :pointer))

(cffi:defcfun ("_wrap_ImStrncpy" ImStrncpy) :void
  (dst :string)
  (src :string)
  (count :pointer))

(cffi:defcfun ("_wrap_ImStrdup" ImStrdup) :string
  (str :string))

(cffi:defcfun ("_wrap_ImStrdupcpy" ImStrdupcpy) :string
  (dst :string)
  (p_dst_size :pointer)
  (str :string))

(cffi:defcfun ("_wrap_ImStrchrRange" ImStrchrRange) :string
  (str_begin :string)
  (str_end :string)
  (c :char))

(cffi:defcfun ("_wrap_ImStrlenW" ImStrlenW) :int
  (str :pointer))

(cffi:defcfun ("_wrap_ImStreolRange" ImStreolRange) :string
  (str :string)
  (str_end :string))

(cffi:defcfun ("_wrap_ImStrbolW" ImStrbolW) :pointer
  (buf_mid_line :pointer)
  (buf_begin :pointer))

(cffi:defcfun ("_wrap_ImStristr" ImStristr) :string
  (haystack :string)
  (haystack_end :string)
  (needle :string)
  (needle_end :string))

(cffi:defcfun ("_wrap_ImStrTrimBlanks" ImStrTrimBlanks) :void
  (str :string))

(cffi:defcfun ("_wrap_ImStrSkipBlank" ImStrSkipBlank) :string
  (str :string))

(cffi:defcfun ("_wrap_ImFormatString" ImFormatString) :int
  (buf :string)
  (buf_size :pointer)
  (fmt :string)
  &rest)

;;(cffi:defcfun ("_wrap_ImFormatStringV" ImFormatStringV) :int
;;  (buf :string)
;;  (buf_size :pointer)
;;  (fmt :string)
;;  (args :pointer))

(cffi:defcfun ("_wrap_ImParseFormatFindStart" ImParseFormatFindStart) :string
  (format :string))

(cffi:defcfun ("_wrap_ImParseFormatFindEnd" ImParseFormatFindEnd) :string
  (format :string))

(cffi:defcfun ("_wrap_ImParseFormatTrimDecorations" ImParseFormatTrimDecorations) :string
  (format :string)
  (buf :string)
  (buf_size :pointer))

(cffi:defcfun ("_wrap_ImParseFormatPrecision" ImParseFormatPrecision) :int
  (format :string)
  (default_value :int))

(cffi:defcfun ("_wrap_ImCharIsBlankA" ImCharIsBlankA) :pointer
  (c :char))

(cffi:defcfun ("_wrap_ImCharIsBlankW" ImCharIsBlankW) :pointer
  (c :unsigned-int))

(cffi:defcfun ("_wrap_ImTextStrToUtf8" ImTextStrToUtf8) :int
  (buf :string)
  (buf_size :int)
  (in_text :pointer)
  (in_text_end :pointer))

(cffi:defcfun ("_wrap_ImTextCharFromUtf8" ImTextCharFromUtf8) :int
  (out_char :pointer)
  (in_text :string)
  (in_text_end :string))

(cffi:defcfun ("_wrap_ImTextStrFromUtf8__SWIG_0" ImTextStrFromUtf8) :int
  (buf :pointer)
  (buf_size :int)
  (in_text :string)
  (in_text_end :string)
  (in_remaining :pointer))

(cffi:defcfun ("_wrap_ImTextStrFromUtf8__SWIG_1" ImTextStrFromUtf8) :int
  (buf :pointer)
  (buf_size :int)
  (in_text :string)
  (in_text_end :string))

(cffi:defcfun ("_wrap_ImTextCountCharsFromUtf8" ImTextCountCharsFromUtf8) :int
  (in_text :string)
  (in_text_end :string))

(cffi:defcfun ("_wrap_ImTextCountUtf8BytesFromChar" ImTextCountUtf8BytesFromChar) :int
  (in_text :string)
  (in_text_end :string))

(cffi:defcfun ("_wrap_ImTextCountUtf8BytesFromStr" ImTextCountUtf8BytesFromStr) :int
  (in_text :pointer)
  (in_text_end :pointer))

(cffi:defctype ImFileHandle :pointer)

(cffi:defcfun ("_wrap_ImFileOpen" ImFileOpen) :pointer
  (filename :string)
  (mode :string))

(cffi:defcfun ("_wrap_ImFileClose" ImFileClose) :pointer
  (file :pointer))

(cffi:defcfun ("_wrap_ImFileGetSize" ImFileGetSize) :unsigned-long-long
  (file :pointer))

(cffi:defcfun ("_wrap_ImFileRead" ImFileRead) :unsigned-long-long
  (data :pointer)
  (size :unsigned-long-long)
  (count :unsigned-long-long)
  (file :pointer))

(cffi:defcfun ("_wrap_ImFileWrite" ImFileWrite) :unsigned-long-long
  (data :pointer)
  (size :unsigned-long-long)
  (count :unsigned-long-long)
  (file :pointer))

(cffi:defcfun ("_wrap_ImFileLoadToMemory__SWIG_0" ImFileLoadToMemory) :pointer
  (filename :string)
  (mode :string)
  (out_file_size :pointer)
  (padding_bytes :int))

(cffi:defcfun ("_wrap_ImFileLoadToMemory__SWIG_1" ImFileLoadToMemory) :pointer
  (filename :string)
  (mode :string)
  (out_file_size :pointer))

(cffi:defcfun ("_wrap_ImFileLoadToMemory__SWIG_2" ImFileLoadToMemory) :pointer
  (filename :string)
  (mode :string))

(cffi:defcfun ("_wrap_ImPow__SWIG_0" ImPow) :float
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_ImPow__SWIG_1" ImPow) :double
  (x :double)
  (y :double))

(cffi:defcfun ("_wrap_ImLog__SWIG_0" ImLog) :float
  (x :float))

(cffi:defcfun ("_wrap_ImLog__SWIG_1" ImLog) :double
  (x :double))

(cffi:defcfun ("_wrap_ImAbs__SWIG_0" ImAbs) :float
  (x :float))

(cffi:defcfun ("_wrap_ImAbs__SWIG_1" ImAbs) :double
  (x :double))

(cffi:defcfun ("_wrap_ImSign__SWIG_0" ImSign) :float
  (x :float))

(cffi:defcfun ("_wrap_ImSign__SWIG_1" ImSign) :double
  (x :double))

(cffi:defcfun ("_wrap_ImMin" ImMin) ImVec2
  (lhs :pointer)
  (rhs :pointer))

(cffi:defcfun ("_wrap_ImMax" ImMax) ImVec2
  (lhs :pointer)
  (rhs :pointer))

(cffi:defcfun ("_wrap_ImClamp" ImClamp) ImVec2
  (v :pointer)
  (mn :pointer)
  (mx ImVec2))

(cffi:defcfun ("_wrap_ImLerp__SWIG_1" ImLerp) ImVec2
  (a :pointer)
  (b :pointer)
  (t_arg2 :float))

(cffi:defcfun ("_wrap_ImLerp__SWIG_2" ImLerp) ImVec2
  (a :pointer)
  (b :pointer)
  (t_arg2 :pointer))

(cffi:defcfun ("_wrap_ImLerp__SWIG_3" ImLerp) ImVec4
  (a :pointer)
  (b :pointer)
  (t_arg2 :float))

(cffi:defcfun ("_wrap_ImSaturate" ImSaturate) :float
  (f :float))

(cffi:defcfun ("_wrap_ImLengthSqr__SWIG_0" ImLengthSqr) :float
  (lhs :pointer))

(cffi:defcfun ("_wrap_ImLengthSqr__SWIG_1" ImLengthSqr) :float
  (lhs :pointer))

(cffi:defcfun ("_wrap_ImInvLength" ImInvLength) :float
  (lhs :pointer)
  (fail_value :float))

(cffi:defcfun ("_wrap_ImFloor__SWIG_0" ImFloor) :float
  (f :float))

(cffi:defcfun ("_wrap_ImFloor__SWIG_1" ImFloor) ImVec2
  (v :pointer))

(cffi:defcfun ("_wrap_ImModPositive" ImModPositive) :int
  (a :int)
  (b :int))

(cffi:defcfun ("_wrap_ImDot" ImDot) :float
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("_wrap_ImRotate" ImRotate) ImVec2
  (v :pointer)
  (cos_a :float)
  (sin_a :float))

(cffi:defcfun ("_wrap_ImLinearSweep" ImLinearSweep) :float
  (current :float)
  (target :float)
  (speed :float))

(cffi:defcfun ("_wrap_ImMul" ImMul) ImVec2
  (lhs :pointer)
  (rhs :pointer))

(cffi:defcfun ("_wrap_ImBezierCalc" ImBezierCalc) ImVec2
  (p1 :pointer)
  (p2 :pointer)
  (p3 :pointer)
  (p4 :pointer)
  (t_arg4 :float))

(cffi:defcfun ("_wrap_ImBezierClosestPoint" ImBezierClosestPoint) ImVec2
  (p1 :pointer)
  (p2 :pointer)
  (p3 :pointer)
  (p4 :pointer)
  (p :pointer)
  (num_segments :int))

(cffi:defcfun ("_wrap_ImBezierClosestPointCasteljau" ImBezierClosestPointCasteljau) ImVec2
  (p1 :pointer)
  (p2 :pointer)
  (p3 :pointer)
  (p4 :pointer)
  (p :pointer)
  (tess_tol :float))

(cffi:defcfun ("_wrap_ImLineClosestPoint" ImLineClosestPoint) ImVec2
  (a :pointer)
  (b :pointer)
  (p :pointer))

(cffi:defcfun ("_wrap_ImTriangleContainsPoint" ImTriangleContainsPoint) :pointer
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (p :pointer))

(cffi:defcfun ("_wrap_ImTriangleClosestPoint" ImTriangleClosestPoint) ImVec2
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (p :pointer))

(cffi:defcfun ("_wrap_ImTriangleBarycentricCoords" ImTriangleBarycentricCoords) :void
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (p :pointer)
  (out_u :pointer)
  (out_v :pointer)
  (out_w :pointer))

(cffi:defcfun ("_wrap_ImTriangleArea" ImTriangleArea) :float
  (a :pointer)
  (b :pointer)
  (c :pointer))

(cffi:defcfun ("_wrap_ImGetDirQuadrantFromDelta" ImGetDirQuadrantFromDelta) :int
  (dx :float)
  (dy :float))

(cffi:defcstruct ImVec1
	(x :float))

(cffi:defcstruct ImVec2ih
	(x :short)
	(y :short))

(cffi:defcstruct ImRect
	(Min ImVec2)
	(Max ImVec2)
	(GetCenter :pointer)
	(GetSize :pointer)
	(GetWidth :pointer)
	(GetHeight :pointer)
	(GetTL :pointer)
	(GetTR :pointer)
	(GetBL :pointer)
	(GetBR :pointer)
	(Contains :pointer)
	(Contains :pointer)
	(Overlaps :pointer)
	(Add :pointer)
	(Add :pointer)
	(Expand :pointer)
	(Expand :pointer)
	(Translate :pointer)
	(TranslateX :pointer)
	(TranslateY :pointer)
	(ClipWith :pointer)
	(ClipWithFull :pointer)
	(Floor :pointer)
	(IsInverted :pointer)
	(ToVec4 :pointer))

(cffi:defcfun ("_wrap_ImBitArrayTestBit" ImBitArrayTestBit) :pointer
  (arr :pointer)
  (n :int))

(cffi:defcfun ("_wrap_ImBitArrayClearBit" ImBitArrayClearBit) :void
  (arr :pointer)
  (n :int))

(cffi:defcfun ("_wrap_ImBitArraySetBit" ImBitArraySetBit) :void
  (arr :pointer)
  (n :int))

(cffi:defcfun ("_wrap_ImBitArraySetBitRange" ImBitArraySetBitRange) :void
  (arr :pointer)
  (n :int)
  (n2 :int))

(cffi:defcstruct ImBitVector
	(Storage :pointer)
	(Create :pointer)
	(Clear :pointer)
	(TestBit :pointer)
	(SetBit :pointer)
	(ClearBit :pointer))

(cffi:defctype ImPoolIdx :int)

(cl:defconstant IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN 12)

(cl:defconstant IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX 512)

(cl:defconstant IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER 1)

(cffi:defcstruct ImDrawListSharedData
	(TexUvWhitePixel ImVec2)
	(Font :pointer)
	(FontSize :float)
	(CurveTessellationTol :float)
	(CircleSegmentMaxError :float)
	(ClipRectFullscreen ImVec4)
	(InitialFlags :int)
	(ArcFastVtx :pointer :count 12)
	(CircleSegmentCounts :pointer :count 64)
	(TexUvLines :pointer)
	(SetCircleSegmentMaxError :pointer))

(cffi:defcstruct ImDrawDataBuilder
	(Layers :pointer :count 2)
	(Clear :pointer)
	(ClearFreeMemory :pointer)
	(FlattenIntoSingleLayer :pointer))

(cffi:defcenum ItemFlags_
	(:None #.0)
	(:NoTabStop #.(cl:ash 1 0))
	(:ButtonRepeat #.(cl:ash 1 1))
	(:Disabled #.(cl:ash 1 2))
	(:NoNav #.(cl:ash 1 3))
	(:NoNavDefaultFocus #.(cl:ash 1 4))
	(:SelectableDontClosePopup #.(cl:ash 1 5))
	(:MixedValue #.(cl:ash 1 6))
	(:ReadOnly #.(cl:ash 1 7))
	(:Default_ #.0))

(cffi:defcenum ItemStatusFlags_
	(:None #.0)
	(:HoveredRect #.(cl:ash 1 0))
	(:HasDisplayRect #.(cl:ash 1 1))
	(:Edited #.(cl:ash 1 2))
	(:ToggledSelection #.(cl:ash 1 3))
	(:ToggledOpen #.(cl:ash 1 4))
	(:HasDeactivated #.(cl:ash 1 5))
	(:Deactivated #.(cl:ash 1 6)))

(cffi:defcenum ButtonFlagsPrivate_
	(:PressedOnClick #.(cl:ash 1 4))
	(:PressedOnClickRelease #.(cl:ash 1 5))
	(:PressedOnClickReleaseAnywhere #.(cl:ash 1 6))
	(:PressedOnRelease #.(cl:ash 1 7))
	(:PressedOnDoubleClick #.(cl:ash 1 8))
	(:PressedOnDragDropHold #.(cl:ash 1 9))
	(:Repeat #.(cl:ash 1 10))
	(:FlattenChildren #.(cl:ash 1 11))
	(:AllowItemOverlap #.(cl:ash 1 12))
	(:DontClosePopups #.(cl:ash 1 13))
	(:Disabled #.(cl:ash 1 14))
	(:AlignTextBaseLine #.(cl:ash 1 15))
	(:NoKeyModifiers #.(cl:ash 1 16))
	(:NoHoldingActiveId #.(cl:ash 1 17))
	(:NoNavFocus #.(cl:ash 1 18))
	(:NoHoveredOnFocus #.(cl:ash 1 19))
	(:PressedOnMask_ #.(cl:logior (cl:ash 1 4) (cl:ash 1 5) (cl:ash 1 6) (cl:ash 1 7) (cl:ash 1 8) (cl:ash 1 9)))
	(:PressedOnDefault_ #.(cl:ash 1 7)))

(cffi:defcenum SliderFlagsPrivate_
	(:Vertical #.(cl:ash 1 20))
	(:ReadOnly #.(cl:ash 1 21)))

(cffi:defcenum SelectableFlagsPrivate_
	(:NoHoldingActiveID #.(cl:ash 1 20))
	(:SelectOnClick #.(cl:ash 1 21))
	(:SelectOnRelease #.(cl:ash 1 22))
	(:SpanAvailWidth #.(cl:ash 1 23))
	(:DrawHoveredWhenHeld #.(cl:ash 1 24))
	(:SetNavIdOnHover #.(cl:ash 1 25)))

(cffi:defcenum TreeNodeFlagsPrivate_
	(:ClipLabelForTrailingButton #.(cl:ash 1 20)))

(cffi:defcenum SeparatorFlags_
	(:None #.0)
	(:Horizontal #.(cl:ash 1 0))
	(:Vertical #.(cl:ash 1 1))
	(:SpanAllColumns #.(cl:ash 1 2)))

(cffi:defcenum TextFlags_
	(:None #.0)
	(:NoWidthForLargeClippedText #.(cl:ash 1 0)))

(cffi:defcenum TooltipFlags_
	(:None #.0)
	(:OverridePreviousTooltip #.(cl:ash 1 0)))

(cffi:defcenum LayoutType_
	(:Horizontal #.0)
	(:Vertical #.1))

(cffi:defcenum LogType
	(:None #.0)
	:TTY
	:File
	:Buffer
	:Clipboard)

(cffi:defcenum Axis
	(:None #.-1)
	(:X #.0)
	(:Y #.1))

(cffi:defcenum PlotType
	:Lines
	:Histogram)

(cffi:defcenum InputSource
	(:None #.0)
	:Mouse
	:Nav
	:NavKeyboard
	:NavGamepad
	:COUNT)

(cffi:defcenum InputReadMode
	:Down
	:Pressed
	:Released
	:Repeat
	:RepeatSlow
	:RepeatFast)

(cffi:defcenum NavHighlightFlags_
	(:None #.0)
	(:TypeDefault #.(cl:ash 1 0))
	(:TypeThin #.(cl:ash 1 1))
	(:AlwaysDraw #.(cl:ash 1 2))
	(:NoRounding #.(cl:ash 1 3)))

(cffi:defcenum NavDirSourceFlags_
	(:None #.0)
	(:Keyboard #.(cl:ash 1 0))
	(:PadDPad #.(cl:ash 1 1))
	(:PadLStick #.(cl:ash 1 2)))

(cffi:defcenum NavMoveFlags_
	(:None #.0)
	(:LoopX #.(cl:ash 1 0))
	(:LoopY #.(cl:ash 1 1))
	(:WrapX #.(cl:ash 1 2))
	(:WrapY #.(cl:ash 1 3))
	(:AllowCurrentNavId #.(cl:ash 1 4))
	(:AlsoScoreVisibleSet #.(cl:ash 1 5))
	(:ScrollToEdge #.(cl:ash 1 6)))

(cffi:defcenum NavForward
	:None
	:ForwardQueued
	:ForwardActive)

(cffi:defcenum NavLayer
	(:Main #.0)
	(:Menu #.1)
	:COUNT)

(cffi:defcenum PopupPositionPolicy
	:Default
	:ComboBox)

(cffi:defcstruct DataTypeTempStorage
	(Data :pointer :count 8))

(cffi:defcstruct DataTypeInfo
	(Size :pointer)
	(PrintFmt :string)
	(ScanFmt :string))

(cffi:defcenum DataTypePrivate_
	(:String #.(1+ (cffi:foreign-enum-value 'DataType_ :COUNT)))
	:Pointer
	:ID)

(cffi:defcstruct ColorMod
	(Col :int)
	(BackupValue ImVec4))

(cffi:defcstruct StyleMod
	(VarIdx :int)
	(BackupInt :pointer :count 2)
	(BackupFloat :pointer :count 2))

(cffi:defcstruct GroupData
	(BackupCursorPos ImVec2)
	(BackupCursorMaxPos ImVec2)
	(BackupIndent ImVec1)
	(BackupGroupOffset ImVec1)
	(BackupCurrLineSize ImVec2)
	(BackupCurrLineTextBaseOffset :float)
	(BackupActiveIdIsAlive :unsigned-int)
	(BackupActiveIdPreviousFrameIsAlive :pointer)
	(EmitItem :pointer))

(cffi:defcstruct MenuColumns
	(Spacing :float)
	(Width :float)
	(NextWidth :float)
	(Pos :pointer :count 3)
	(NextWidths :pointer :count 3)
	(Update :pointer)
	(DeclColumns :pointer)
	(CalcExtraSpace :pointer))

(cffi:defcstruct InputTextState
	(ID :unsigned-int)
	(CurLenW :int)
	(CurLenA :int)
	(TextW :pointer)
	(TextA :pointer)
	(InitialTextA :pointer)
	(TextAIsValid :pointer)
	(BufCapacityA :int)
	(ScrollX :float)
	(Stb :pointer)
	(CursorAnim :float)
	(CursorFollow :pointer)
	(SelectedAllMouseLock :pointer)
	(UserFlags :int)
	(UserCallback :pointer)
	(UserCallbackData :pointer)
	(ClearText :pointer)
	(ClearFreeMemory :pointer)
	(GetUndoAvailCount :pointer)
	(GetRedoAvailCount :pointer)
	(OnKeyPressed :pointer)
	(CursorAnimReset :pointer)
	(CursorClamp :pointer)
	(HasSelection :pointer)
	(ClearSelection :pointer)
	(SelectAll :pointer))

(cffi:defcstruct PopupData
	(PopupId :unsigned-int)
	(Window :pointer)
	(SourceWindow :pointer)
	(OpenFrameCount :int)
	(OpenParentId :unsigned-int)
	(OpenPopupPos ImVec2)
	(OpenMousePos ImVec2))

(cffi:defcstruct NavMoveResult
	(Window :pointer)
	(ID :unsigned-int)
	(FocusScopeId :unsigned-int)
	(DistBox :float)
	(DistCenter :float)
	(DistAxial :float)
	(RectRel ImRect)
	(Clear :pointer))

(cffi:defcenum NextWindowDataFlags_
	(:None #.0)
	(:HasPos #.(cl:ash 1 0))
	(:HasSize #.(cl:ash 1 1))
	(:HasContentSize #.(cl:ash 1 2))
	(:HasCollapsed #.(cl:ash 1 3))
	(:HasSizeConstraint #.(cl:ash 1 4))
	(:HasFocus #.(cl:ash 1 5))
	(:HasBgAlpha #.(cl:ash 1 6))
	(:HasScroll #.(cl:ash 1 7)))

(cffi:defcstruct NextWindowData
	(Flags :int)
	(PosCond :int)
	(SizeCond :int)
	(CollapsedCond :int)
	(PosVal ImVec2)
	(PosPivotVal ImVec2)
	(SizeVal ImVec2)
	(ContentSizeVal ImVec2)
	(ScrollVal ImVec2)
	(CollapsedVal :pointer)
	(SizeConstraintRect ImRect)
	(SizeCallback :pointer)
	(SizeCallbackUserData :pointer)
	(BgAlphaVal :float)
	(MenuBarOffsetMinVal ImVec2)
	(ClearFlags :pointer))

(cffi:defcenum NextItemDataFlags_
	(:None #.0)
	(:HasWidth #.(cl:ash 1 0))
	(:HasOpen #.(cl:ash 1 1)))

(cffi:defcstruct NextItemData
	(Flags :int)
	(Width :float)
	(FocusScopeId :unsigned-int)
	(OpenCond :int)
	(OpenVal :pointer)
	(ClearFlags :pointer))

(cffi:defcstruct ShrinkWidthItem
	(Index :int)
	(Width :float))

(cffi:defcstruct PtrOrIndex
	(Ptr :pointer)
	(Index :int))

(cffi:defcenum ColumnsFlags_
	(:None #.0)
	(:NoBorder #.(cl:ash 1 0))
	(:NoResize #.(cl:ash 1 1))
	(:NoPreserveWidths #.(cl:ash 1 2))
	(:NoForceWithinWindow #.(cl:ash 1 3))
	(:GrowParentContentsSize #.(cl:ash 1 4)))

(cffi:defcstruct ColumnData
	(OffsetNorm :float)
	(OffsetNormBeforeResize :float)
	(Flags :int)
	(ClipRect ImRect))

(cffi:defcstruct Columns
	(ID :unsigned-int)
	(Flags :int)
	(IsFirstFrame :pointer)
	(IsBeingResized :pointer)
	(Current :int)
	(Count :int)
	(OffMinX :float)
	(OffMaxX :float)
	(LineMinY :float)
	(LineMaxY :float)
	(HostCursorPosY :float)
	(HostCursorMaxPosX :float)
	(HostInitialClipRect ImRect)
	(HostBackupClipRect ImRect)
	(HostBackupParentWorkRect ImRect)
	(Columns :pointer)
	(Splitter ImDrawListSplitter)
	(Clear :pointer))

(cffi:defcstruct WindowSettings
	(ID :unsigned-int)
	(Pos ImVec2ih)
	(Size ImVec2ih)
	(Collapsed :pointer)
	(WantApply :pointer)
	(GetName :pointer))

(cffi:defcstruct SettingsHandler
	(TypeName :string)
	(TypeHash :unsigned-int)
	(ClearAllFn :pointer)
	(ReadInitFn :pointer)
	(ReadOpenFn :pointer)
	(ReadLineFn :pointer)
	(ApplyAllFn :pointer)
	(WriteAllFn :pointer)
	(UserData :pointer))

(cffi:defcstruct Context
	(Initialized :pointer)
	(FontAtlasOwnedByContext :pointer)
	(IO IO)
	(Style Style)
	(Font :pointer)
	(FontSize :float)
	(FontBaseSize :float)
	(DrawListSharedData ImDrawListSharedData)
	(Time :double)
	(FrameCount :int)
	(FrameCountEnded :int)
	(FrameCountRendered :int)
	(WithinFrameScope :pointer)
	(WithinFrameScopeWithImplicitWindow :pointer)
	(WithinEndChild :pointer)
	(TestEngineHookItems :pointer)
	(TestEngineHookIdInfo :unsigned-int)
	(TestEngine :pointer)
	(Windows :pointer)
	(WindowsFocusOrder :pointer)
	(WindowsTempSortBuffer :pointer)
	(CurrentWindowStack :pointer)
	(WindowsById Storage)
	(WindowsActiveCount :int)
	(CurrentWindow :pointer)
	(HoveredWindow :pointer)
	(HoveredRootWindow :pointer)
	(HoveredWindowUnderMovingWindow :pointer)
	(MovingWindow :pointer)
	(WheelingWindow :pointer)
	(WheelingWindowRefMousePos ImVec2)
	(WheelingWindowTimer :float)
	(HoveredId :unsigned-int)
	(HoveredIdPreviousFrame :unsigned-int)
	(HoveredIdAllowOverlap :pointer)
	(HoveredIdDisabled :pointer)
	(HoveredIdTimer :float)
	(HoveredIdNotActiveTimer :float)
	(ActiveId :unsigned-int)
	(ActiveIdIsAlive :unsigned-int)
	(ActiveIdTimer :float)
	(ActiveIdIsJustActivated :pointer)
	(ActiveIdAllowOverlap :pointer)
	(ActiveIdNoClearOnFocusLoss :pointer)
	(ActiveIdHasBeenPressedBefore :pointer)
	(ActiveIdHasBeenEditedBefore :pointer)
	(ActiveIdHasBeenEditedThisFrame :pointer)
	(ActiveIdUsingNavDirMask :unsigned-int)
	(ActiveIdUsingNavInputMask :unsigned-int)
	(ActiveIdUsingKeyInputMask :unsigned-long-long)
	(ActiveIdClickOffset ImVec2)
	(ActiveIdWindow :pointer)
	(ActiveIdSource InputSource)
	(ActiveIdMouseButton :int)
	(ActiveIdPreviousFrame :unsigned-int)
	(ActiveIdPreviousFrameIsAlive :pointer)
	(ActiveIdPreviousFrameHasBeenEditedBefore :pointer)
	(ActiveIdPreviousFrameWindow :pointer)
	(LastActiveId :unsigned-int)
	(LastActiveIdTimer :float)
	(NextWindowData NextWindowData)
	(NextItemData NextItemData)
	(ColorModifiers :pointer)
	(StyleModifiers :pointer)
	(FontStack :pointer)
	(OpenPopupStack :pointer)
	(BeginPopupStack :pointer)
	(NavWindow :pointer)
	(NavId :unsigned-int)
	(NavFocusScopeId :unsigned-int)
	(NavActivateId :unsigned-int)
	(NavActivateDownId :unsigned-int)
	(NavActivatePressedId :unsigned-int)
	(NavInputId :unsigned-int)
	(NavJustTabbedId :unsigned-int)
	(NavJustMovedToId :unsigned-int)
	(NavJustMovedToFocusScopeId :unsigned-int)
	(NavJustMovedToKeyMods :int)
	(NavNextActivateId :unsigned-int)
	(NavInputSource InputSource)
	(NavScoringRect ImRect)
	(NavScoringCount :int)
	(NavLayer NavLayer)
	(NavIdTabCounter :int)
	(NavIdIsAlive :pointer)
	(NavMousePosDirty :pointer)
	(NavDisableHighlight :pointer)
	(NavDisableMouseHover :pointer)
	(NavAnyRequest :pointer)
	(NavInitRequest :pointer)
	(NavInitRequestFromMove :pointer)
	(NavInitResultId :unsigned-int)
	(NavInitResultRectRel ImRect)
	(NavMoveFromClampedRefRect :pointer)
	(NavMoveRequest :pointer)
	(NavMoveRequestFlags :int)
	(NavMoveRequestForward NavForward)
	(NavMoveRequestKeyMods :int)
	(NavMoveDir :int)
	(NavMoveDirLast :int)
	(NavMoveClipDir :int)
	(NavMoveResultLocal NavMoveResult)
	(NavMoveResultLocalVisibleSet NavMoveResult)
	(NavMoveResultOther NavMoveResult)
	(NavWrapRequestWindow :pointer)
	(NavWrapRequestFlags :int)
	(NavWindowingTarget :pointer)
	(NavWindowingTargetAnim :pointer)
	(NavWindowingListWindow :pointer)
	(NavWindowingTimer :float)
	(NavWindowingHighlightAlpha :float)
	(NavWindowingToggleLayer :pointer)
	(FocusRequestCurrWindow :pointer)
	(FocusRequestNextWindow :pointer)
	(FocusRequestCurrCounterRegular :int)
	(FocusRequestCurrCounterTabStop :int)
	(FocusRequestNextCounterRegular :int)
	(FocusRequestNextCounterTabStop :int)
	(FocusTabPressed :pointer)
	(DrawData ImDrawData)
	(DrawDataBuilder ImDrawDataBuilder)
	(DimBgRatio :float)
	(BackgroundDrawList ImDrawList)
	(ForegroundDrawList ImDrawList)
	(MouseCursor :int)
	(DragDropActive :pointer)
	(DragDropWithinSource :pointer)
	(DragDropWithinTarget :pointer)
	(DragDropSourceFlags :int)
	(DragDropSourceFrameCount :int)
	(DragDropMouseButton :int)
	(DragDropPayload Payload)
	(DragDropTargetRect ImRect)
	(DragDropTargetId :unsigned-int)
	(DragDropAcceptFlags :int)
	(DragDropAcceptIdCurrRectSurface :float)
	(DragDropAcceptIdCurr :unsigned-int)
	(DragDropAcceptIdPrev :unsigned-int)
	(DragDropAcceptFrameCount :int)
	(DragDropHoldJustPressedId :unsigned-int)
	(DragDropPayloadBufHeap :pointer)
	(DragDropPayloadBufLocal :pointer :count 16)
	(CurrentTabBar :pointer)
	(TabBars :pointer)
	(CurrentTabBarStack :pointer)
	(ShrinkWidthBuffer :pointer)
	(LastValidMousePos ImVec2)
	(InputTextState InputTextState)
	(InputTextPasswordFont ImFont)
	(TempInputId :unsigned-int)
	(ColorEditOptions :int)
	(ColorEditLastHue :float)
	(ColorEditLastSat :float)
	(ColorEditLastColor :pointer :count 3)
	(ColorPickerRef ImVec4)
	(SliderCurrentAccum :float)
	(SliderCurrentAccumDirty :pointer)
	(DragCurrentAccumDirty :pointer)
	(DragCurrentAccum :float)
	(DragSpeedDefaultRatio :float)
	(ScrollbarClickDeltaToGrabCenter :float)
	(TooltipOverrideCount :int)
	(ClipboardHandlerData :pointer)
	(MenusIdSubmittedThisFrame :pointer)
	(PlatformImePos ImVec2)
	(PlatformImeLastPos ImVec2)
	(SettingsLoaded :pointer)
	(SettingsDirtyTimer :float)
	(SettingsIniData TextBuffer)
	(SettingsHandlers :pointer)
	(SettingsWindows :pointer)
	(LogEnabled :pointer)
	(LogType LogType)
	(LogFile :pointer)
	(LogBuffer TextBuffer)
	(LogLinePosY :float)
	(LogLineFirstItem :pointer)
	(LogDepthRef :int)
	(LogDepthToExpand :int)
	(LogDepthToExpandDefault :int)
	(DebugItemPickerActive :pointer)
	(DebugItemPickerBreakId :unsigned-int)
	(FramerateSecPerFrame :pointer :count 120)
	(FramerateSecPerFrameIdx :int)
	(FramerateSecPerFrameAccum :float)
	(WantCaptureMouseNextFrame :int)
	(WantCaptureKeyboardNextFrame :int)
	(WantTextInputNextFrame :int)
	(TempBuffer :pointer :count #.(1+ (* 1024 3))))

(cffi:defcstruct WindowTempData
	(CursorPos ImVec2)
	(CursorPosPrevLine ImVec2)
	(CursorStartPos ImVec2)
	(CursorMaxPos ImVec2)
	(CurrLineSize ImVec2)
	(PrevLineSize ImVec2)
	(CurrLineTextBaseOffset :float)
	(PrevLineTextBaseOffset :float)
	(Indent ImVec1)
	(ColumnsOffset ImVec1)
	(GroupOffset ImVec1)
	(LastItemId :unsigned-int)
	(LastItemStatusFlags :int)
	(LastItemRect ImRect)
	(LastItemDisplayRect ImRect)
	(NavLayerCurrent NavLayer)
	(NavLayerCurrentMask :int)
	(NavLayerActiveMask :int)
	(NavLayerActiveMaskNext :int)
	(NavFocusScopeIdCurrent :unsigned-int)
	(NavHideHighlightOneFrame :pointer)
	(NavHasScroll :pointer)
	(MenuBarAppending :pointer)
	(MenuBarOffset ImVec2)
	(MenuColumns MenuColumns)
	(TreeDepth :int)
	(TreeJumpToParentOnPopMask :unsigned-int)
	(ChildWindows :pointer)
	(StateStorage :pointer)
	(CurrentColumns :pointer)
	(LayoutType :int)
	(ParentLayoutType :int)
	(FocusCounterRegular :int)
	(FocusCounterTabStop :int)
	(ItemFlags :int)
	(ItemWidth :float)
	(TextWrapPos :float)
	(ItemFlagsStack :pointer)
	(ItemWidthStack :pointer)
	(TextWrapPosStack :pointer)
	(GroupStack :pointer)
	(StackSizesBackup :pointer :count 6))

(cffi:defcstruct Window
	(Name :string)
	(ID :unsigned-int)
	(Flags :int)
	(Pos ImVec2)
	(Size ImVec2)
	(SizeFull ImVec2)
	(ContentSize ImVec2)
	(ContentSizeExplicit ImVec2)
	(WindowPadding ImVec2)
	(WindowRounding :float)
	(WindowBorderSize :float)
	(NameBufLen :int)
	(MoveId :unsigned-int)
	(ChildId :unsigned-int)
	(Scroll ImVec2)
	(ScrollMax ImVec2)
	(ScrollTarget ImVec2)
	(ScrollTargetCenterRatio ImVec2)
	(ScrollbarSizes ImVec2)
	(ScrollbarX :pointer)
	(ScrollbarY :pointer)
	(Active :pointer)
	(WasActive :pointer)
	(WriteAccessed :pointer)
	(Collapsed :pointer)
	(WantCollapseToggle :pointer)
	(SkipItems :pointer)
	(Appearing :pointer)
	(Hidden :pointer)
	(IsFallbackWindow :pointer)
	(HasCloseButton :pointer)
	(ResizeBorderHeld :char)
	(BeginCount :short)
	(BeginOrderWithinParent :short)
	(BeginOrderWithinContext :short)
	(PopupId :unsigned-int)
	(AutoFitFramesX :char)
	(AutoFitFramesY :char)
	(AutoFitChildAxises :char)
	(AutoFitOnlyGrows :pointer)
	(AutoPosLastDirection :int)
	(HiddenFramesCanSkipItems :int)
	(HiddenFramesCannotSkipItems :int)
	(SetWindowPosAllowFlags :int)
	(SetWindowSizeAllowFlags :int)
	(SetWindowCollapsedAllowFlags :int)
	(SetWindowPosVal ImVec2)
	(SetWindowPosPivot ImVec2)
	(IDStack :pointer)
	(DC WindowTempData)
	(OuterRectClipped ImRect)
	(InnerRect ImRect)
	(InnerClipRect ImRect)
	(WorkRect ImRect)
	(ParentWorkRect ImRect)
	(ClipRect ImRect)
	(ContentRegionRect ImRect)
	(HitTestHoleSize ImVec2ih)
	(HitTestHoleOffset ImVec2ih)
	(LastFrameActive :int)
	(LastTimeActive :float)
	(ItemWidthDefault :float)
	(StateStorage Storage)
	(ColumnsStorage :pointer)
	(FontWindowScale :float)
	(SettingsOffset :int)
	(DrawList :pointer)
	(DrawListInst ImDrawList)
	(ParentWindow :pointer)
	(RootWindow :pointer)
	(RootWindowForTitleBarHighlight :pointer)
	(RootWindowForNav :pointer)
	(NavLastChildNavWindow :pointer)
	(NavLastIds :pointer :count #.(cffi:foreign-enum-value 'NavLayer :COUNT))
	(NavRectRel :pointer :count #.(cffi:foreign-enum-value 'NavLayer :COUNT))
	(MemoryCompacted :pointer)
	(MemoryDrawListIdxCapacity :int)
	(MemoryDrawListVtxCapacity :int)
	(GetID :pointer)
	(GetID :pointer)
	(GetID :pointer)
	(GetID :pointer)
	(GetIDNoKeepAlive :pointer)
	(GetIDNoKeepAlive :pointer)
	(GetIDNoKeepAlive :pointer)
	(GetIDNoKeepAlive :pointer)
	(GetIDFromRectangle :pointer)
	(Rect :pointer)
	(CalcFontSize :pointer)
	(TitleBarHeight :pointer)
	(TitleBarRect :pointer)
	(MenuBarHeight :pointer)
	(MenuBarRect :pointer))

(cffi:defcstruct LastItemDataBackup
	(LastItemId :unsigned-int)
	(LastItemStatusFlags :int)
	(LastItemRect ImRect)
	(LastItemDisplayRect ImRect)
	(Backup :pointer)
	(Restore :pointer))

(cffi:defcenum TabBarFlagsPrivate_
	(:DockNode #.(cl:ash 1 20))
	(:IsFocused #.(cl:ash 1 21))
	(:SaveSettings #.(cl:ash 1 22)))

(cffi:defcenum TabItemFlagsPrivate_
	(:NoCloseButton #.(cl:ash 1 20)))

(cffi:defcstruct TabItem
	(ID :unsigned-int)
	(Flags :int)
	(LastFrameVisible :int)
	(LastFrameSelected :int)
	(Offset :float)
	(Width :float)
	(ContentWidth :float)
	(NameOffset :short)
	(WantClose :pointer))

(cffi:defcstruct TabBar
	(Tabs :pointer)
	(ID :unsigned-int)
	(SelectedTabId :unsigned-int)
	(NextSelectedTabId :unsigned-int)
	(VisibleTabId :unsigned-int)
	(CurrFrameVisible :int)
	(PrevFrameVisible :int)
	(BarRect ImRect)
	(LastTabContentHeight :float)
	(OffsetMax :float)
	(OffsetMaxIdeal :float)
	(OffsetNextTab :float)
	(ScrollingAnim :float)
	(ScrollingTarget :float)
	(ScrollingTargetDistToVisibility :float)
	(ScrollingSpeed :float)
	(Flags :int)
	(ReorderRequestTabId :unsigned-int)
	(ReorderRequestDir :char)
	(WantLayout :pointer)
	(VisibleTabWasSubmitted :pointer)
	(LastTabItemIdx :short)
	(FramePadding ImVec2)
	(TabsNames TextBuffer)
	(GetTabOrder :pointer)
	(GetTabName :pointer))

(cffi:defcfun ("_wrap_GetCurrentWindowRead" GetCurrentWindowRead) :pointer)

(cffi:defcfun ("_wrap_GetCurrentWindow" GetCurrentWindow) :pointer)

(cffi:defcfun ("_wrap_FindWindowByID" FindWindowByID) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_FindWindowByName" FindWindowByName) :pointer
  (name :string))

(cffi:defcfun ("_wrap_UpdateWindowParentAndRootLinks" UpdateWindowParentAndRootLinks) :void
  (window :pointer)
  (flags :int)
  (parent_window :pointer))

(cffi:defcfun ("_wrap_CalcWindowExpectedSize" CalcWindowExpectedSize) ImVec2
  (window :pointer))

(cffi:defcfun ("_wrap_IsWindowChildOf" IsWindowChildOf) :pointer
  (window :pointer)
  (potential_parent :pointer))

(cffi:defcfun ("_wrap_IsWindowNavFocusable" IsWindowNavFocusable) :pointer
  (window :pointer))

(cffi:defcfun ("_wrap_GetWindowAllowedExtentRect" GetWindowAllowedExtentRect) ImRect
  (window :pointer))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_4" SetWindowPos) :void
  (window :pointer)
  (pos :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowPos__SWIG_5" SetWindowPos) :void
  (window :pointer)
  (pos :pointer))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_4" SetWindowSize) :void
  (window :pointer)
  (size :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowSize__SWIG_5" SetWindowSize) :void
  (window :pointer)
  (size :pointer))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_4" SetWindowCollapsed) :void
  (window :pointer)
  (collapsed :pointer)
  (cond :int))

(cffi:defcfun ("_wrap_SetWindowCollapsed__SWIG_5" SetWindowCollapsed) :void
  (window :pointer)
  (collapsed :pointer))

(cffi:defcfun ("_wrap_SetWindowHitTestHole" SetWindowHitTestHole) :void
  (window :pointer)
  (pos :pointer)
  (size :pointer))

(cffi:defcfun ("_wrap_FocusWindow" FocusWindow) :void
  (window :pointer))

(cffi:defcfun ("_wrap_FocusTopMostWindowUnderOne" FocusTopMostWindowUnderOne) :void
  (under_this_window :pointer)
  (ignore_window :pointer))

(cffi:defcfun ("_wrap_BringWindowToFocusFront" BringWindowToFocusFront) :void
  (window :pointer))

(cffi:defcfun ("_wrap_BringWindowToDisplayFront" BringWindowToDisplayFront) :void
  (window :pointer))

(cffi:defcfun ("_wrap_BringWindowToDisplayBack" BringWindowToDisplayBack) :void
  (window :pointer))

(cffi:defcfun ("_wrap_SetCurrentFont" SetCurrentFont) :void
  (font :pointer))

(cffi:defcfun ("_wrap_GetDefaultFont" GetDefaultFont) :pointer)

(cffi:defcfun ("_wrap_GetForegroundDrawList__SWIG_1" GetForegroundDrawList) :pointer
  (window :pointer))

(cffi:defcfun ("_wrap_Initialize" Initialize) :void
  (context :pointer))

(cffi:defcfun ("_wrap_Shutdown" Shutdown) :void
  (context :pointer))

(cffi:defcfun ("_wrap_UpdateHoveredWindowAndCaptureFlags" UpdateHoveredWindowAndCaptureFlags) :void)

(cffi:defcfun ("_wrap_StartMouseMovingWindow" StartMouseMovingWindow) :void
  (window :pointer))

(cffi:defcfun ("_wrap_UpdateMouseMovingWindowNewFrame" UpdateMouseMovingWindowNewFrame) :void)

(cffi:defcfun ("_wrap_UpdateMouseMovingWindowEndFrame" UpdateMouseMovingWindowEndFrame) :void)

(cffi:defcfun ("_wrap_MarkIniSettingsDirty__SWIG_0" MarkIniSettingsDirty) :void)

(cffi:defcfun ("_wrap_MarkIniSettingsDirty__SWIG_1" MarkIniSettingsDirty) :void
  (window :pointer))

(cffi:defcfun ("_wrap_ClearIniSettings" ClearIniSettings) :void)

(cffi:defcfun ("_wrap_CreateNewWindowSettings" CreateNewWindowSettings) :pointer
  (name :string))

(cffi:defcfun ("_wrap_FindWindowSettings" FindWindowSettings) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_FindOrCreateWindowSettings" FindOrCreateWindowSettings) :pointer
  (name :string))

(cffi:defcfun ("_wrap_FindSettingsHandler" FindSettingsHandler) :pointer
  (type_name :string))

(cffi:defcfun ("_wrap_SetNextWindowScroll" SetNextWindowScroll) :void
  (scroll :pointer))

(cffi:defcfun ("_wrap_SetScrollX__SWIG_1" SetScrollX) :void
  (window :pointer)
  (new_scroll_x :float))

(cffi:defcfun ("_wrap_SetScrollY__SWIG_1" SetScrollY) :void
  (window :pointer)
  (new_scroll_y :float))

(cffi:defcfun ("_wrap_SetScrollFromPosX__SWIG_2" SetScrollFromPosX) :void
  (window :pointer)
  (local_x :float)
  (center_x_ratio :float))

(cffi:defcfun ("_wrap_SetScrollFromPosX__SWIG_3" SetScrollFromPosX) :void
  (window :pointer)
  (local_x :float))

(cffi:defcfun ("_wrap_SetScrollFromPosY__SWIG_2" SetScrollFromPosY) :void
  (window :pointer)
  (local_y :float)
  (center_y_ratio :float))

(cffi:defcfun ("_wrap_SetScrollFromPosY__SWIG_3" SetScrollFromPosY) :void
  (window :pointer)
  (local_y :float))

(cffi:defcfun ("_wrap_ScrollToBringRectIntoView" ScrollToBringRectIntoView) ImVec2
  (window :pointer)
  (item_rect :pointer))

(cffi:defcfun ("_wrap_GetItemID" GetItemID) :unsigned-int)

(cffi:defcfun ("_wrap_GetItemStatusFlags" GetItemStatusFlags) :int)

(cffi:defcfun ("_wrap_GetActiveID" GetActiveID) :unsigned-int)

(cffi:defcfun ("_wrap_GetFocusID" GetFocusID) :unsigned-int)

(cffi:defcfun ("_wrap_SetActiveID" SetActiveID) :void
  (id :unsigned-int)
  (window :pointer))

(cffi:defcfun ("_wrap_SetFocusID" SetFocusID) :void
  (id :unsigned-int)
  (window :pointer))

(cffi:defcfun ("_wrap_ClearActiveID" ClearActiveID) :void)

(cffi:defcfun ("_wrap_GetHoveredID" GetHoveredID) :unsigned-int)

(cffi:defcfun ("_wrap_SetHoveredID" SetHoveredID) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_KeepAliveID" KeepAliveID) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_MarkItemEdited" MarkItemEdited) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_PushOverrideID" PushOverrideID) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_ItemSize__SWIG_0" ItemSize) :void
  (size :pointer)
  (text_baseline_y :float))

(cffi:defcfun ("_wrap_ItemSize__SWIG_1" ItemSize) :void
  (size :pointer))

(cffi:defcfun ("_wrap_ItemSize__SWIG_2" ItemSize) :void
  (bb :pointer)
  (text_baseline_y :float))

(cffi:defcfun ("_wrap_ItemSize__SWIG_3" ItemSize) :void
  (bb :pointer))

(cffi:defcfun ("_wrap_ItemAdd__SWIG_0" ItemAdd) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (nav_bb :pointer))

(cffi:defcfun ("_wrap_ItemAdd__SWIG_1" ItemAdd) :pointer
  (bb :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_ItemHoverable" ItemHoverable) :pointer
  (bb :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_IsClippedEx" IsClippedEx) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (clip_even_when_logged :pointer))

(cffi:defcfun ("_wrap_SetLastItemData" SetLastItemData) :void
  (window :pointer)
  (item_id :unsigned-int)
  (status_flags :int)
  (item_rect :pointer))

(cffi:defcfun ("_wrap_FocusableItemRegister" FocusableItemRegister) :pointer
  (window :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_FocusableItemUnregister" FocusableItemUnregister) :void
  (window :pointer))

(cffi:defcfun ("_wrap_CalcItemSize" CalcItemSize) ImVec2
  (size ImVec2)
  (default_w :float)
  (default_h :float))

(cffi:defcfun ("_wrap_CalcWrapWidthForPos" CalcWrapWidthForPos) :float
  (pos :pointer)
  (wrap_pos_x :float))

(cffi:defcfun ("_wrap_PushMultiItemsWidths" PushMultiItemsWidths) :void
  (components :int)
  (width_full :float))

(cffi:defcfun ("_wrap_PushItemFlag" PushItemFlag) :void
  (option :int)
  (enabled :pointer))

(cffi:defcfun ("_wrap_PopItemFlag" PopItemFlag) :void)

(cffi:defcfun ("_wrap_IsItemToggledSelection" IsItemToggledSelection) :pointer)

(cffi:defcfun ("_wrap_GetContentRegionMaxAbs" GetContentRegionMaxAbs) ImVec2)

(cffi:defcfun ("_wrap_ShrinkWidths" ShrinkWidths) :void
  (items :pointer)
  (count :int)
  (width_excess :float))

(cffi:defcfun ("_wrap_LogBegin" LogBegin) :void
  (type LogType)
  (auto_open_depth :int))

(cffi:defcfun ("_wrap_LogToBuffer__SWIG_0" LogToBuffer) :void
  (auto_open_depth :int))

(cffi:defcfun ("_wrap_LogToBuffer__SWIG_1" LogToBuffer) :void)

(cffi:defcfun ("_wrap_BeginChildEx" BeginChildEx) :pointer
  (name :string)
  (id :unsigned-int)
  (size_arg :pointer)
  (border :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_OpenPopupEx__SWIG_0" OpenPopupEx) :void
  (id :unsigned-int)
  (popup_flags :int))

(cffi:defcfun ("_wrap_OpenPopupEx__SWIG_1" OpenPopupEx) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_ClosePopupToLevel" ClosePopupToLevel) :void
  (remaining :int)
  (restore_focus_to_window_under_popup :pointer))

(cffi:defcfun ("_wrap_ClosePopupsOverWindow" ClosePopupsOverWindow) :void
  (ref_window :pointer)
  (restore_focus_to_window_under_popup :pointer))

(cffi:defcfun ("_wrap_IsPopupOpen__SWIG_2" IsPopupOpen) :pointer
  (id :unsigned-int)
  (popup_flags :int))

(cffi:defcfun ("_wrap_BeginPopupEx" BeginPopupEx) :pointer
  (id :unsigned-int)
  (extra_flags :int))

(cffi:defcfun ("_wrap_BeginTooltipEx" BeginTooltipEx) :void
  (extra_flags :int)
  (tooltip_flags :int))

(cffi:defcfun ("_wrap_GetTopMostPopupModal" GetTopMostPopupModal) :pointer)

(cffi:defcfun ("_wrap_FindBestWindowPosForPopup" FindBestWindowPosForPopup) ImVec2
  (window :pointer))

(cffi:defcfun ("_wrap_FindBestWindowPosForPopupEx__SWIG_0" FindBestWindowPosForPopupEx) ImVec2
  (ref_pos :pointer)
  (size :pointer)
  (last_dir :pointer)
  (r_outer :pointer)
  (r_avoid :pointer)
  (policy PopupPositionPolicy))

(cffi:defcfun ("_wrap_FindBestWindowPosForPopupEx__SWIG_1" FindBestWindowPosForPopupEx) ImVec2
  (ref_pos :pointer)
  (size :pointer)
  (last_dir :pointer)
  (r_outer :pointer)
  (r_avoid :pointer))

(cffi:defcfun ("_wrap_NavInitWindow" NavInitWindow) :void
  (window :pointer)
  (force_reinit :pointer))

(cffi:defcfun ("_wrap_NavMoveRequestButNoResultYet" NavMoveRequestButNoResultYet) :pointer)

(cffi:defcfun ("_wrap_NavMoveRequestCancel" NavMoveRequestCancel) :void)

(cffi:defcfun ("_wrap_NavMoveRequestForward" NavMoveRequestForward) :void
  (move_dir :int)
  (clip_dir :int)
  (bb_rel :pointer)
  (move_flags :int))

(cffi:defcfun ("_wrap_NavMoveRequestTryWrapping" NavMoveRequestTryWrapping) :void
  (window :pointer)
  (move_flags :int))

(cffi:defcfun ("_wrap_GetNavInputAmount" GetNavInputAmount) :float
  (n :int)
  (mode InputReadMode))

(cffi:defcfun ("_wrap_GetNavInputAmount2d__SWIG_0" GetNavInputAmount2d) ImVec2
  (dir_sources :int)
  (mode InputReadMode)
  (slow_factor :float)
  (fast_factor :float))

(cffi:defcfun ("_wrap_GetNavInputAmount2d__SWIG_1" GetNavInputAmount2d) ImVec2
  (dir_sources :int)
  (mode InputReadMode)
  (slow_factor :float))

(cffi:defcfun ("_wrap_GetNavInputAmount2d__SWIG_2" GetNavInputAmount2d) ImVec2
  (dir_sources :int)
  (mode InputReadMode))

(cffi:defcfun ("_wrap_CalcTypematicRepeatAmount" CalcTypematicRepeatAmount) :int
  (t0 :float)
  (t1 :float)
  (repeat_delay :float)
  (repeat_rate :float))

(cffi:defcfun ("_wrap_ActivateItem" ActivateItem) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_SetNavID" SetNavID) :void
  (id :unsigned-int)
  (nav_layer :int)
  (focus_scope_id :unsigned-int))

(cffi:defcfun ("_wrap_SetNavIDWithRectRel" SetNavIDWithRectRel) :void
  (id :unsigned-int)
  (nav_layer :int)
  (focus_scope_id :unsigned-int)
  (rect_rel :pointer))

(cffi:defcfun ("_wrap_PushFocusScope" PushFocusScope) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_PopFocusScope" PopFocusScope) :void)

(cffi:defcfun ("_wrap_GetFocusScopeID" GetFocusScopeID) :unsigned-int)

(cffi:defcfun ("_wrap_IsActiveIdUsingNavDir" IsActiveIdUsingNavDir) :pointer
  (dir :int))

(cffi:defcfun ("_wrap_IsActiveIdUsingNavInput" IsActiveIdUsingNavInput) :pointer
  (input :int))

(cffi:defcfun ("_wrap_IsActiveIdUsingKey" IsActiveIdUsingKey) :pointer
  (key :int))

(cffi:defcfun ("_wrap_IsMouseDragPastThreshold__SWIG_0" IsMouseDragPastThreshold) :pointer
  (button :int)
  (lock_threshold :float))

(cffi:defcfun ("_wrap_IsMouseDragPastThreshold__SWIG_1" IsMouseDragPastThreshold) :pointer
  (button :int))

(cffi:defcfun ("_wrap_IsKeyPressedMap__SWIG_0" IsKeyPressedMap) :pointer
  (key :int)
  (repeat :pointer))

(cffi:defcfun ("_wrap_IsKeyPressedMap__SWIG_1" IsKeyPressedMap) :pointer
  (key :int))

(cffi:defcfun ("_wrap_IsNavInputDown" IsNavInputDown) :pointer
  (n :int))

(cffi:defcfun ("_wrap_IsNavInputTest" IsNavInputTest) :pointer
  (n :int)
  (rm InputReadMode))

(cffi:defcfun ("_wrap_GetMergedKeyModFlags" GetMergedKeyModFlags) :int)

(cffi:defcfun ("_wrap_BeginDragDropTargetCustom" BeginDragDropTargetCustom) :pointer
  (bb :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_ClearDragDrop" ClearDragDrop) :void)

(cffi:defcfun ("_wrap_IsDragDropPayloadBeingAccepted" IsDragDropPayloadBeingAccepted) :pointer)

(cffi:defcfun ("_wrap_SetWindowClipRectBeforeSetChannel" SetWindowClipRectBeforeSetChannel) :void
  (window :pointer)
  (clip_rect :pointer))

(cffi:defcfun ("_wrap_BeginColumns__SWIG_0" BeginColumns) :void
  (str_id :string)
  (count :int)
  (flags :int))

(cffi:defcfun ("_wrap_BeginColumns__SWIG_1" BeginColumns) :void
  (str_id :string)
  (count :int))

(cffi:defcfun ("_wrap_EndColumns" EndColumns) :void)

(cffi:defcfun ("_wrap_PushColumnClipRect" PushColumnClipRect) :void
  (column_index :int))

(cffi:defcfun ("_wrap_PushColumnsBackground" PushColumnsBackground) :void)

(cffi:defcfun ("_wrap_PopColumnsBackground" PopColumnsBackground) :void)

(cffi:defcfun ("_wrap_GetColumnsID" GetColumnsID) :unsigned-int
  (str_id :string)
  (count :int))

(cffi:defcfun ("_wrap_FindOrCreateColumns" FindOrCreateColumns) :pointer
  (window :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_GetColumnOffsetFromNorm" GetColumnOffsetFromNorm) :float
  (columns :pointer)
  (offset_norm :float))

(cffi:defcfun ("_wrap_GetColumnNormFromOffset" GetColumnNormFromOffset) :float
  (columns :pointer)
  (offset :float))

(cffi:defcfun ("_wrap_BeginTabBarEx" BeginTabBarEx) :pointer
  (tab_bar :pointer)
  (bb :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_TabBarFindTabByID" TabBarFindTabByID) :pointer
  (tab_bar :pointer)
  (tab_id :unsigned-int))

(cffi:defcfun ("_wrap_TabBarRemoveTab" TabBarRemoveTab) :void
  (tab_bar :pointer)
  (tab_id :unsigned-int))

(cffi:defcfun ("_wrap_TabBarCloseTab" TabBarCloseTab) :void
  (tab_bar :pointer)
  (tab :pointer))

(cffi:defcfun ("_wrap_TabBarQueueReorder" TabBarQueueReorder) :void
  (tab_bar :pointer)
  (tab :pointer)
  (dir :int))

(cffi:defcfun ("_wrap_TabItemEx" TabItemEx) :pointer
  (tab_bar :pointer)
  (label :string)
  (p_open :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_TabItemCalcSize" TabItemCalcSize) ImVec2
  (label :string)
  (has_close_button :pointer))

(cffi:defcfun ("_wrap_TabItemBackground" TabItemBackground) :void
  (draw_list :pointer)
  (bb :pointer)
  (flags :int)
  (col :unsigned-int))

(cffi:defcfun ("_wrap_TabItemLabelAndCloseButton" TabItemLabelAndCloseButton) :pointer
  (draw_list :pointer)
  (bb :pointer)
  (flags :int)
  (frame_padding ImVec2)
  (label :string)
  (tab_id :unsigned-int)
  (close_button_id :unsigned-int)
  (is_contents_visible :pointer))

(cffi:defcfun ("_wrap_RenderText__SWIG_0" RenderText) :void
  (pos ImVec2)
  (text :string)
  (text_end :string)
  (hide_text_after_hash :pointer))

(cffi:defcfun ("_wrap_RenderText__SWIG_1" RenderText) :void
  (pos ImVec2)
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_RenderText__SWIG_2" RenderText) :void
  (pos ImVec2)
  (text :string))

(cffi:defcfun ("_wrap_RenderTextWrapped" RenderTextWrapped) :void
  (pos ImVec2)
  (text :string)
  (text_end :string)
  (wrap_width :float))

(cffi:defcfun ("_wrap_RenderTextClipped__SWIG_0" RenderTextClipped) :void
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer)
  (align :pointer)
  (clip_rect :pointer))

(cffi:defcfun ("_wrap_RenderTextClipped__SWIG_1" RenderTextClipped) :void
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer)
  (align :pointer))

(cffi:defcfun ("_wrap_RenderTextClipped__SWIG_2" RenderTextClipped) :void
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer))

(cffi:defcfun ("_wrap_RenderTextClippedEx__SWIG_0" RenderTextClippedEx) :void
  (draw_list :pointer)
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer)
  (align :pointer)
  (clip_rect :pointer))

(cffi:defcfun ("_wrap_RenderTextClippedEx__SWIG_1" RenderTextClippedEx) :void
  (draw_list :pointer)
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer)
  (align :pointer))

(cffi:defcfun ("_wrap_RenderTextClippedEx__SWIG_2" RenderTextClippedEx) :void
  (draw_list :pointer)
  (pos_min :pointer)
  (pos_max :pointer)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer))

(cffi:defcfun ("_wrap_RenderTextEllipsis" RenderTextEllipsis) :void
  (draw_list :pointer)
  (pos_min :pointer)
  (pos_max :pointer)
  (clip_max_x :float)
  (ellipsis_max_x :float)
  (text :string)
  (text_end :string)
  (text_size_if_known :pointer))

(cffi:defcfun ("_wrap_RenderFrame__SWIG_0" RenderFrame) :void
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int)
  (border :pointer)
  (rounding :float))

(cffi:defcfun ("_wrap_RenderFrame__SWIG_1" RenderFrame) :void
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int)
  (border :pointer))

(cffi:defcfun ("_wrap_RenderFrame__SWIG_2" RenderFrame) :void
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int))

(cffi:defcfun ("_wrap_RenderFrameBorder__SWIG_0" RenderFrameBorder) :void
  (p_min ImVec2)
  (p_max ImVec2)
  (rounding :float))

(cffi:defcfun ("_wrap_RenderFrameBorder__SWIG_1" RenderFrameBorder) :void
  (p_min ImVec2)
  (p_max ImVec2))

(cffi:defcfun ("_wrap_RenderColorRectWithAlphaCheckerboard__SWIG_0" RenderColorRectWithAlphaCheckerboard) :void
  (draw_list :pointer)
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int)
  (grid_step :float)
  (grid_off ImVec2)
  (rounding :float)
  (rounding_corners_flags :int))

(cffi:defcfun ("_wrap_RenderColorRectWithAlphaCheckerboard__SWIG_1" RenderColorRectWithAlphaCheckerboard) :void
  (draw_list :pointer)
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int)
  (grid_step :float)
  (grid_off ImVec2)
  (rounding :float))

(cffi:defcfun ("_wrap_RenderColorRectWithAlphaCheckerboard__SWIG_2" RenderColorRectWithAlphaCheckerboard) :void
  (draw_list :pointer)
  (p_min ImVec2)
  (p_max ImVec2)
  (fill_col :unsigned-int)
  (grid_step :float)
  (grid_off ImVec2))

(cffi:defcfun ("_wrap_RenderNavHighlight__SWIG_0" RenderNavHighlight) :void
  (bb :pointer)
  (id :unsigned-int)
  (flags :int))

(cffi:defcfun ("_wrap_RenderNavHighlight__SWIG_1" RenderNavHighlight) :void
  (bb :pointer)
  (id :unsigned-int))

(cffi:defcfun ("_wrap_FindRenderedTextEnd__SWIG_0" FindRenderedTextEnd) :string
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_FindRenderedTextEnd__SWIG_1" FindRenderedTextEnd) :string
  (text :string))

(cffi:defcfun ("_wrap_LogRenderedText__SWIG_0" LogRenderedText) :void
  (ref_pos :pointer)
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_LogRenderedText__SWIG_1" LogRenderedText) :void
  (ref_pos :pointer)
  (text :string))

(cffi:defcfun ("_wrap_RenderArrow__SWIG_0" RenderArrow) :void
  (draw_list :pointer)
  (pos ImVec2)
  (col :unsigned-int)
  (dir :int)
  (scale :float))

(cffi:defcfun ("_wrap_RenderArrow__SWIG_1" RenderArrow) :void
  (draw_list :pointer)
  (pos ImVec2)
  (col :unsigned-int)
  (dir :int))

(cffi:defcfun ("_wrap_RenderBullet__SWIG_0" RenderBullet) :void
  (draw_list :pointer)
  (pos ImVec2)
  (col :unsigned-int))

(cffi:defcfun ("_wrap_RenderCheckMark" RenderCheckMark) :void
  (draw_list :pointer)
  (pos ImVec2)
  (col :unsigned-int)
  (sz :float))

(cffi:defcfun ("_wrap_RenderMouseCursor" RenderMouseCursor) :void
  (draw_list :pointer)
  (pos ImVec2)
  (scale :float)
  (mouse_cursor :int)
  (col_fill :unsigned-int)
  (col_border :unsigned-int)
  (col_shadow :unsigned-int))

(cffi:defcfun ("_wrap_RenderArrowPointingAt" RenderArrowPointingAt) :void
  (draw_list :pointer)
  (pos ImVec2)
  (half_sz ImVec2)
  (direction :int)
  (col :unsigned-int))

(cffi:defcfun ("_wrap_RenderRectFilledRangeH" RenderRectFilledRangeH) :void
  (draw_list :pointer)
  (rect :pointer)
  (col :unsigned-int)
  (x_start_norm :float)
  (x_end_norm :float)
  (rounding :float))

(cffi:defcfun ("_wrap_RenderRectFilledWithHole" RenderRectFilledWithHole) :void
  (draw_list :pointer)
  (outer ImRect)
  (inner ImRect)
  (col :unsigned-int)
  (rounding :float))

(cffi:defcfun ("_wrap_RenderArrow__SWIG_2" RenderArrow) :void
  (pos ImVec2)
  (dir :int)
  (scale :float))

(cffi:defcfun ("_wrap_RenderArrow__SWIG_3" RenderArrow) :void
  (pos ImVec2)
  (dir :int))

(cffi:defcfun ("_wrap_RenderBullet__SWIG_1" RenderBullet) :void
  (pos ImVec2))

(cffi:defcfun ("_wrap_TextEx__SWIG_0" TextEx) :void
  (text :string)
  (text_end :string)
  (flags :int))

(cffi:defcfun ("_wrap_TextEx__SWIG_1" TextEx) :void
  (text :string)
  (text_end :string))

(cffi:defcfun ("_wrap_TextEx__SWIG_2" TextEx) :void
  (text :string))

(cffi:defcfun ("_wrap_ButtonEx__SWIG_0" ButtonEx) :pointer
  (label :string)
  (size_arg :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ButtonEx__SWIG_1" ButtonEx) :pointer
  (label :string)
  (size_arg :pointer))

(cffi:defcfun ("_wrap_ButtonEx__SWIG_2" ButtonEx) :pointer
  (label :string))

(cffi:defcfun ("_wrap_CloseButton" CloseButton) :pointer
  (id :unsigned-int)
  (pos :pointer))

(cffi:defcfun ("_wrap_CollapseButton" CollapseButton) :pointer
  (id :unsigned-int)
  (pos :pointer))

(cffi:defcfun ("_wrap_ArrowButtonEx__SWIG_0" ArrowButtonEx) :pointer
  (str_id :string)
  (dir :int)
  (size_arg ImVec2)
  (flags :int))

(cffi:defcfun ("_wrap_ArrowButtonEx__SWIG_1" ArrowButtonEx) :pointer
  (str_id :string)
  (dir :int)
  (size_arg ImVec2))

(cffi:defcfun ("_wrap_Scrollbar" Scrollbar) :void
  (axis Axis))

(cffi:defcfun ("_wrap_ScrollbarEx" ScrollbarEx) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (axis Axis)
  (p_scroll_v :pointer)
  (avail_v :float)
  (contents_v :float)
  (rounding_corners :int))

(cffi:defcfun ("_wrap_ImageButtonEx" ImageButtonEx) :pointer
  (id :unsigned-int)
  (texture_id :pointer)
  (size :pointer)
  (uv0 :pointer)
  (uv1 :pointer)
  (padding :pointer)
  (bg_col :pointer)
  (tint_col :pointer))

(cffi:defcfun ("_wrap_GetWindowScrollbarRect" GetWindowScrollbarRect) ImRect
  (window :pointer)
  (axis Axis))

(cffi:defcfun ("_wrap_GetWindowScrollbarID" GetWindowScrollbarID) :unsigned-int
  (window :pointer)
  (axis Axis))

(cffi:defcfun ("_wrap_GetWindowResizeID" GetWindowResizeID) :unsigned-int
  (window :pointer)
  (n :int))

(cffi:defcfun ("_wrap_SeparatorEx" SeparatorEx) :void
  (flags :int))

(cffi:defcfun ("_wrap_ButtonBehavior__SWIG_0" ButtonBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (out_hovered :pointer)
  (out_held :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ButtonBehavior__SWIG_1" ButtonBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (out_hovered :pointer)
  (out_held :pointer))

(cffi:defcfun ("_wrap_DragBehavior" DragBehavior) :pointer
  (id :unsigned-int)
  (data_type :int)
  (p_v :pointer)
  (v_speed :float)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int))

(cffi:defcfun ("_wrap_SliderBehavior" SliderBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (data_type :int)
  (p_v :pointer)
  (p_min :pointer)
  (p_max :pointer)
  (format :string)
  (flags :int)
  (out_grab_bb :pointer))

(cffi:defcfun ("_wrap_SplitterBehavior__SWIG_0" SplitterBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (axis Axis)
  (size1 :pointer)
  (size2 :pointer)
  (min_size1 :float)
  (min_size2 :float)
  (hover_extend :float)
  (hover_visibility_delay :float))

(cffi:defcfun ("_wrap_SplitterBehavior__SWIG_1" SplitterBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (axis Axis)
  (size1 :pointer)
  (size2 :pointer)
  (min_size1 :float)
  (min_size2 :float)
  (hover_extend :float))

(cffi:defcfun ("_wrap_SplitterBehavior__SWIG_2" SplitterBehavior) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (axis Axis)
  (size1 :pointer)
  (size2 :pointer)
  (min_size1 :float)
  (min_size2 :float))

(cffi:defcfun ("_wrap_TreeNodeBehavior__SWIG_0" TreeNodeBehavior) :pointer
  (id :unsigned-int)
  (flags :int)
  (label :string)
  (label_end :string))

(cffi:defcfun ("_wrap_TreeNodeBehavior__SWIG_1" TreeNodeBehavior) :pointer
  (id :unsigned-int)
  (flags :int)
  (label :string))

(cffi:defcfun ("_wrap_TreeNodeBehaviorIsOpen__SWIG_0" TreeNodeBehaviorIsOpen) :pointer
  (id :unsigned-int)
  (flags :int))

(cffi:defcfun ("_wrap_TreeNodeBehaviorIsOpen__SWIG_1" TreeNodeBehaviorIsOpen) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_TreePushOverrideID" TreePushOverrideID) :void
  (id :unsigned-int))

(cffi:defcfun ("_wrap_DataTypeGetInfo" DataTypeGetInfo) :pointer
  (data_type :int))

(cffi:defcfun ("_wrap_DataTypeFormatString" DataTypeFormatString) :int
  (buf :string)
  (buf_size :int)
  (data_type :int)
  (p_data :pointer)
  (format :string))

(cffi:defcfun ("_wrap_DataTypeApplyOp" DataTypeApplyOp) :void
  (data_type :int)
  (op :int)
  (output :pointer)
  (arg_1 :pointer)
  (arg_2 :pointer))

(cffi:defcfun ("_wrap_DataTypeApplyOpFromText" DataTypeApplyOpFromText) :pointer
  (buf :string)
  (initial_value_buf :string)
  (data_type :int)
  (p_data :pointer)
  (format :string))

(cffi:defcfun ("_wrap_DataTypeClamp" DataTypeClamp) :pointer
  (data_type :int)
  (p_data :pointer)
  (p_min :pointer)
  (p_max :pointer))

(cffi:defcfun ("_wrap_InputTextEx__SWIG_0" InputTextEx) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :int)
  (size_arg :pointer)
  (flags :int)
  (callback :pointer)
  (user_data :pointer))

(cffi:defcfun ("_wrap_InputTextEx__SWIG_1" InputTextEx) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :int)
  (size_arg :pointer)
  (flags :int)
  (callback :pointer))

(cffi:defcfun ("_wrap_InputTextEx__SWIG_2" InputTextEx) :pointer
  (label :string)
  (hint :string)
  (buf :string)
  (buf_size :int)
  (size_arg :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_TempInputText" TempInputText) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (label :string)
  (buf :string)
  (buf_size :int)
  (flags :int))

(cffi:defcfun ("_wrap_TempInputScalar__SWIG_0" TempInputScalar) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (format :string)
  (p_clamp_min :pointer)
  (p_clamp_max :pointer))

(cffi:defcfun ("_wrap_TempInputScalar__SWIG_1" TempInputScalar) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (format :string)
  (p_clamp_min :pointer))

(cffi:defcfun ("_wrap_TempInputScalar__SWIG_2" TempInputScalar) :pointer
  (bb :pointer)
  (id :unsigned-int)
  (label :string)
  (data_type :int)
  (p_data :pointer)
  (format :string))

(cffi:defcfun ("_wrap_TempInputIsActive" TempInputIsActive) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_GetInputTextState" GetInputTextState) :pointer
  (id :unsigned-int))

(cffi:defcfun ("_wrap_ColorTooltip" ColorTooltip) :void
  (text :string)
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorEditOptionsPopup" ColorEditOptionsPopup) :void
  (col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_ColorPickerOptionsPopup" ColorPickerOptionsPopup) :void
  (ref_col :pointer)
  (flags :int))

(cffi:defcfun ("_wrap_PlotEx" PlotEx) :int
  (plot_type PlotType)
  (label :string)
  (values_getter :pointer)
  (data :pointer)
  (values_count :int)
  (values_offset :int)
  (overlay_text :string)
  (scale_min :float)
  (scale_max :float)
  (frame_size ImVec2))

(cffi:defcfun ("_wrap_ShadeVertsLinearColorGradientKeepAlpha" ShadeVertsLinearColorGradientKeepAlpha) :void
  (draw_list :pointer)
  (vert_start_idx :int)
  (vert_end_idx :int)
  (gradient_p0 ImVec2)
  (gradient_p1 ImVec2)
  (col0 :unsigned-int)
  (col1 :unsigned-int))

(cffi:defcfun ("_wrap_ShadeVertsLinearUV" ShadeVertsLinearUV) :void
  (draw_list :pointer)
  (vert_start_idx :int)
  (vert_end_idx :int)
  (a :pointer)
  (b :pointer)
  (uv_a :pointer)
  (uv_b :pointer)
  (clamp :pointer))

(cffi:defcfun ("_wrap_GcCompactTransientWindowBuffers" GcCompactTransientWindowBuffers) :void
  (window :pointer))

(cffi:defcfun ("_wrap_GcAwakeTransientWindowBuffers" GcAwakeTransientWindowBuffers) :void
  (window :pointer))

(cffi:defcfun ("_wrap_DebugDrawItemRect__SWIG_0" DebugDrawItemRect) :void
  (col :unsigned-int))

(cffi:defcfun ("_wrap_DebugDrawItemRect__SWIG_1" DebugDrawItemRect) :void)

(cffi:defcfun ("_wrap_DebugStartItemPicker" DebugStartItemPicker) :void)

(cffi:defcfun ("_wrap_ImFontAtlasBuildWithStbTruetype" ImFontAtlasBuildWithStbTruetype) :pointer
  (atlas :pointer))

(cffi:defcfun ("_wrap_ImFontAtlasBuildInit" ImFontAtlasBuildInit) :void
  (atlas :pointer))

(cffi:defcfun ("_wrap_ImFontAtlasBuildSetupFont" ImFontAtlasBuildSetupFont) :void
  (atlas :pointer)
  (font :pointer)
  (font_config :pointer)
  (ascent :float)
  (descent :float))

(cffi:defcfun ("_wrap_ImFontAtlasBuildPackCustomRects" ImFontAtlasBuildPackCustomRects) :void
  (atlas :pointer)
  (stbrp_context_opaque :pointer))

(cffi:defcfun ("_wrap_ImFontAtlasBuildFinish" ImFontAtlasBuildFinish) :void
  (atlas :pointer))

(cffi:defcfun ("_wrap_ImFontAtlasBuildRender1bppRectFromString" ImFontAtlasBuildRender1bppRectFromString) :void
  (atlas :pointer)
  (atlas_x :int)
  (atlas_y :int)
  (w :int)
  (h :int)
  (in_str :string)
  (in_marker_char :char)
  (in_marker_pixel_value :unsigned-char))

(cffi:defcfun ("_wrap_ImFontAtlasBuildMultiplyCalcLookupTable" ImFontAtlasBuildMultiplyCalcLookupTable) :void
  (out_table :pointer)
  (in_multiply_factor :float))

(cffi:defcfun ("_wrap_ImFontAtlasBuildMultiplyRectAlpha8" ImFontAtlasBuildMultiplyRectAlpha8) :void
  (table :pointer)
  (pixels :pointer)
  (x :int)
  (y :int)
  (w :int)
  (h :int)
  (stride :int))

(cffi:defctype SDL_Event :pointer)

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_InitForOpenGL" ImplSDL2_InitForOpenGL) :pointer
  (window :pointer)
  (sdl_gl_context :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_InitForVulkan" ImplSDL2_InitForVulkan) :pointer
  (window :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_InitForD3D" ImplSDL2_InitForD3D) :pointer
  (window :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_InitForMetal" ImplSDL2_InitForMetal) :pointer
  (window :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_Shutdown" ImplSDL2_Shutdown) :void)

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_NewFrame" ImplSDL2_NewFrame) :void
  (window :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplSDL2_ProcessEvent" ImplSDL2_ProcessEvent) :pointer
  (event :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_Init__SWIG_0" ImplOpenGL3_InitVersion) :pointer
  (glsl_version :string))

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_Init__SWIG_1" ImplOpenGL3_Init) :pointer)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_Shutdown" ImplOpenGL3_Shutdown) :void)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_NewFrame" ImplOpenGL3_NewFrame) :void)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_RenderDrawData" ImplOpenGL3_RenderDrawData) :void
  (draw_data :pointer))

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_CreateFontsTexture" ImplOpenGL3_CreateFontsTexture) :pointer)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_DestroyFontsTexture" ImplOpenGL3_DestroyFontsTexture) :void)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_CreateDeviceObjects" ImplOpenGL3_CreateDeviceObjects) :pointer)

(cffi:defcfun ("_wrap_ImGui_ImplOpenGL3_DestroyDeviceObjects" ImplOpenGL3_DestroyDeviceObjects) :void)


