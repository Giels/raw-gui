/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCFFI
#define SWIGCFFI
#endif

#include "imgui/imgui.h"
#include "imgui/imgui_internal.h"
#include "SDL.h"
#include "imgui/examples/imgui_impl_opengl3.h"
#include "imgui/examples/imgui_impl_sdl.h"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>

EXPORT ImGuiContext *_wrap_CreateContext__SWIG_0 (ImFontAtlas *larg1) {
  ImGuiContext * lresult = (ImGuiContext *)0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiContext *)ImGui::CreateContext(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiContext *)0;
  }
}


EXPORT ImGuiContext *_wrap_CreateContext__SWIG_1 () {
  ImGuiContext * lresult = (ImGuiContext *)0 ;
  ImGuiContext *result = 0 ;
  
  try {
    result = (ImGuiContext *)ImGui::CreateContext();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiContext *)0;
  }
}


EXPORT void _wrap_DestroyContext__SWIG_0 (ImGuiContext *larg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::DestroyContext(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_DestroyContext__SWIG_1 () {
  try {
    ImGui::DestroyContext();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiContext *_wrap_GetCurrentContext () {
  ImGuiContext * lresult = (ImGuiContext *)0 ;
  ImGuiContext *result = 0 ;
  
  try {
    result = (ImGuiContext *)ImGui::GetCurrentContext();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiContext *)0;
  }
}


EXPORT void _wrap_SetCurrentContext (ImGuiContext *larg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCurrentContext(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImGuiIO *_wrap_GetIO () {
  ImGuiIO * lresult = (ImGuiIO *)0 ;
  ImGuiIO *result = 0 ;
  
  try {
    result = (ImGuiIO *) &ImGui::GetIO();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiIO *)0;
  }
}


EXPORT ImGuiStyle *_wrap_GetStyle () {
  ImGuiStyle * lresult = (ImGuiStyle *)0 ;
  ImGuiStyle *result = 0 ;
  
  try {
    result = (ImGuiStyle *) &ImGui::GetStyle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiStyle *)0;
  }
}


EXPORT void _wrap_NewFrame () {
  try {
    ImGui::NewFrame();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_EndFrame () {
  try {
    ImGui::EndFrame();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Render () {
  try {
    ImGui::Render();
    
  } catch (...) {
    
  }
}


EXPORT ImDrawData *_wrap_GetDrawData () {
  ImDrawData * lresult = (ImDrawData *)0 ;
  ImDrawData *result = 0 ;
  
  try {
    result = (ImDrawData *)ImGui::GetDrawData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawData *)0;
  }
}


EXPORT void _wrap_ShowDemoWindow__SWIG_0 (bool *larg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ShowDemoWindow(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowDemoWindow__SWIG_1 () {
  try {
    ImGui::ShowDemoWindow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowAboutWindow__SWIG_0 (bool *larg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ShowAboutWindow(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowAboutWindow__SWIG_1 () {
  try {
    ImGui::ShowAboutWindow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowMetricsWindow__SWIG_0 (bool *larg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ShowMetricsWindow(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowMetricsWindow__SWIG_1 () {
  try {
    ImGui::ShowMetricsWindow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowStyleEditor__SWIG_0 (ImGuiStyle *larg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ShowStyleEditor(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowStyleEditor__SWIG_1 () {
  try {
    ImGui::ShowStyleEditor();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ShowStyleSelector (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::ShowStyleSelector((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ShowFontSelector (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ShowFontSelector((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShowUserGuide () {
  try {
    ImGui::ShowUserGuide();
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_GetVersion () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)ImGui::GetVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_StyleColorsDark__SWIG_0 (ImGuiStyle *larg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::StyleColorsDark(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StyleColorsDark__SWIG_1 () {
  try {
    ImGui::StyleColorsDark();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StyleColorsClassic__SWIG_0 (ImGuiStyle *larg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::StyleColorsClassic(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StyleColorsClassic__SWIG_1 () {
  try {
    ImGui::StyleColorsClassic();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StyleColorsLight__SWIG_0 (ImGuiStyle *larg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::StyleColorsLight(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StyleColorsLight__SWIG_1 () {
  try {
    ImGui::StyleColorsLight();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Begin__SWIG_0 (char *larg1, bool *larg2, ImGuiWindowFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Begin__SWIG_1 (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::Begin((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Begin__SWIG_2 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::Begin((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_End () {
  try {
    ImGui::End();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginChild__SWIG_0 (char *larg1, ImVec2 *larg2, int larg3, ImGuiWindowFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_1 (char *larg1, ImVec2 *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_2 (char *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_3 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginChild((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_4 (ImGuiID larg1, ImVec2 *larg2, int larg3, ImGuiWindowFlags larg4) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_5 (ImGuiID larg1, ImVec2 *larg2, int larg3) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_6 (ImGuiID larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChild__SWIG_7 (ImGuiID larg1) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginChild(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndChild () {
  try {
    ImGui::EndChild();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsWindowAppearing () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsWindowAppearing();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowCollapsed () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsWindowCollapsed();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowFocused__SWIG_0 (ImGuiFocusedFlags larg1) {
  int lresult = (int)0 ;
  ImGuiFocusedFlags arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsWindowFocused(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowFocused__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsWindowFocused();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowHovered__SWIG_0 (ImGuiHoveredFlags larg1) {
  int lresult = (int)0 ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsWindowHovered(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowHovered__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsWindowHovered();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImDrawList *_wrap_GetWindowDrawList () {
  ImDrawList * lresult = (ImDrawList *)0 ;
  ImDrawList *result = 0 ;
  
  try {
    result = (ImDrawList *)ImGui::GetWindowDrawList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawList *)0;
  }
}


EXPORT ImVec2 *_wrap_GetWindowPos () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetWindowPos();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetWindowSize () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetWindowSize();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT float _wrap_GetWindowWidth () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetWindowWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetWindowHeight () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetWindowHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_SetNextWindowPos__SWIG_0 (ImVec2 *larg1, ImGuiCond larg2, ImVec2 *larg3) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2,(ImVec2 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowPos__SWIG_1 (ImVec2 *larg1, ImGuiCond larg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowPos__SWIG_2 (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextWindowPos((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowSize__SWIG_0 (ImVec2 *larg1, ImGuiCond larg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowSize__SWIG_1 (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextWindowSize((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowSizeConstraints__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, ImGuiSizeCallback larg3, void *larg4) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowSizeConstraints__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2, ImGuiSizeCallback larg3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowSizeConstraints__SWIG_2 (ImVec2 *larg1, ImVec2 *larg2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowContentSize (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowCollapsed__SWIG_0 (int larg1, ImGuiCond larg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = (bool)larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextWindowCollapsed(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowCollapsed__SWIG_1 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::SetNextWindowCollapsed(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowFocus () {
  try {
    ImGui::SetNextWindowFocus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextWindowBgAlpha (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextWindowBgAlpha(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_0 (ImVec2 *larg1, ImGuiCond larg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_1 (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetWindowPos((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_0 (ImVec2 *larg1, ImGuiCond larg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_1 (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetWindowSize((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_0 (int larg1, ImGuiCond larg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = (bool)larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowCollapsed(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_1 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::SetWindowCollapsed(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowFocus__SWIG_0 () {
  try {
    ImGui::SetWindowFocus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowFontScale (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetWindowFontScale(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_2 (char *larg1, ImVec2 *larg2, ImGuiCond larg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_3 (char *larg1, ImVec2 *larg2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_2 (char *larg1, ImVec2 *larg2, ImGuiCond larg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_3 (char *larg1, ImVec2 *larg2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_2 (char *larg1, int larg2, ImGuiCond larg3) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_3 (char *larg1, int larg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::SetWindowCollapsed((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowFocus__SWIG_1 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetWindowFocus((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_GetContentRegionMax () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetContentRegionMax();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetContentRegionAvail () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetContentRegionAvail();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetWindowContentRegionMin () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetWindowContentRegionMin();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetWindowContentRegionMax () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetWindowContentRegionMax();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT float _wrap_GetWindowContentRegionWidth () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetWindowContentRegionWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetScrollX () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetScrollX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetScrollY () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetScrollY();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetScrollMaxX () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetScrollMaxX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetScrollMaxY () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetScrollMaxY();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_SetScrollX__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollX(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollY__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollY(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollHereX__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollHereX(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollHereX__SWIG_1 () {
  try {
    ImGui::SetScrollHereX();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollHereY__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollHereY(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollHereY__SWIG_1 () {
  try {
    ImGui::SetScrollHereY();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosX__SWIG_0 (float larg1, float larg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollFromPosX(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosX__SWIG_1 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollFromPosX(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosY__SWIG_0 (float larg1, float larg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollFromPosY(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosY__SWIG_1 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollFromPosY(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushFont (ImFont *larg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::PushFont(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopFont () {
  try {
    ImGui::PopFont();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushStyleColor__SWIG_0 (ImGuiCol larg1, ImU32 larg2) {
  ImGuiCol arg1 ;
  ImU32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushStyleColor(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushStyleColor__SWIG_1 (ImGuiCol larg1, ImVec4 *larg2) {
  ImGuiCol arg1 ;
  ImVec4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopStyleColor__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PopStyleColor(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopStyleColor__SWIG_1 () {
  try {
    ImGui::PopStyleColor();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushStyleVar__SWIG_0 (ImGuiStyleVar larg1, float larg2) {
  ImGuiStyleVar arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushStyleVar(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushStyleVar__SWIG_1 (ImGuiStyleVar larg1, ImVec2 *larg2) {
  ImGuiStyleVar arg1 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopStyleVar__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PopStyleVar(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopStyleVar__SWIG_1 () {
  try {
    ImGui::PopStyleVar();
    
  } catch (...) {
    
  }
}


EXPORT ImVec4 *_wrap_GetStyleColorVec4 (ImGuiCol larg1) {
  ImVec4 * lresult = (ImVec4 *)0 ;
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImVec4 *)0;
  }
}


EXPORT ImFont *_wrap_GetFont () {
  ImFont * lresult = (ImFont *)0 ;
  ImFont *result = 0 ;
  
  try {
    result = (ImFont *)ImGui::GetFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImFont *)0;
  }
}


EXPORT float _wrap_GetFontSize () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetFontSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImVec2 *_wrap_GetFontTexUvWhitePixel () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetFontTexUvWhitePixel();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImU32 _wrap_GetColorU32__SWIG_0 (ImGuiCol larg1, float larg2) {
  ImU32 lresult = (ImU32)0 ;
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImU32)ImGui::GetColorU32(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_GetColorU32__SWIG_1 (ImGuiCol larg1) {
  ImU32 lresult = (ImU32)0 ;
  ImGuiCol arg1 ;
  ImU32 result;
  
  arg1 = larg1;
  try {
    result = (ImU32)ImGui::GetColorU32(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_GetColorU32__SWIG_2 (ImVec4 *larg1) {
  ImU32 lresult = (ImU32)0 ;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  arg1 = larg1;
  try {
    result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_GetColorU32__SWIG_3 (ImU32 larg1) {
  ImU32 lresult = (ImU32)0 ;
  ImU32 arg1 ;
  ImU32 result;
  
  arg1 = larg1;
  try {
    result = (ImU32)ImGui::GetColorU32(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT void _wrap_PushItemWidth (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushItemWidth(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopItemWidth () {
  try {
    ImGui::PopItemWidth();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextItemWidth (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextItemWidth(arg1);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_CalcItemWidth () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::CalcItemWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_PushTextWrapPos__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushTextWrapPos(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushTextWrapPos__SWIG_1 () {
  try {
    ImGui::PushTextWrapPos();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopTextWrapPos () {
  try {
    ImGui::PopTextWrapPos();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushAllowKeyboardFocus (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::PushAllowKeyboardFocus(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopAllowKeyboardFocus () {
  try {
    ImGui::PopAllowKeyboardFocus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushButtonRepeat (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::PushButtonRepeat(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopButtonRepeat () {
  try {
    ImGui::PopButtonRepeat();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Separator () {
  try {
    ImGui::Separator();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SameLine__SWIG_0 (float larg1, float larg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SameLine(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SameLine__SWIG_1 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SameLine(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SameLine__SWIG_2 () {
  try {
    ImGui::SameLine();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NewLine () {
  try {
    ImGui::NewLine();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Spacing () {
  try {
    ImGui::Spacing();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Dummy (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::Dummy((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Indent__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::Indent(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Indent__SWIG_1 () {
  try {
    ImGui::Indent();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Unindent__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::Unindent(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Unindent__SWIG_1 () {
  try {
    ImGui::Unindent();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BeginGroup () {
  try {
    ImGui::BeginGroup();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_EndGroup () {
  try {
    ImGui::EndGroup();
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_GetCursorPos () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetCursorPos();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT float _wrap_GetCursorPosX () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetCursorPosX();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetCursorPosY () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetCursorPosY();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_SetCursorPos (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCursorPos((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetCursorPosX (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCursorPosX(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetCursorPosY (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCursorPosY(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_GetCursorStartPos () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetCursorStartPos();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetCursorScreenPos () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetCursorScreenPos();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_SetCursorScreenPos (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_AlignTextToFramePadding () {
  try {
    ImGui::AlignTextToFramePadding();
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_GetTextLineHeight () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetTextLineHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetTextLineHeightWithSpacing () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetTextLineHeightWithSpacing();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetFrameHeight () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetFrameHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetFrameHeightWithSpacing () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetFrameHeightWithSpacing();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_PushID__SWIG_0 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::PushID((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushID__SWIG_1 (char *larg1, char *larg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushID((char const *)arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushID__SWIG_2 (void *larg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::PushID((void const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushID__SWIG_3 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushID(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopID () {
  try {
    ImGui::PopID();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiID _wrap_GetID__SWIG_0 (char *larg1) {
  ImGuiID lresult = (ImGuiID)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  
  arg1 = larg1;
  try {
    result = (ImGuiID)ImGui::GetID((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiID _wrap_GetID__SWIG_1 (char *larg1, char *larg2) {
  ImGuiID lresult = (ImGuiID)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiID _wrap_GetID__SWIG_2 (void *larg1) {
  ImGuiID lresult = (ImGuiID)0 ;
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  
  arg1 = larg1;
  try {
    result = (ImGuiID)ImGui::GetID((void const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT void _wrap_TextUnformatted__SWIG_0 (char *larg1, char *larg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::TextUnformatted((char const *)arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TextUnformatted__SWIG_1 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TextUnformatted((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Text (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::Text((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}

/*
 * BROKEN:
EXPORT void _wrap_TextV (char *larg1, va_list *larg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::TextV((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}*/


EXPORT void _wrap_TextColored (ImVec4 *larg1, char *larg2) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


/*
EXPORT void _wrap_TextColoredV (ImVec4 *larg1, char *larg2, va_list *larg3) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ImGui::TextColoredV((ImVec4 const &)*arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}*/


EXPORT void _wrap_TextDisabled (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TextDisabled((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}

/*
 * Also broken:
EXPORT void _wrap_TextDisabledV (char *larg1, va_list *larg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::TextDisabledV((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
} */


EXPORT void _wrap_TextWrapped (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TextWrapped((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


/* Broken
EXPORT void _wrap_TextWrappedV (char *larg1, va_list *larg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::TextWrappedV((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}*/


EXPORT void _wrap_LabelText (char *larg1, char *larg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}

/* Borken
EXPORT void _wrap_LabelTextV (char *larg1, char *larg2, va_list *larg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ImGui::LabelTextV((char const *)arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}*/


EXPORT void _wrap_BulletText (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::BulletText((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


/* Broken:
EXPORT void _wrap_BulletTextV (char *larg1, va_list *larg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::BulletTextV((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}*/


EXPORT int _wrap_Button__SWIG_0 (char *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}

EXPORT int _wrap_Button__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::Button((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SmallButton (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::SmallButton((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InvisibleButton__SWIG_0 (char *larg1, ImVec2 *larg2, ImGuiButtonFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiButtonFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InvisibleButton__SWIG_1 (char *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ArrowButton (char *larg1, ImGuiDir larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ArrowButton((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Image__SWIG_0 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, ImVec4 *larg5, ImVec4 *larg6) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Image__SWIG_1 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, ImVec4 *larg5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Image__SWIG_2 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Image__SWIG_3 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Image__SWIG_4 (ImTextureID larg1, ImVec2 *larg2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::Image(arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImageButton__SWIG_0 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, int larg5, ImVec4 *larg6, ImVec4 *larg7) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButton__SWIG_1 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, int larg5, ImVec4 *larg6) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButton__SWIG_2 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, int larg5) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButton__SWIG_3 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButton__SWIG_4 (ImTextureID larg1, ImVec2 *larg2, ImVec2 *larg3) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButton__SWIG_5 (ImTextureID larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Checkbox (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::Checkbox((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CheckboxFlags (char *larg1, unsigned int *larg2, unsigned int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_RadioButton__SWIG_0 (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_RadioButton__SWIG_1 (char *larg1, int *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ProgressBar__SWIG_0 (float larg1, ImVec2 *larg2, char *larg3) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ProgressBar__SWIG_1 (float larg1, ImVec2 *larg2) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ProgressBar__SWIG_2 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::ProgressBar(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Bullet () {
  try {
    ImGui::Bullet();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginCombo__SWIG_0 (char *larg1, char *larg2, ImGuiComboFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiComboFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginCombo__SWIG_1 (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndCombo () {
  try {
    ImGui::EndCombo();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Combo__SWIG_0 (char *larg1, int *larg2, char **larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Combo__SWIG_1 (char *larg1, int *larg2, char **larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Combo__SWIG_2 (char *larg1, int *larg2, char *larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Combo__SWIG_3 (char *larg1, int *larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Combo__SWIG_4 (char *larg1, int *larg2, bool (*larg3)(void *,int,char const **), void *larg4, int larg5, int larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Combo__SWIG_5 (char *larg1, int *larg2, bool (*larg3)(void *,int,char const **), void *larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_4 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_5 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_4 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_5 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_4 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_5 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_4 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_5 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_0 (char *larg1, float *larg2, float *larg3, float larg4, float larg5, float larg6, char *larg7, char *larg8, ImGuiSliderFlags larg9) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_1 (char *larg1, float *larg2, float *larg3, float larg4, float larg5, float larg6, char *larg7, char *larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_2 (char *larg1, float *larg2, float *larg3, float larg4, float larg5, float larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_3 (char *larg1, float *larg2, float *larg3, float larg4, float larg5, float larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_4 (char *larg1, float *larg2, float *larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_5 (char *larg1, float *larg2, float *larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloatRange2__SWIG_6 (char *larg1, float *larg2, float *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_0 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_1 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_2 (char *larg1, int *larg2, float larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_3 (char *larg1, int *larg2, float larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_4 (char *larg1, int *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt__SWIG_5 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragInt((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_0 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_1 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_2 (char *larg1, int *larg2, float larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_3 (char *larg1, int *larg2, float larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_4 (char *larg1, int *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt2__SWIG_5 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragInt2((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_0 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_1 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_2 (char *larg1, int *larg2, float larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_3 (char *larg1, int *larg2, float larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_4 (char *larg1, int *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt3__SWIG_5 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragInt3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_0 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_1 (char *larg1, int *larg2, float larg3, int larg4, int larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_2 (char *larg1, int *larg2, float larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_3 (char *larg1, int *larg2, float larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_4 (char *larg1, int *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragInt4__SWIG_5 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::DragInt4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_0 (char *larg1, int *larg2, int *larg3, float larg4, int larg5, int larg6, char *larg7, char *larg8, ImGuiSliderFlags larg9) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_1 (char *larg1, int *larg2, int *larg3, float larg4, int larg5, int larg6, char *larg7, char *larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_2 (char *larg1, int *larg2, int *larg3, float larg4, int larg5, int larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_3 (char *larg1, int *larg2, int *larg3, float larg4, int larg5, int larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_4 (char *larg1, int *larg2, int *larg3, float larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_5 (char *larg1, int *larg2, int *larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragIntRange2__SWIG_6 (char *larg1, int *larg2, int *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalar__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5, void *larg6, char *larg7, ImGuiSliderFlags larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalar__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5, void *larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalar__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalar__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalar__SWIG_4 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5, void *larg6, void *larg7, char *larg8, ImGuiSliderFlags larg9) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5, void *larg6, void *larg7, char *larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5, void *larg6, void *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_4 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat2__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat2__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat2__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat3__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat3__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat3__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat4__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat4__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat4__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderAngle__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderAngle__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderAngle__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderAngle__SWIG_3 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderAngle__SWIG_4 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::SliderAngle((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt__SWIG_0 (char *larg1, int *larg2, int larg3, int larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt__SWIG_1 (char *larg1, int *larg2, int larg3, int larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt__SWIG_2 (char *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt2__SWIG_0 (char *larg1, int *larg2, int larg3, int larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt2__SWIG_1 (char *larg1, int *larg2, int larg3, int larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt2__SWIG_2 (char *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt3__SWIG_0 (char *larg1, int *larg2, int larg3, int larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt3__SWIG_1 (char *larg1, int *larg2, int larg3, int larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt3__SWIG_2 (char *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt4__SWIG_0 (char *larg1, int *larg2, int larg3, int larg4, char *larg5, ImGuiSliderFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt4__SWIG_1 (char *larg1, int *larg2, int larg3, int larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderInt4__SWIG_2 (char *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalar__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalar__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalar__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalarN__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6, char *larg7, ImGuiSliderFlags larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalarN__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalarN__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderFloat__SWIG_0 (char *larg1, ImVec2 *larg2, float *larg3, float larg4, float larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderFloat__SWIG_1 (char *larg1, ImVec2 *larg2, float *larg3, float larg4, float larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderFloat__SWIG_2 (char *larg1, ImVec2 *larg2, float *larg3, float larg4, float larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderInt__SWIG_0 (char *larg1, ImVec2 *larg2, int *larg3, int larg4, int larg5, char *larg6, ImGuiSliderFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderInt__SWIG_1 (char *larg1, ImVec2 *larg2, int *larg3, int larg4, int larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderInt__SWIG_2 (char *larg1, ImVec2 *larg2, int *larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderScalar__SWIG_0 (char *larg1, ImVec2 *larg2, ImGuiDataType larg3, void *larg4, void *larg5, void *larg6, char *larg7, ImGuiSliderFlags larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderScalar__SWIG_1 (char *larg1, ImVec2 *larg2, ImGuiDataType larg3, void *larg4, void *larg5, void *larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_VSliderScalar__SWIG_2 (char *larg1, ImVec2 *larg2, ImGuiDataType larg3, void *larg4, void *larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputText__SWIG_0 (char *larg1, char *larg2, size_t *larg3, ImGuiInputTextFlags larg4, ImGuiInputTextCallback larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputText__SWIG_1 (char *larg1, char *larg2, size_t *larg3, ImGuiInputTextFlags larg4, ImGuiInputTextCallback larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputText__SWIG_2 (char *larg1, char *larg2, size_t *larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputText__SWIG_3 (char *larg1, char *larg2, size_t *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextMultiline__SWIG_0 (char *larg1, char *larg2, size_t *larg3, ImVec2 *larg4, ImGuiInputTextFlags larg5, ImGuiInputTextCallback larg6, void *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextMultiline__SWIG_1 (char *larg1, char *larg2, size_t *larg3, ImVec2 *larg4, ImGuiInputTextFlags larg5, ImGuiInputTextCallback larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextMultiline__SWIG_2 (char *larg1, char *larg2, size_t *larg3, ImVec2 *larg4, ImGuiInputTextFlags larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextMultiline__SWIG_3 (char *larg1, char *larg2, size_t *larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextMultiline__SWIG_4 (char *larg1, char *larg2, size_t *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextWithHint__SWIG_0 (char *larg1, char *larg2, char *larg3, size_t *larg4, ImGuiInputTextFlags larg5, ImGuiInputTextCallback larg6, void *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextWithHint__SWIG_1 (char *larg1, char *larg2, char *larg3, size_t *larg4, ImGuiInputTextFlags larg5, ImGuiInputTextCallback larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextWithHint__SWIG_2 (char *larg1, char *larg2, char *larg3, size_t *larg4, ImGuiInputTextFlags larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextWithHint__SWIG_3 (char *larg1, char *larg2, char *larg3, size_t *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_0 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, ImGuiInputTextFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_1 (char *larg1, float *larg2, float larg3, float larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_2 (char *larg1, float *larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_3 (char *larg1, float *larg2, float larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_4 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat2__SWIG_0 (char *larg1, float *larg2, char *larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat2__SWIG_1 (char *larg1, float *larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat2__SWIG_2 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat3__SWIG_0 (char *larg1, float *larg2, char *larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat3__SWIG_1 (char *larg1, float *larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat3__SWIG_2 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat4__SWIG_0 (char *larg1, float *larg2, char *larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat4__SWIG_1 (char *larg1, float *larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat4__SWIG_2 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt__SWIG_0 (char *larg1, int *larg2, int larg3, int larg4, ImGuiInputTextFlags larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt__SWIG_1 (char *larg1, int *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt__SWIG_2 (char *larg1, int *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt__SWIG_3 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputInt((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt2__SWIG_0 (char *larg1, int *larg2, ImGuiInputTextFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt2__SWIG_1 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputInt2((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt3__SWIG_0 (char *larg1, int *larg2, ImGuiInputTextFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt3__SWIG_1 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputInt3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt4__SWIG_0 (char *larg1, int *larg2, ImGuiInputTextFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputInt4__SWIG_1 (char *larg1, int *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputInt4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputDouble__SWIG_0 (char *larg1, double *larg2, double larg3, double larg4, char *larg5, ImGuiInputTextFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputDouble__SWIG_1 (char *larg1, double *larg2, double larg3, double larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputDouble__SWIG_2 (char *larg1, double *larg2, double larg3, double larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputDouble__SWIG_3 (char *larg1, double *larg2, double larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputDouble__SWIG_4 (char *larg1, double *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::InputDouble((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalar__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5, char *larg6, ImGuiInputTextFlags larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiInputTextFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalar__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5, char *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalar__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalar__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalar__SWIG_4 (char *larg1, ImGuiDataType larg2, void *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalarN__SWIG_0 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6, char *larg7, ImGuiInputTextFlags larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiInputTextFlags arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalarN__SWIG_1 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6, char *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalarN__SWIG_2 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalarN__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputScalarN__SWIG_4 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorEdit3__SWIG_0 (char *larg1, float *larg2, ImGuiColorEditFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorEdit3__SWIG_1 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorEdit4__SWIG_0 (char *larg1, float *larg2, ImGuiColorEditFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorEdit4__SWIG_1 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorPicker3__SWIG_0 (char *larg1, float *larg2, ImGuiColorEditFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorPicker3__SWIG_1 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorPicker4__SWIG_0 (char *larg1, float *larg2, ImGuiColorEditFlags larg3, float *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorPicker4__SWIG_1 (char *larg1, float *larg2, ImGuiColorEditFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorPicker4__SWIG_2 (char *larg1, float *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorButton__SWIG_0 (char *larg1, ImVec4 *larg2, ImGuiColorEditFlags larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorButton__SWIG_1 (char *larg1, ImVec4 *larg2, ImGuiColorEditFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ColorButton__SWIG_2 (char *larg1, ImVec4 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SetColorEditOptions (ImGuiColorEditFlags larg1) {
  ImGuiColorEditFlags arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetColorEditOptions(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_TreeNode__SWIG_0 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::TreeNode((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNode__SWIG_1 (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNode__SWIG_2 (void *larg1, char *larg2) {
  int lresult = (int)0 ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


/* Broken:
EXPORT int _wrap_TreeNodeV__SWIG_0 (char *larg1, char *larg2, va_list *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::TreeNodeV((char const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeV__SWIG_1 (void *larg1, char *larg2, va_list *larg3) {
  int lresult = (int)0 ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::TreeNodeV((void const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}*/


EXPORT int _wrap_TreeNodeEx__SWIG_0 (char *larg1, ImGuiTreeNodeFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeEx__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::TreeNodeEx((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeEx__SWIG_2 (char *larg1, ImGuiTreeNodeFlags larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeEx__SWIG_3 (void *larg1, ImGuiTreeNodeFlags larg2, char *larg3) {
  int lresult = (int)0 ;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}

/* Broken
EXPORT int _wrap_TreeNodeExV__SWIG_0 (char *larg1, ImGuiTreeNodeFlags larg2, char *larg3, va_list *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (bool)ImGui::TreeNodeExV((char const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeExV__SWIG_1 (void *larg1, ImGuiTreeNodeFlags larg2, char *larg3, va_list *larg4) {
  int lresult = (int)0 ;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (bool)ImGui::TreeNodeExV((void const *)arg1,arg2,(char const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}*/


EXPORT void _wrap_TreePush__SWIG_0 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TreePush((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TreePush__SWIG_1 (void *larg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TreePush((void const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TreePush__SWIG_2 () {
  try {
    ImGui::TreePush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TreePop () {
  try {
    ImGui::TreePop();
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_GetTreeNodeToLabelSpacing () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetTreeNodeToLabelSpacing();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT int _wrap_CollapsingHeader__SWIG_0 (char *larg1, ImGuiTreeNodeFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CollapsingHeader__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::CollapsingHeader((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CollapsingHeader__SWIG_2 (char *larg1, bool *larg2, ImGuiTreeNodeFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CollapsingHeader__SWIG_3 (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SetNextItemOpen__SWIG_0 (int larg1, ImGuiCond larg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = (bool)larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextItemOpen(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextItemOpen__SWIG_1 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::SetNextItemOpen(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_Selectable__SWIG_0 (char *larg1, int larg2, ImGuiSelectableFlags larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_1 (char *larg1, int larg2, ImGuiSelectableFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_2 (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_3 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_4 (char *larg1, bool *larg2, ImGuiSelectableFlags larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_5 (char *larg1, bool *larg2, ImGuiSelectableFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_Selectable__SWIG_6 (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::Selectable((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBox__SWIG_0 (char *larg1, int *larg2, char **larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBox__SWIG_1 (char *larg1, int *larg2, char **larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBox__SWIG_2 (char *larg1, int *larg2, bool (*larg3)(void *,int,char const **), void *larg4, int larg5, int larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBox__SWIG_3 (char *larg1, int *larg2, bool (*larg3)(void *,int,char const **), void *larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBoxHeader__SWIG_0 (char *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ListBoxHeader((char const *)arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBoxHeader__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::ListBoxHeader((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBoxHeader__SWIG_2 (char *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ListBoxHeader__SWIG_3 (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ListBoxFooter () {
  try {
    ImGui::ListBoxFooter();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_0 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7, ImVec2 *larg8, int larg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_1 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7, ImVec2 *larg8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_2 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_3 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_4 (char *larg1, float *larg2, int larg3, int larg4, char *larg5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_5 (char *larg1, float *larg2, int larg3, int larg4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_6 (char *larg1, float *larg2, int larg3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_7 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7, float larg8, ImVec2 *larg9) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = *larg9;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_8 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7, float larg8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_9 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_10 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_11 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotLines__SWIG_12 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_0 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7, ImVec2 *larg8, int larg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_1 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7, ImVec2 *larg8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_2 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6, float larg7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_3 (char *larg1, float *larg2, int larg3, int larg4, char *larg5, float larg6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_4 (char *larg1, float *larg2, int larg3, int larg4, char *larg5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_5 (char *larg1, float *larg2, int larg3, int larg4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_6 (char *larg1, float *larg2, int larg3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_7 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7, float larg8, ImVec2 *larg9) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = *larg9;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_8 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7, float larg8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_9 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6, float larg7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_10 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5, char *larg6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_11 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4, int larg5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PlotHistogram__SWIG_12 (char *larg1, float (*larg2)(void *,int), void *larg3, int larg4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Value__SWIG_0 (char *larg1, int larg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::Value((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Value__SWIG_1 (char *larg1, int larg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::Value((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Value__SWIG_2 (char *larg1, unsigned int larg2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::Value((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Value__SWIG_3 (char *larg1, float larg2, char *larg3) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::Value((char const *)arg1,arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Value__SWIG_4 (char *larg1, float larg2) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::Value((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginMenuBar () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginMenuBar();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndMenuBar () {
  try {
    ImGui::EndMenuBar();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginMainMenuBar () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginMainMenuBar();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndMainMenuBar () {
  try {
    ImGui::EndMainMenuBar();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginMenu__SWIG_0 (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginMenu__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginMenu((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndMenu () {
  try {
    ImGui::EndMenu();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_MenuItem__SWIG_0 (char *larg1, char *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_MenuItem__SWIG_1 (char *larg1, char *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_MenuItem__SWIG_2 (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_MenuItem__SWIG_3 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_MenuItem__SWIG_4 (char *larg1, char *larg2, bool *larg3, int larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_MenuItem__SWIG_5 (char *larg1, char *larg2, bool *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_BeginTooltip () {
  try {
    ImGui::BeginTooltip();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_EndTooltip () {
  try {
    ImGui::EndTooltip();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetTooltip (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetTooltip((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


/* Broken:
EXPORT void _wrap_SetTooltipV (char *larg1, va_list *larg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::SetTooltipV((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}*/


EXPORT int _wrap_BeginPopup__SWIG_0 (char *larg1, ImGuiWindowFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopup((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopup__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginPopup((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupModal__SWIG_0 (char *larg1, bool *larg2, ImGuiWindowFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupModal__SWIG_1 (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupModal__SWIG_2 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginPopupModal((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndPopup () {
  try {
    ImGui::EndPopup();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_OpenPopup__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::OpenPopup((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_OpenPopup__SWIG_1 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::OpenPopup((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_OpenPopupContextItem__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::OpenPopupContextItem((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OpenPopupContextItem__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::OpenPopupContextItem((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OpenPopupContextItem__SWIG_2 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::OpenPopupContextItem();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_CloseCurrentPopup () {
  try {
    ImGui::CloseCurrentPopup();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginPopupContextItem__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextItem__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginPopupContextItem((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextItem__SWIG_2 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginPopupContextItem();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextWindow__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextWindow__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextWindow__SWIG_2 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginPopupContextWindow();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextVoid__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextVoid__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextVoid__SWIG_2 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginPopupContextVoid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsPopupOpen__SWIG_0 (char *larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsPopupOpen((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsPopupOpen__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsPopupOpen((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Columns__SWIG_0 (int larg1, char *larg2, int larg3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ImGui::Columns(arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Columns__SWIG_1 (int larg1, char *larg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::Columns(arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Columns__SWIG_2 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::Columns(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Columns__SWIG_3 () {
  try {
    ImGui::Columns();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NextColumn () {
  try {
    ImGui::NextColumn();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_GetColumnIndex () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)ImGui::GetColumnIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_GetColumnWidth__SWIG_0 (int larg1) {
  float lresult = (float)0 ;
  int arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImGui::GetColumnWidth(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetColumnWidth__SWIG_1 () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetColumnWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_SetColumnWidth (int larg1, float larg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetColumnWidth(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_GetColumnOffset__SWIG_0 (int larg1) {
  float lresult = (float)0 ;
  int arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImGui::GetColumnOffset(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetColumnOffset__SWIG_1 () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetColumnOffset();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_SetColumnOffset (int larg1, float larg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetColumnOffset(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_GetColumnsCount () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)ImGui::GetColumnsCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginTabBar__SWIG_0 (char *larg1, ImGuiTabBarFlags larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTabBarFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginTabBar((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginTabBar__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginTabBar((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndTabBar () {
  try {
    ImGui::EndTabBar();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginTabItem__SWIG_0 (char *larg1, bool *larg2, ImGuiTabItemFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTabItemFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginTabItem__SWIG_1 (char *larg1, bool *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginTabItem__SWIG_2 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginTabItem((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndTabItem () {
  try {
    ImGui::EndTabItem();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetTabItemClosed (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetTabItemClosed((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToTTY__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::LogToTTY(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToTTY__SWIG_1 () {
  try {
    ImGui::LogToTTY();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToFile__SWIG_0 (int larg1, char *larg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::LogToFile(arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToFile__SWIG_1 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::LogToFile(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToFile__SWIG_2 () {
  try {
    ImGui::LogToFile();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToClipboard__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::LogToClipboard(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToClipboard__SWIG_1 () {
  try {
    ImGui::LogToClipboard();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogFinish () {
  try {
    ImGui::LogFinish();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogButtons () {
  try {
    ImGui::LogButtons();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogText (char *larg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::LogText((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginDragDropSource__SWIG_0 (ImGuiDragDropFlags larg1) {
  int lresult = (int)0 ;
  ImGuiDragDropFlags arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::BeginDragDropSource(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginDragDropSource__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginDragDropSource();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SetDragDropPayload__SWIG_0 (char *larg1, void *larg2, size_t *larg3, ImGuiCond larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ImGuiCond arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SetDragDropPayload__SWIG_1 (char *larg1, void *larg2, size_t *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndDragDropSource () {
  try {
    ImGui::EndDragDropSource();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginDragDropTarget () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::BeginDragDropTarget();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImGuiPayload *_wrap_AcceptDragDropPayload__SWIG_0 (char *larg1, ImGuiDragDropFlags larg2) {
  ImGuiPayload * lresult = (ImGuiPayload *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDragDropFlags arg2 ;
  ImGuiPayload *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiPayload *)0;
  }
}


EXPORT ImGuiPayload *_wrap_AcceptDragDropPayload__SWIG_1 (char *larg1) {
  ImGuiPayload * lresult = (ImGuiPayload *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiPayload *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiPayload *)0;
  }
}


EXPORT void _wrap_EndDragDropTarget () {
  try {
    ImGui::EndDragDropTarget();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiPayload *_wrap_GetDragDropPayload () {
  ImGuiPayload * lresult = (ImGuiPayload *)0 ;
  ImGuiPayload *result = 0 ;
  
  try {
    result = (ImGuiPayload *)ImGui::GetDragDropPayload();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiPayload *)0;
  }
}


EXPORT void _wrap_PushClipRect (ImVec2 *larg1, ImVec2 *larg2, int larg3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopClipRect () {
  try {
    ImGui::PopClipRect();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetItemDefaultFocus () {
  try {
    ImGui::SetItemDefaultFocus();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetKeyboardFocusHere__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetKeyboardFocusHere(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetKeyboardFocusHere__SWIG_1 () {
  try {
    ImGui::SetKeyboardFocusHere();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsItemHovered__SWIG_0 (ImGuiHoveredFlags larg1) {
  int lresult = (int)0 ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsItemHovered(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemHovered__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemHovered();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemActive () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemActive();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemFocused () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemFocused();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemClicked__SWIG_0 (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsItemClicked(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemClicked__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemClicked();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemVisible () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemEdited () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemEdited();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemActivated () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemActivated();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemDeactivated () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemDeactivated();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemDeactivatedAfterEdit () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemDeactivatedAfterEdit();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsItemToggledOpen () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemToggledOpen();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyItemHovered () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyItemHovered();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyItemActive () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyItemActive();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyItemFocused () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyItemFocused();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_GetItemRectMin () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetItemRectMin();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetItemRectMax () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetItemRectMax();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetItemRectSize () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetItemRectSize();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_SetItemAllowOverlap () {
  try {
    ImGui::SetItemAllowOverlap();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsRectVisible__SWIG_0 (ImVec2 *larg1) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsRectVisible__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT double _wrap_GetTime () {
  double lresult = (double)0 ;
  double result;
  
  try {
    result = (double)ImGui::GetTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT int _wrap_GetFrameCount () {
  int lresult = (int)0 ;
  int result;
  
  try {
    result = (int)ImGui::GetFrameCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImDrawList *_wrap_GetBackgroundDrawList () {
  ImDrawList * lresult = (ImDrawList *)0 ;
  ImDrawList *result = 0 ;
  
  try {
    result = (ImDrawList *)ImGui::GetBackgroundDrawList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawList *)0;
  }
}


EXPORT ImDrawList *_wrap_GetForegroundDrawList__SWIG_0 () {
  ImDrawList * lresult = (ImDrawList *)0 ;
  ImDrawList *result = 0 ;
  
  try {
    result = (ImDrawList *)ImGui::GetForegroundDrawList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawList *)0;
  }
}


EXPORT ImDrawListSharedData *_wrap_GetDrawListSharedData () {
  ImDrawListSharedData * lresult = (ImDrawListSharedData *)0 ;
  ImDrawListSharedData *result = 0 ;
  
  try {
    result = (ImDrawListSharedData *)ImGui::GetDrawListSharedData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawListSharedData *)0;
  }
}


EXPORT char *_wrap_GetStyleColorName (ImGuiCol larg1) {
  char * lresult = (char *)0 ;
  ImGuiCol arg1 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImGui::GetStyleColorName(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_SetStateStorage (ImGuiStorage *larg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetStateStorage(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImGuiStorage *_wrap_GetStateStorage () {
  ImGuiStorage * lresult = (ImGuiStorage *)0 ;
  ImGuiStorage *result = 0 ;
  
  try {
    result = (ImGuiStorage *)ImGui::GetStateStorage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiStorage *)0;
  }
}


EXPORT void _wrap_CalcListClipping (int larg1, float larg2, int *larg3, int *larg4) {
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::CalcListClipping(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginChildFrame__SWIG_0 (ImGuiID larg1, ImVec2 *larg2, ImGuiWindowFlags larg3) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginChildFrame__SWIG_1 (ImGuiID larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_EndChildFrame () {
  try {
    ImGui::EndChildFrame();
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_CalcTextSize__SWIG_0 (char *larg1, char *larg2, int larg3, float larg4) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_CalcTextSize__SWIG_1 (char *larg1, char *larg2, int larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_CalcTextSize__SWIG_2 (char *larg1, char *larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_CalcTextSize__SWIG_3 (char *larg1) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  try {
    result = ImGui::CalcTextSize((char const *)arg1);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec4 *_wrap_ColorConvertU32ToFloat4 (ImU32 larg1) {
  ImVec4 * lresult = (ImVec4 *)0 ;
  ImU32 arg1 ;
  ImVec4 result;
  
  arg1 = larg1;
  try {
    result = ImGui::ColorConvertU32ToFloat4(arg1);
    lresult = new ImVec4(result);
    return lresult;
  } catch (...) {
    return (ImVec4 *)0;
  }
}


EXPORT ImU32 _wrap_ColorConvertFloat4ToU32 (ImVec4 *larg1) {
  ImU32 lresult = (ImU32)0 ;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  arg1 = larg1;
  try {
    result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT void _wrap_ColorConvertRGBtoHSV (float larg1, float larg2, float larg3, float *larg4, float *larg5, float *larg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ColorConvertHSVtoRGB (float larg1, float larg2, float larg3, float *larg4, float *larg5, float *larg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_GetKeyIndex (ImGuiKey larg1) {
  int lresult = (int)0 ;
  ImGuiKey arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)ImGui::GetKeyIndex(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyDown (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsKeyDown(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyPressed__SWIG_0 (int larg1, int larg2) {
  int lresult = (int)0 ;
  int arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::IsKeyPressed(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyPressed__SWIG_1 (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsKeyPressed(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyReleased (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsKeyReleased(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_GetKeyPressedAmount (int larg1, float larg2, float larg3) {
  int lresult = (int)0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)ImGui::GetKeyPressedAmount(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_CaptureKeyboardFromApp__SWIG_0 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::CaptureKeyboardFromApp(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_CaptureKeyboardFromApp__SWIG_1 () {
  try {
    ImGui::CaptureKeyboardFromApp();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsMouseDown (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseDown(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseClicked__SWIG_0 (ImGuiMouseButton larg1, int larg2) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::IsMouseClicked(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseClicked__SWIG_1 (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseClicked(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseReleased (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseReleased(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseDoubleClicked (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseDoubleClicked(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseHoveringRect__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, int larg3) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseHoveringRect__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMousePosValid__SWIG_0 (ImVec2 *larg1) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMousePosValid((ImVec2 const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMousePosValid__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsMousePosValid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyMouseDown () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyMouseDown();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_GetMousePos () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetMousePos();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetMousePosOnOpeningCurrentPopup () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetMousePosOnOpeningCurrentPopup();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT int _wrap_IsMouseDragging__SWIG_0 (ImGuiMouseButton larg1, float larg2) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsMouseDragging(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseDragging__SWIG_1 (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseDragging(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_GetMouseDragDelta__SWIG_0 (ImGuiMouseButton larg1, float larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImGui::GetMouseDragDelta(arg1,arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetMouseDragDelta__SWIG_1 (ImGuiMouseButton larg1) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiMouseButton arg1 ;
  ImVec2 result;
  
  arg1 = larg1;
  try {
    result = ImGui::GetMouseDragDelta(arg1);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetMouseDragDelta__SWIG_2 () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetMouseDragDelta();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_ResetMouseDragDelta__SWIG_0 (ImGuiMouseButton larg1) {
  ImGuiMouseButton arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::ResetMouseDragDelta(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ResetMouseDragDelta__SWIG_1 () {
  try {
    ImGui::ResetMouseDragDelta();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiMouseCursor _wrap_GetMouseCursor () {
  ImGuiMouseCursor lresult = (ImGuiMouseCursor)0 ;
  ImGuiMouseCursor result;
  
  try {
    result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiMouseCursor)0;
  }
}


EXPORT void _wrap_SetMouseCursor (ImGuiMouseCursor larg1) {
  ImGuiMouseCursor arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetMouseCursor(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_CaptureMouseFromApp__SWIG_0 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::CaptureMouseFromApp(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_CaptureMouseFromApp__SWIG_1 () {
  try {
    ImGui::CaptureMouseFromApp();
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_GetClipboardText () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)ImGui::GetClipboardText();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_SetClipboardText (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetClipboardText((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LoadIniSettingsFromDisk (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::LoadIniSettingsFromDisk((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LoadIniSettingsFromMemory__SWIG_0 (char *larg1, size_t *larg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    ImGui::LoadIniSettingsFromMemory((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LoadIniSettingsFromMemory__SWIG_1 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::LoadIniSettingsFromMemory((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SaveIniSettingsToDisk (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SaveIniSettingsToDisk((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_SaveIniSettingsToMemory__SWIG_0 (size_t *larg1) {
  char * lresult = (char *)0 ;
  size_t *arg1 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImGui::SaveIniSettingsToMemory(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_SaveIniSettingsToMemory__SWIG_1 () {
  char * lresult = (char *)0 ;
  char *result = 0 ;
  
  try {
    result = (char *)ImGui::SaveIniSettingsToMemory();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_DebugCheckVersionAndDataLayout (char *larg1, size_t *larg2, size_t *larg3, size_t *larg4, size_t *larg5, size_t *larg6, size_t *larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  try {
    result = (bool)ImGui::DebugCheckVersionAndDataLayout((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SetAllocatorFunctions__SWIG_0 (void *(*larg1)(size_t,void *), void (*larg2)(void *,void *), void *larg3) {
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetAllocatorFunctions(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetAllocatorFunctions__SWIG_1 (void *(*larg1)(size_t,void *), void (*larg2)(void *,void *)) {
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetAllocatorFunctions(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_MemAlloc (size_t *larg1) {
  void * lresult = (void *)0 ;
  size_t arg1 ;
  void *result = 0 ;
  
  arg1 = *larg1;
  try {
    result = (void *)ImGui::MemAlloc(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_MemFree (void *larg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::MemFree(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_DragScalar__SWIG_5 (char *larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5, void *larg6, char *larg7, float larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragScalarN__SWIG_5 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, float larg5, void *larg6, void *larg7, char *larg8, float larg9) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat__SWIG_6 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, float larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat2__SWIG_6 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, float larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat3__SWIG_6 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, float larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragFloat4__SWIG_6 (char *larg1, float *larg2, float larg3, float larg4, float larg5, char *larg6, float larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalar__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, void *larg4, void *larg5, char *larg6, float larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderScalarN__SWIG_3 (char *larg1, ImGuiDataType larg2, void *larg3, int larg4, void *larg5, void *larg6, char *larg7, float larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, float larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat2__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, float larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat3__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, float larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderFloat4__SWIG_3 (char *larg1, float *larg2, float larg3, float larg4, char *larg5, float larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OpenPopupOnItemClick__SWIG_0 (char *larg1, ImGuiMouseButton larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::OpenPopupOnItemClick((char const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OpenPopupOnItemClick__SWIG_1 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::OpenPopupOnItemClick((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_OpenPopupOnItemClick__SWIG_2 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::OpenPopupOnItemClick();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupContextWindow__SWIG_3 (char *larg1, ImGuiMouseButton larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_TreeAdvanceToLabelPos () {
  try {
    ImGui::TreeAdvanceToLabelPos();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextTreeNodeOpen__SWIG_0 (int larg1, ImGuiCond larg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = (bool)larg1;
  arg2 = larg2;
  try {
    ImGui::SetNextTreeNodeOpen(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNextTreeNodeOpen__SWIG_1 (int larg1) {
  bool arg1 ;
  
  arg1 = (bool)larg1;
  try {
    ImGui::SetNextTreeNodeOpen(arg1);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_GetContentRegionAvailWidth () {
  float lresult = (float)0 ;
  float result;
  
  try {
    result = (float)ImGui::GetContentRegionAvailWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImDrawList *_wrap_GetOverlayDrawList () {
  ImDrawList * lresult = (ImDrawList *)0 ;
  ImDrawList *result = 0 ;
  
  try {
    result = (ImDrawList *)ImGui::GetOverlayDrawList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawList *)0;
  }
}


EXPORT void _wrap_SetScrollHere__SWIG_0 (float larg1) {
  float arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetScrollHere(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollHere__SWIG_1 () {
  try {
    ImGui::SetScrollHere();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsItemDeactivatedAfterChange () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemDeactivatedAfterChange();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_5 (char *larg1, float *larg2, float larg3, float larg4, int larg5, ImGuiInputTextFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat__SWIG_6 (char *larg1, float *larg2, float larg3, float larg4, int larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat2__SWIG_3 (char *larg1, float *larg2, int larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat2__SWIG_4 (char *larg1, float *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat3__SWIG_3 (char *larg1, float *larg2, int larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat3__SWIG_4 (char *larg1, float *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat4__SWIG_3 (char *larg1, float *larg2, int larg3, ImGuiInputTextFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputFloat4__SWIG_4 (char *larg1, float *larg2, int larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyWindowFocused () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyWindowFocused();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsAnyWindowHovered () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsAnyWindowHovered();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImU32 _wrap_ImHashData__SWIG_0 (void *larg1, size_t *larg2, ImU32 larg3) {
  ImU32 lresult = (ImU32)0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (ImU32)ImHashData((void const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHashData__SWIG_1 (void *larg1, size_t *larg2) {
  ImU32 lresult = (ImU32)0 ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (ImU32)ImHashData((void const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHashStr__SWIG_0 (char *larg1, size_t *larg2, ImU32 larg3) {
  ImU32 lresult = (ImU32)0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (ImU32)ImHashStr((char const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHashStr__SWIG_1 (char *larg1, size_t *larg2) {
  ImU32 lresult = (ImU32)0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (ImU32)ImHashStr((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHashStr__SWIG_2 (char *larg1) {
  ImU32 lresult = (ImU32)0 ;
  char *arg1 = (char *) 0 ;
  ImU32 result;
  
  arg1 = larg1;
  try {
    result = (ImU32)ImHashStr((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHash__SWIG_0 (void *larg1, int larg2, ImU32 larg3) {
  ImU32 lresult = (ImU32)0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  ImU32 arg3 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ImU32)ImHash((void const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImHash__SWIG_1 (void *larg1, int larg2) {
  ImU32 lresult = (ImU32)0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImU32)ImHash((void const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT ImU32 _wrap_ImAlphaBlendColors (ImU32 larg1, ImU32 larg2) {
  ImU32 lresult = (ImU32)0 ;
  ImU32 arg1 ;
  ImU32 arg2 ;
  ImU32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImU32)ImAlphaBlendColors(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImU32)0;
  }
}


EXPORT int _wrap_ImIsPowerOfTwo (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImIsPowerOfTwo(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImUpperPowerOfTwo (int larg1) {
  int lresult = (int)0 ;
  int arg1 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)ImUpperPowerOfTwo(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImStricmp (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImStricmp((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImStrnicmp (char *larg1, char *larg2, size_t *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (int)ImStrnicmp((char const *)arg1,(char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImStrncpy (char *larg1, char *larg2, size_t *larg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ImStrncpy(arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_ImStrdup (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImStrdup((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ImStrdupcpy (char *larg1, size_t *larg2, char *larg3) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (char *)ImStrdupcpy(arg1,arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ImStrchrRange (char *larg1, char *larg2, char larg3) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (char *)ImStrchrRange((char const *)arg1,(char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_ImStrlenW (ImWchar *larg1) {
  int lresult = (int)0 ;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)ImStrlenW((unsigned short const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_ImStreolRange (char *larg1, char *larg2) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)ImStreolRange((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT ImWchar *_wrap_ImStrbolW (ImWchar *larg1, ImWchar *larg2) {
  ImWchar * lresult = (ImWchar *)0 ;
  ImWchar *arg1 = (ImWchar *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImWchar *)ImStrbolW((unsigned short const *)arg1,(unsigned short const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImWchar *)0;
  }
}


EXPORT char *_wrap_ImStristr (char *larg1, char *larg2, char *larg3, char *larg4) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (char *)ImStristr((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_ImStrTrimBlanks (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImStrTrimBlanks(arg1);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_ImStrSkipBlank (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImStrSkipBlank((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_ImFormatString (char *larg1, size_t *larg2, char *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (int)ImFormatString(arg1,arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


/* Broken:
EXPORT int _wrap_ImFormatStringV (char *larg1, size_t *larg2, char *larg3, va_list *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (int)ImFormatStringV(arg1,arg2,(char const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}*/


EXPORT char *_wrap_ImParseFormatFindStart (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImParseFormatFindStart((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ImParseFormatFindEnd (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImParseFormatFindEnd((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_ImParseFormatTrimDecorations (char *larg1, char *larg2, size_t *larg3) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (char *)ImParseFormatTrimDecorations((char const *)arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_ImParseFormatPrecision (char *larg1, int larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImParseFormatPrecision((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImCharIsBlankA (char larg1) {
  int lresult = (int)0 ;
  char arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImCharIsBlankA(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImCharIsBlankW (unsigned int larg1) {
  int lresult = (int)0 ;
  unsigned int arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImCharIsBlankW(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextStrToUtf8 (char *larg1, int larg2, ImWchar *larg3, ImWchar *larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImWchar *arg3 = (ImWchar *) 0 ;
  ImWchar *arg4 = (ImWchar *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)ImTextStrToUtf8(arg1,arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextCharFromUtf8 (unsigned int *larg1, char *larg2, char *larg3) {
  int lresult = (int)0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)ImTextCharFromUtf8(arg1,(char const *)arg2,(char const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextStrFromUtf8__SWIG_0 (ImWchar *larg1, int larg2, char *larg3, char *larg4, char **larg5) {
  int lresult = (int)0 ;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)ImTextStrFromUtf8(arg1,arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextStrFromUtf8__SWIG_1 (ImWchar *larg1, int larg2, char *larg3, char *larg4) {
  int lresult = (int)0 ;
  ImWchar *arg1 = (ImWchar *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)ImTextStrFromUtf8(arg1,arg2,(char const *)arg3,(char const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextCountCharsFromUtf8 (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImTextCountCharsFromUtf8((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextCountUtf8BytesFromChar (char *larg1, char *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImTextCountUtf8BytesFromChar((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImTextCountUtf8BytesFromStr (ImWchar *larg1, ImWchar *larg2) {
  int lresult = (int)0 ;
  ImWchar *arg1 = (ImWchar *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImTextCountUtf8BytesFromStr((unsigned short const *)arg1,(unsigned short const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImFileHandle _wrap_ImFileOpen (char *larg1, char *larg2) {
  ImFileHandle lresult = (ImFileHandle)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImFileHandle result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImFileHandle)ImFileOpen((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImFileHandle)0;
  }
}


EXPORT int _wrap_ImFileClose (ImFileHandle larg1) {
  int lresult = (int)0 ;
  ImFileHandle arg1 = (ImFileHandle) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImFileClose(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImU64 *_wrap_ImFileGetSize (ImFileHandle larg1) {
  ImU64 * lresult = (ImU64 *)0 ;
  ImFileHandle arg1 = (ImFileHandle) 0 ;
  ImU64 result;
  
  arg1 = larg1;
  try {
    result = (ImU64)ImFileGetSize(arg1);
    lresult = new ImU64(result);
    return lresult;
  } catch (...) {
    return (ImU64 *)0;
  }
}


EXPORT ImU64 *_wrap_ImFileRead (void *larg1, ImU64 *larg2, ImU64 *larg3, ImFileHandle larg4) {
  ImU64 * lresult = (ImU64 *)0 ;
  void *arg1 = (void *) 0 ;
  ImU64 arg2 ;
  ImU64 arg3 ;
  ImFileHandle arg4 = (ImFileHandle) 0 ;
  ImU64 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (ImU64)ImFileRead(arg1,arg2,arg3,arg4);
    lresult = new ImU64(result);
    return lresult;
  } catch (...) {
    return (ImU64 *)0;
  }
}


EXPORT ImU64 *_wrap_ImFileWrite (void *larg1, ImU64 *larg2, ImU64 *larg3, ImFileHandle larg4) {
  ImU64 * lresult = (ImU64 *)0 ;
  void *arg1 = (void *) 0 ;
  ImU64 arg2 ;
  ImU64 arg3 ;
  ImFileHandle arg4 = (ImFileHandle) 0 ;
  ImU64 result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (ImU64)ImFileWrite((void const *)arg1,arg2,arg3,arg4);
    lresult = new ImU64(result);
    return lresult;
  } catch (...) {
    return (ImU64 *)0;
  }
}


EXPORT void *_wrap_ImFileLoadToMemory__SWIG_0 (char *larg1, char *larg2, size_t *larg3, int larg4) {
  void * lresult = (void *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  int arg4 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_ImFileLoadToMemory__SWIG_1 (char *larg1, char *larg2, size_t *larg3) {
  void * lresult = (void *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_ImFileLoadToMemory__SWIG_2 (char *larg1, char *larg2) {
  void * lresult = (void *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (void *)ImFileLoadToMemory((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT float _wrap_ImPow__SWIG_0 (float larg1, float larg2) {
  float lresult = (float)0 ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImPow(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT double _wrap_ImPow__SWIG_1 (double larg1, double larg2) {
  double lresult = (double)0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (double)ImPow(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT float _wrap_ImLog__SWIG_0 (float larg1) {
  float lresult = (float)0 ;
  float arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImLog(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT double _wrap_ImLog__SWIG_1 (double larg1) {
  double lresult = (double)0 ;
  double arg1 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)ImLog(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT float _wrap_ImAbs__SWIG_0 (float larg1) {
  float lresult = (float)0 ;
  float arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImAbs(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT double _wrap_ImAbs__SWIG_1 (double larg1) {
  double lresult = (double)0 ;
  double arg1 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)ImAbs(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT float _wrap_ImSign__SWIG_0 (float larg1) {
  float lresult = (float)0 ;
  float arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImSign(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT double _wrap_ImSign__SWIG_1 (double larg1) {
  double lresult = (double)0 ;
  double arg1 ;
  double result;
  
  arg1 = larg1;
  try {
    result = (double)ImSign(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (double)0;
  }
}


EXPORT ImVec2 *_wrap_ImMin (ImVec2 *larg1, ImVec2 *larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImMin((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImMax (ImVec2 *larg1, ImVec2 *larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImMax((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImClamp (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 arg3 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = ImClamp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImLerp__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2, float larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImLerp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImLerp__SWIG_2 (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImLerp((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec4 *_wrap_ImLerp__SWIG_3 (ImVec4 *larg1, ImVec4 *larg2, float larg3) {
  ImVec4 * lresult = (ImVec4 *)0 ;
  ImVec4 *arg1 = 0 ;
  ImVec4 *arg2 = 0 ;
  float arg3 ;
  ImVec4 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImLerp((ImVec4 const &)*arg1,(ImVec4 const &)*arg2,arg3);
    lresult = new ImVec4(result);
    return lresult;
  } catch (...) {
    return (ImVec4 *)0;
  }
}


EXPORT float _wrap_ImSaturate (float larg1) {
  float lresult = (float)0 ;
  float arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImSaturate(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_ImLengthSqr__SWIG_0 (ImVec2 *larg1) {
  float lresult = (float)0 ;
  ImVec2 *arg1 = 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImLengthSqr((ImVec2 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_ImLengthSqr__SWIG_1 (ImVec4 *larg1) {
  float lresult = (float)0 ;
  ImVec4 *arg1 = 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImLengthSqr((ImVec4 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_ImInvLength (ImVec2 *larg1, float larg2) {
  float lresult = (float)0 ;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImInvLength((ImVec2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_ImFloor__SWIG_0 (float larg1) {
  float lresult = (float)0 ;
  float arg1 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)ImFloor(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImVec2 *_wrap_ImFloor__SWIG_1 (ImVec2 *larg1) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  try {
    result = ImFloor((ImVec2 const &)*arg1);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT int _wrap_ImModPositive (int larg1, int larg2) {
  int lresult = (int)0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)ImModPositive(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_ImDot (ImVec2 *larg1, ImVec2 *larg2) {
  float lresult = (float)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImDot((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImVec2 *_wrap_ImRotate (ImVec2 *larg1, float larg2, float larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImRotate((ImVec2 const &)*arg1,arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT float _wrap_ImLinearSweep (float larg1, float larg2, float larg3) {
  float lresult = (float)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (float)ImLinearSweep(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImVec2 *_wrap_ImMul (ImVec2 *larg1, ImVec2 *larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImMul((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImBezierCalc (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, float larg5) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  float arg5 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = ImBezierCalc((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImBezierClosestPoint (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, ImVec2 *larg5, int larg6) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  int arg6 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = ImBezierClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImBezierClosestPointCasteljau (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, ImVec2 *larg5, float larg6) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  float arg6 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = ImBezierClosestPointCasteljau((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_ImLineClosestPoint (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImLineClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT int _wrap_ImTriangleContainsPoint (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4) {
  int lresult = (int)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImTriangleContainsPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_ImTriangleClosestPoint (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ImTriangleClosestPoint((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_ImTriangleBarycentricCoords (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3, ImVec2 *larg4, float *larg5, float *larg6, float *larg7) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImTriangleBarycentricCoords((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,*arg5,*arg6,*arg7);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_ImTriangleArea (ImVec2 *larg1, ImVec2 *larg2, ImVec2 *larg3) {
  float lresult = (float)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (float)ImTriangleArea((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImGuiDir _wrap_ImGetDirQuadrantFromDelta (float larg1, float larg2) {
  ImGuiDir lresult = (ImGuiDir)0 ;
  float arg1 ;
  float arg2 ;
  ImGuiDir result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiDir)ImGetDirQuadrantFromDelta(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiDir)0;
  }
}


EXPORT int _wrap_ImBitArrayTestBit (ImU32 *larg1, int larg2) {
  int lresult = (int)0 ;
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImBitArrayTestBit((unsigned int const *)arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImBitArrayClearBit (ImU32 *larg1, int larg2) {
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImBitArrayClearBit(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImBitArraySetBit (ImU32 *larg1, int larg2) {
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImBitArraySetBit(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImBitArraySetBitRange (ImU32 *larg1, int larg2, int larg3) {
  ImU32 *arg1 = (ImU32 *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImBitArraySetBitRange(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT ImGuiWindow *_wrap_GetCurrentWindowRead () {
  ImGuiWindow * lresult = (ImGuiWindow *)0 ;
  ImGuiWindow *result = 0 ;
  
  try {
    result = (ImGuiWindow *)ImGui::GetCurrentWindowRead();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindow *)0;
  }
}


EXPORT ImGuiWindow *_wrap_GetCurrentWindow () {
  ImGuiWindow * lresult = (ImGuiWindow *)0 ;
  ImGuiWindow *result = 0 ;
  
  try {
    result = (ImGuiWindow *)ImGui::GetCurrentWindow();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindow *)0;
  }
}


EXPORT ImGuiWindow *_wrap_FindWindowByID (ImGuiID larg1) {
  ImGuiWindow * lresult = (ImGuiWindow *)0 ;
  ImGuiID arg1 ;
  ImGuiWindow *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiWindow *)ImGui::FindWindowByID(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindow *)0;
  }
}


EXPORT ImGuiWindow *_wrap_FindWindowByName (char *larg1) {
  ImGuiWindow * lresult = (ImGuiWindow *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiWindow *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiWindow *)ImGui::FindWindowByName((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindow *)0;
  }
}


EXPORT void _wrap_UpdateWindowParentAndRootLinks (ImGuiWindow *larg1, ImGuiWindowFlags larg2, ImGuiWindow *larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindowFlags arg2 ;
  ImGuiWindow *arg3 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::UpdateWindowParentAndRootLinks(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_CalcWindowExpectedSize (ImGuiWindow *larg1) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  try {
    result = ImGui::CalcWindowExpectedSize(arg1);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT int _wrap_IsWindowChildOf (ImGuiWindow *larg1, ImGuiWindow *larg2) {
  int lresult = (int)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsWindowChildOf(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsWindowNavFocusable (ImGuiWindow *larg1) {
  int lresult = (int)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsWindowNavFocusable(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImRect *_wrap_GetWindowAllowedExtentRect (ImGuiWindow *larg1) {
  ImRect * lresult = (ImRect *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect result;
  
  arg1 = larg1;
  try {
    result = ImGui::GetWindowAllowedExtentRect(arg1);
    lresult = new ImRect(result);
    return lresult;
  } catch (...) {
    return (ImRect *)0;
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_4 (ImGuiWindow *larg1, ImVec2 *larg2, ImGuiCond larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowPos(arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowPos__SWIG_5 (ImGuiWindow *larg1, ImVec2 *larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowPos(arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_4 (ImGuiWindow *larg1, ImVec2 *larg2, ImGuiCond larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowSize(arg1,(ImVec2 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowSize__SWIG_5 (ImGuiWindow *larg1, ImVec2 *larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowSize(arg1,(ImVec2 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_4 (ImGuiWindow *larg1, int larg2, ImGuiCond larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowCollapsed(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowCollapsed__SWIG_5 (ImGuiWindow *larg1, int larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::SetWindowCollapsed(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetWindowHitTestHole (ImGuiWindow *larg1, ImVec2 *larg2, ImVec2 *larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetWindowHitTestHole(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_FocusWindow (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::FocusWindow(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_FocusTopMostWindowUnderOne (ImGuiWindow *larg1, ImGuiWindow *larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::FocusTopMostWindowUnderOne(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BringWindowToFocusFront (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::BringWindowToFocusFront(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BringWindowToDisplayFront (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::BringWindowToDisplayFront(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BringWindowToDisplayBack (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::BringWindowToDisplayBack(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetCurrentFont (ImFont *larg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetCurrentFont(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImFont *_wrap_GetDefaultFont () {
  ImFont * lresult = (ImFont *)0 ;
  ImFont *result = 0 ;
  
  try {
    result = (ImFont *)ImGui::GetDefaultFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImFont *)0;
  }
}


EXPORT ImDrawList *_wrap_GetForegroundDrawList__SWIG_1 (ImGuiWindow *larg1) {
  ImDrawList * lresult = (ImDrawList *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImDrawList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImDrawList *)ImGui::GetForegroundDrawList(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImDrawList *)0;
  }
}


EXPORT void _wrap_Initialize (ImGuiContext *larg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::Initialize(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_Shutdown (ImGuiContext *larg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::Shutdown(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_UpdateHoveredWindowAndCaptureFlags () {
  try {
    ImGui::UpdateHoveredWindowAndCaptureFlags();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_StartMouseMovingWindow (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::StartMouseMovingWindow(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_UpdateMouseMovingWindowNewFrame () {
  try {
    ImGui::UpdateMouseMovingWindowNewFrame();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_UpdateMouseMovingWindowEndFrame () {
  try {
    ImGui::UpdateMouseMovingWindowEndFrame();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_MarkIniSettingsDirty__SWIG_0 () {
  try {
    ImGui::MarkIniSettingsDirty();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_MarkIniSettingsDirty__SWIG_1 (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::MarkIniSettingsDirty(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ClearIniSettings () {
  try {
    ImGui::ClearIniSettings();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiWindowSettings *_wrap_CreateNewWindowSettings (char *larg1) {
  ImGuiWindowSettings * lresult = (ImGuiWindowSettings *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiWindowSettings *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiWindowSettings *)ImGui::CreateNewWindowSettings((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindowSettings *)0;
  }
}


EXPORT ImGuiWindowSettings *_wrap_FindWindowSettings (ImGuiID larg1) {
  ImGuiWindowSettings * lresult = (ImGuiWindowSettings *)0 ;
  ImGuiID arg1 ;
  ImGuiWindowSettings *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiWindowSettings *)ImGui::FindWindowSettings(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindowSettings *)0;
  }
}


EXPORT ImGuiWindowSettings *_wrap_FindOrCreateWindowSettings (char *larg1) {
  ImGuiWindowSettings * lresult = (ImGuiWindowSettings *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiWindowSettings *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiWindowSettings *)ImGui::FindOrCreateWindowSettings((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindowSettings *)0;
  }
}


EXPORT ImGuiSettingsHandler *_wrap_FindSettingsHandler (char *larg1) {
  ImGuiSettingsHandler * lresult = (ImGuiSettingsHandler *)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiSettingsHandler *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiSettingsHandler *)ImGui::FindSettingsHandler((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiSettingsHandler *)0;
  }
}


EXPORT void _wrap_SetNextWindowScroll (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::SetNextWindowScroll((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollX__SWIG_1 (ImGuiWindow *larg1, float larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollX(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollY__SWIG_1 (ImGuiWindow *larg1, float larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollY(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosX__SWIG_2 (ImGuiWindow *larg1, float larg2, float larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetScrollFromPosX(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosX__SWIG_3 (ImGuiWindow *larg1, float larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollFromPosX(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosY__SWIG_2 (ImGuiWindow *larg1, float larg2, float larg3) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetScrollFromPosY(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetScrollFromPosY__SWIG_3 (ImGuiWindow *larg1, float larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetScrollFromPosY(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_ScrollToBringRectIntoView (ImGuiWindow *larg1, ImRect *larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImGui::ScrollToBringRectIntoView(arg1,(ImRect const &)*arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImGuiID _wrap_GetItemID () {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiID result;
  
  try {
    result = (ImGuiID)ImGui::GetItemID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiItemStatusFlags _wrap_GetItemStatusFlags () {
  ImGuiItemStatusFlags lresult = (ImGuiItemStatusFlags)0 ;
  ImGuiItemStatusFlags result;
  
  try {
    result = (ImGuiItemStatusFlags)ImGui::GetItemStatusFlags();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiItemStatusFlags)0;
  }
}


EXPORT ImGuiID _wrap_GetActiveID () {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiID result;
  
  try {
    result = (ImGuiID)ImGui::GetActiveID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiID _wrap_GetFocusID () {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiID result;
  
  try {
    result = (ImGuiID)ImGui::GetFocusID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT void _wrap_SetActiveID (ImGuiID larg1, ImGuiWindow *larg2) {
  ImGuiID arg1 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetActiveID(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetFocusID (ImGuiID larg1, ImGuiWindow *larg2) {
  ImGuiID arg1 ;
  ImGuiWindow *arg2 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetFocusID(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ClearActiveID () {
  try {
    ImGui::ClearActiveID();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiID _wrap_GetHoveredID () {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiID result;
  
  try {
    result = (ImGuiID)ImGui::GetHoveredID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT void _wrap_SetHoveredID (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SetHoveredID(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_KeepAliveID (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::KeepAliveID(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_MarkItemEdited (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::MarkItemEdited(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushOverrideID (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushOverrideID(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ItemSize__SWIG_0 (ImVec2 *larg1, float larg2) {
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::ItemSize((ImVec2 const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ItemSize__SWIG_1 (ImVec2 *larg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ItemSize((ImVec2 const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ItemSize__SWIG_2 (ImRect *larg1, float larg2) {
  ImRect *arg1 = 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::ItemSize((ImRect const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ItemSize__SWIG_3 (ImRect *larg1) {
  ImRect *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ImGui::ItemSize((ImRect const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ItemAdd__SWIG_0 (ImRect *larg1, ImGuiID larg2, ImRect *larg3) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImRect *arg3 = (ImRect *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ItemAdd((ImRect const &)*arg1,arg2,(ImRect const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ItemAdd__SWIG_1 (ImRect *larg1, ImGuiID larg2) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ItemAdd((ImRect const &)*arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ItemHoverable (ImRect *larg1, ImGuiID larg2) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ItemHoverable((ImRect const &)*arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsClippedEx (ImRect *larg1, ImGuiID larg2, int larg3) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)ImGui::IsClippedEx((ImRect const &)*arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SetLastItemData (ImGuiWindow *larg1, ImGuiID larg2, ImGuiItemStatusFlags larg3, ImRect *larg4) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  ImGuiItemStatusFlags arg3 ;
  ImRect *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::SetLastItemData(arg1,arg2,arg3,(ImRect const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_FocusableItemRegister (ImGuiWindow *larg1, ImGuiID larg2) {
  int lresult = (int)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::FocusableItemRegister(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_FocusableItemUnregister (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::FocusableItemUnregister(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImVec2 *_wrap_CalcItemSize (ImVec2 *larg1, float larg2, float larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 arg1 ;
  float arg2 ;
  float arg3 ;
  ImVec2 result;
  
  arg1 = *larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImGui::CalcItemSize(arg1,arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT float _wrap_CalcWrapWidthForPos (ImVec2 *larg1, float larg2) {
  float lresult = (float)0 ;
  ImVec2 *arg1 = 0 ;
  float arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImGui::CalcWrapWidthForPos((ImVec2 const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_PushMultiItemsWidths (int larg1, float larg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::PushMultiItemsWidths(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushItemFlag (ImGuiItemFlags larg1, int larg2) {
  ImGuiItemFlags arg1 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::PushItemFlag(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopItemFlag () {
  try {
    ImGui::PopItemFlag();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsItemToggledSelection () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsItemToggledSelection();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_GetContentRegionMaxAbs () {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 result;
  
  try {
    result = ImGui::GetContentRegionMaxAbs();
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_ShrinkWidths (ImGuiShrinkWidthItem *larg1, int larg2, float larg3) {
  ImGuiShrinkWidthItem *arg1 = (ImGuiShrinkWidthItem *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::ShrinkWidths(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogBegin (ImGuiLogType larg1, int larg2) {
  ImGuiLogType arg1 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::LogBegin(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToBuffer__SWIG_0 (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::LogToBuffer(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogToBuffer__SWIG_1 () {
  try {
    ImGui::LogToBuffer();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_BeginChildEx (char *larg1, ImGuiID larg2, ImVec2 *larg3, int larg4, ImGuiWindowFlags larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiID arg2 ;
  ImVec2 *arg3 = 0 ;
  bool arg4 ;
  ImGuiWindowFlags arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::BeginChildEx((char const *)arg1,arg2,(ImVec2 const &)*arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_OpenPopupEx__SWIG_0 (ImGuiID larg1, ImGuiPopupFlags larg2) {
  ImGuiID arg1 ;
  ImGuiPopupFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::OpenPopupEx(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_OpenPopupEx__SWIG_1 (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::OpenPopupEx(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ClosePopupToLevel (int larg1, int larg2) {
  int arg1 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::ClosePopupToLevel(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ClosePopupsOverWindow (ImGuiWindow *larg1, int larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::ClosePopupsOverWindow(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsPopupOpen__SWIG_2 (ImGuiID larg1, ImGuiPopupFlags larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsPopupOpen(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_BeginPopupEx (ImGuiID larg1, ImGuiWindowFlags larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginPopupEx(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_BeginTooltipEx (ImGuiWindowFlags larg1, ImGuiTooltipFlags larg2) {
  ImGuiWindowFlags arg1 ;
  ImGuiTooltipFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::BeginTooltipEx(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT ImGuiWindow *_wrap_GetTopMostPopupModal () {
  ImGuiWindow * lresult = (ImGuiWindow *)0 ;
  ImGuiWindow *result = 0 ;
  
  try {
    result = (ImGuiWindow *)ImGui::GetTopMostPopupModal();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiWindow *)0;
  }
}


EXPORT ImVec2 *_wrap_FindBestWindowPosForPopup (ImGuiWindow *larg1) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  try {
    result = ImGui::FindBestWindowPosForPopup(arg1);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_FindBestWindowPosForPopupEx__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, ImGuiDir *larg3, ImRect *larg4, ImRect *larg5, ImGuiPopupPositionPolicy larg6) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDir *arg3 = (ImGuiDir *) 0 ;
  ImRect *arg4 = 0 ;
  ImRect *arg5 = 0 ;
  ImGuiPopupPositionPolicy arg6 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = ImGui::FindBestWindowPosForPopupEx((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,(ImRect const &)*arg4,(ImRect const &)*arg5,arg6);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_FindBestWindowPosForPopupEx__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2, ImGuiDir *larg3, ImRect *larg4, ImRect *larg5) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDir *arg3 = (ImGuiDir *) 0 ;
  ImRect *arg4 = 0 ;
  ImRect *arg5 = 0 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = ImGui::FindBestWindowPosForPopupEx((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,(ImRect const &)*arg4,(ImRect const &)*arg5);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_NavInitWindow (ImGuiWindow *larg1, int larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    ImGui::NavInitWindow(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_NavMoveRequestButNoResultYet () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::NavMoveRequestButNoResultYet();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_NavMoveRequestCancel () {
  try {
    ImGui::NavMoveRequestCancel();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NavMoveRequestForward (ImGuiDir larg1, ImGuiDir larg2, ImRect *larg3, ImGuiNavMoveFlags larg4) {
  ImGuiDir arg1 ;
  ImGuiDir arg2 ;
  ImRect *arg3 = 0 ;
  ImGuiNavMoveFlags arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::NavMoveRequestForward(arg1,arg2,(ImRect const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_NavMoveRequestTryWrapping (ImGuiWindow *larg1, ImGuiNavMoveFlags larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiNavMoveFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::NavMoveRequestTryWrapping(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_GetNavInputAmount (ImGuiNavInput larg1, ImGuiInputReadMode larg2) {
  float lresult = (float)0 ;
  ImGuiNavInput arg1 ;
  ImGuiInputReadMode arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImGui::GetNavInputAmount(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT ImVec2 *_wrap_GetNavInputAmount2d__SWIG_0 (ImGuiNavDirSourceFlags larg1, ImGuiInputReadMode larg2, float larg3, float larg4) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ImGui::GetNavInputAmount2d(arg1,arg2,arg3,arg4);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetNavInputAmount2d__SWIG_1 (ImGuiNavDirSourceFlags larg1, ImGuiInputReadMode larg2, float larg3) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  float arg3 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ImGui::GetNavInputAmount2d(arg1,arg2,arg3);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT ImVec2 *_wrap_GetNavInputAmount2d__SWIG_2 (ImGuiNavDirSourceFlags larg1, ImGuiInputReadMode larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  ImGuiNavDirSourceFlags arg1 ;
  ImGuiInputReadMode arg2 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImGui::GetNavInputAmount2d(arg1,arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT int _wrap_CalcTypematicRepeatAmount (float larg1, float larg2, float larg3, float larg4) {
  int lresult = (int)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (int)ImGui::CalcTypematicRepeatAmount(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ActivateItem (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::ActivateItem(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNavID (ImGuiID larg1, int larg2, ImGuiID larg3) {
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiID arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::SetNavID(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SetNavIDWithRectRel (ImGuiID larg1, int larg2, ImGuiID larg3, ImRect *larg4) {
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiID arg3 ;
  ImRect *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::SetNavIDWithRectRel(arg1,arg2,arg3,(ImRect const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushFocusScope (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushFocusScope(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopFocusScope () {
  try {
    ImGui::PopFocusScope();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiID _wrap_GetFocusScopeID () {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiID result;
  
  try {
    result = (ImGuiID)ImGui::GetFocusScopeID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT int _wrap_IsActiveIdUsingNavDir (ImGuiDir larg1) {
  int lresult = (int)0 ;
  ImGuiDir arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsActiveIdUsingNavDir(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsActiveIdUsingNavInput (ImGuiNavInput larg1) {
  int lresult = (int)0 ;
  ImGuiNavInput arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsActiveIdUsingNavInput(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsActiveIdUsingKey (ImGuiKey larg1) {
  int lresult = (int)0 ;
  ImGuiKey arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsActiveIdUsingKey(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseDragPastThreshold__SWIG_0 (ImGuiMouseButton larg1, float larg2) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsMouseDragPastThreshold(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsMouseDragPastThreshold__SWIG_1 (ImGuiMouseButton larg1) {
  int lresult = (int)0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsMouseDragPastThreshold(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyPressedMap__SWIG_0 (ImGuiKey larg1, int larg2) {
  int lresult = (int)0 ;
  ImGuiKey arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)ImGui::IsKeyPressedMap(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsKeyPressedMap__SWIG_1 (ImGuiKey larg1) {
  int lresult = (int)0 ;
  ImGuiKey arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsKeyPressedMap(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsNavInputDown (ImGuiNavInput larg1) {
  int lresult = (int)0 ;
  ImGuiNavInput arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::IsNavInputDown(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IsNavInputTest (ImGuiNavInput larg1, ImGuiInputReadMode larg2) {
  int lresult = (int)0 ;
  ImGuiNavInput arg1 ;
  ImGuiInputReadMode arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::IsNavInputTest(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImGuiKeyModFlags _wrap_GetMergedKeyModFlags () {
  ImGuiKeyModFlags lresult = (ImGuiKeyModFlags)0 ;
  ImGuiKeyModFlags result;
  
  try {
    result = (ImGuiKeyModFlags)ImGui::GetMergedKeyModFlags();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiKeyModFlags)0;
  }
}


EXPORT int _wrap_BeginDragDropTargetCustom (ImRect *larg1, ImGuiID larg2) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::BeginDragDropTargetCustom((ImRect const &)*arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ClearDragDrop () {
  try {
    ImGui::ClearDragDrop();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IsDragDropPayloadBeingAccepted () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui::IsDragDropPayloadBeingAccepted();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SetWindowClipRectBeforeSetChannel (ImGuiWindow *larg1, ImRect *larg2) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImRect *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::SetWindowClipRectBeforeSetChannel(arg1,(ImRect const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BeginColumns__SWIG_0 (char *larg1, int larg2, ImGuiColumnsFlags larg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiColumnsFlags arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::BeginColumns((char const *)arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_BeginColumns__SWIG_1 (char *larg1, int larg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::BeginColumns((char const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_EndColumns () {
  try {
    ImGui::EndColumns();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushColumnClipRect (int larg1) {
  int arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::PushColumnClipRect(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PushColumnsBackground () {
  try {
    ImGui::PushColumnsBackground();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_PopColumnsBackground () {
  try {
    ImGui::PopColumnsBackground();
    
  } catch (...) {
    
  }
}


EXPORT ImGuiID _wrap_GetColumnsID (char *larg1, int larg2) {
  ImGuiID lresult = (ImGuiID)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiID)ImGui::GetColumnsID((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiColumns *_wrap_FindOrCreateColumns (ImGuiWindow *larg1, ImGuiID larg2) {
  ImGuiColumns * lresult = (ImGuiColumns *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiID arg2 ;
  ImGuiColumns *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiColumns *)ImGui::FindOrCreateColumns(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiColumns *)0;
  }
}


EXPORT float _wrap_GetColumnOffsetFromNorm (ImGuiColumns *larg1, float larg2) {
  float lresult = (float)0 ;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImGui::GetColumnOffsetFromNorm((ImGuiColumns const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_GetColumnNormFromOffset (ImGuiColumns *larg1, float larg2) {
  float lresult = (float)0 ;
  ImGuiColumns *arg1 = (ImGuiColumns *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)ImGui::GetColumnNormFromOffset((ImGuiColumns const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT int _wrap_BeginTabBarEx (ImGuiTabBar *larg1, ImRect *larg2, ImGuiTabBarFlags larg3) {
  int lresult = (int)0 ;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabBarFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::BeginTabBarEx(arg1,(ImRect const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImGuiTabItem *_wrap_TabBarFindTabByID (ImGuiTabBar *larg1, ImGuiID larg2) {
  ImGuiTabItem * lresult = (ImGuiTabItem *)0 ;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  ImGuiTabItem *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiTabItem *)ImGui::TabBarFindTabByID(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiTabItem *)0;
  }
}


EXPORT void _wrap_TabBarRemoveTab (ImGuiTabBar *larg1, ImGuiID larg2) {
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::TabBarRemoveTab(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TabBarCloseTab (ImGuiTabBar *larg1, ImGuiTabItem *larg2) {
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::TabBarCloseTab(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TabBarQueueChangeTabOrder (ImGuiTabBar *larg1, ImGuiTabItem *larg2, int larg3) {
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  ImGuiTabItem *arg2 = (ImGuiTabItem *) 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::TabBarQueueChangeTabOrder(arg1,(ImGuiTabItem const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_TabItemEx (ImGuiTabBar *larg1, char *larg2, bool *larg3, ImGuiTabItemFlags larg4) {
  int lresult = (int)0 ;
  ImGuiTabBar *arg1 = (ImGuiTabBar *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  ImGuiTabItemFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::TabItemEx(arg1,(char const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImVec2 *_wrap_TabItemCalcSize (char *larg1, int larg2) {
  ImVec2 * lresult = (ImVec2 *)0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImVec2 result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ImGui::TabItemCalcSize((char const *)arg1,arg2);
    lresult = new ImVec2(result);
    return lresult;
  } catch (...) {
    return (ImVec2 *)0;
  }
}


EXPORT void _wrap_TabItemBackground (ImDrawList *larg1, ImRect *larg2, ImGuiTabItemFlags larg3, ImU32 larg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabItemFlags arg3 ;
  ImU32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::TabItemBackground(arg1,(ImRect const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_TabItemLabelAndCloseButton (ImDrawList *larg1, ImRect *larg2, ImGuiTabItemFlags larg3, ImVec2 *larg4, char *larg5, ImGuiID larg6, ImGuiID larg7, int larg8) {
  int lresult = (int)0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImGuiTabItemFlags arg3 ;
  ImVec2 arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiID arg6 ;
  ImGuiID arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (bool)ImGui::TabItemLabelAndCloseButton(arg1,(ImRect const &)*arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_RenderText__SWIG_0 (ImVec2 *larg1, char *larg2, char *larg3, int larg4) {
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    ImGui::RenderText(arg1,(char const *)arg2,(char const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderText__SWIG_1 (ImVec2 *larg1, char *larg2, char *larg3) {
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::RenderText(arg1,(char const *)arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderText__SWIG_2 (ImVec2 *larg1, char *larg2) {
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  try {
    ImGui::RenderText(arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextWrapped (ImVec2 *larg1, char *larg2, char *larg3, float larg4) {
  ImVec2 arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::RenderTextWrapped(arg1,(char const *)arg2,(char const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClipped__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, char *larg3, char *larg4, ImVec2 *larg5, ImVec2 *larg6, ImRect *larg7) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  ImVec2 *arg6 = 0 ;
  ImRect *arg7 = (ImRect *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5,(ImVec2 const &)*arg6,(ImRect const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClipped__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2, char *larg3, char *larg4, ImVec2 *larg5, ImVec2 *larg6) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  ImVec2 *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5,(ImVec2 const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClipped__SWIG_2 (ImVec2 *larg1, ImVec2 *larg2, char *larg3, char *larg4, ImVec2 *larg5) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::RenderTextClipped((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,(char const *)arg3,(char const *)arg4,(ImVec2 const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClippedEx__SWIG_0 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, char *larg4, char *larg5, ImVec2 *larg6, ImVec2 *larg7, ImRect *larg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  ImVec2 *arg7 = 0 ;
  ImRect *arg8 = (ImRect *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6,(ImVec2 const &)*arg7,(ImRect const *)arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClippedEx__SWIG_1 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, char *larg4, char *larg5, ImVec2 *larg6, ImVec2 *larg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  ImVec2 *arg7 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6,(ImVec2 const &)*arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextClippedEx__SWIG_2 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, char *larg4, char *larg5, ImVec2 *larg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 *arg6 = (ImVec2 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::RenderTextClippedEx(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(char const *)arg4,(char const *)arg5,(ImVec2 const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderTextEllipsis (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, float larg4, float larg5, char *larg6, char *larg7, ImVec2 *larg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  ImVec2 *arg8 = (ImVec2 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImGui::RenderTextEllipsis(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(ImVec2 const *)arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderFrame__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, ImU32 larg3, int larg4, float larg5) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  bool arg4 ;
  float arg5 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    ImGui::RenderFrame(arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderFrame__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2, ImU32 larg3, int larg4) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  bool arg4 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    ImGui::RenderFrame(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderFrame__SWIG_2 (ImVec2 *larg1, ImVec2 *larg2, ImU32 larg3) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    ImGui::RenderFrame(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderFrameBorder__SWIG_0 (ImVec2 *larg1, ImVec2 *larg2, float larg3) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  float arg3 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    ImGui::RenderFrameBorder(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderFrameBorder__SWIG_1 (ImVec2 *larg1, ImVec2 *larg2) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  try {
    ImGui::RenderFrameBorder(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_0 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, ImU32 larg4, float larg5, ImVec2 *larg6, float larg7, int larg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  float arg7 ;
  int arg8 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_1 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, ImU32 larg4, float larg5, ImVec2 *larg6, float larg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  float arg7 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = larg7;
  try {
    ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderColorRectWithAlphaCheckerboard__SWIG_2 (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, ImU32 larg4, float larg5, ImVec2 *larg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 arg6 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    ImGui::RenderColorRectWithAlphaCheckerboard(arg1,arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderNavHighlight__SWIG_0 (ImRect *larg1, ImGuiID larg2, ImGuiNavHighlightFlags larg3) {
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiNavHighlightFlags arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::RenderNavHighlight((ImRect const &)*arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderNavHighlight__SWIG_1 (ImRect *larg1, ImGuiID larg2) {
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::RenderNavHighlight((ImRect const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_FindRenderedTextEnd__SWIG_0 (char *larg1, char *larg2) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)ImGui::FindRenderedTextEnd((char const *)arg1,(char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_FindRenderedTextEnd__SWIG_1 (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ImGui::FindRenderedTextEnd((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_LogRenderedText__SWIG_0 (ImVec2 *larg1, char *larg2, char *larg3) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::LogRenderedText((ImVec2 const *)arg1,(char const *)arg2,(char const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_LogRenderedText__SWIG_1 (ImVec2 *larg1, char *larg2) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::LogRenderedText((ImVec2 const *)arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderArrow__SWIG_0 (ImDrawList *larg1, ImVec2 *larg2, ImU32 larg3, ImGuiDir larg4, float larg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImGuiDir arg4 ;
  float arg5 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::RenderArrow(arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderArrow__SWIG_1 (ImDrawList *larg1, ImVec2 *larg2, ImU32 larg3, ImGuiDir larg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  ImGuiDir arg4 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::RenderArrow(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderBullet__SWIG_0 (ImDrawList *larg1, ImVec2 *larg2, ImU32 larg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    ImGui::RenderBullet(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderCheckMark (ImDrawList *larg1, ImVec2 *larg2, ImU32 larg3, float larg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  float arg4 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ImGui::RenderCheckMark(arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderMouseCursor (ImDrawList *larg1, ImVec2 *larg2, float larg3, ImGuiMouseCursor larg4, ImU32 larg5, ImU32 larg6, ImU32 larg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImGuiMouseCursor arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::RenderMouseCursor(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderArrowPointingAt (ImDrawList *larg1, ImVec2 *larg2, ImVec2 *larg3, ImGuiDir larg4, ImU32 larg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImGuiDir arg4 ;
  ImU32 arg5 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::RenderArrowPointingAt(arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderRectFilledRangeH (ImDrawList *larg1, ImRect *larg2, ImU32 larg3, float larg4, float larg5, float larg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect *arg2 = 0 ;
  ImU32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ImGui::RenderRectFilledRangeH(arg1,(ImRect const &)*arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderRectFilledWithHole (ImDrawList *larg1, ImRect *larg2, ImRect *larg3, ImU32 larg4, float larg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImRect arg2 ;
  ImRect arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::RenderRectFilledWithHole(arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderArrow__SWIG_2 (ImVec2 *larg1, ImGuiDir larg2, float larg3) {
  ImVec2 arg1 ;
  ImGuiDir arg2 ;
  float arg3 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::RenderArrow(arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderArrow__SWIG_3 (ImVec2 *larg1, ImGuiDir larg2) {
  ImVec2 arg1 ;
  ImGuiDir arg2 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  try {
    ImGui::RenderArrow(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_RenderBullet__SWIG_1 (ImVec2 *larg1) {
  ImVec2 arg1 ;
  
  arg1 = *larg1;
  try {
    ImGui::RenderBullet(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TextEx__SWIG_0 (char *larg1, char *larg2, ImGuiTextFlags larg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiTextFlags arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::TextEx((char const *)arg1,(char const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TextEx__SWIG_1 (char *larg1, char *larg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::TextEx((char const *)arg1,(char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_TextEx__SWIG_2 (char *larg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::TextEx((char const *)arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ButtonEx__SWIG_0 (char *larg1, ImVec2 *larg2, ImGuiButtonFlags larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiButtonFlags arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::ButtonEx((char const *)arg1,(ImVec2 const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ButtonEx__SWIG_1 (char *larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::ButtonEx((char const *)arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ButtonEx__SWIG_2 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::ButtonEx((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CloseButton (ImGuiID larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::CloseButton(arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_CollapseButton (ImGuiID larg1, ImVec2 *larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::CollapseButton(arg1,(ImVec2 const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ArrowButtonEx__SWIG_0 (char *larg1, ImGuiDir larg2, ImVec2 *larg3, ImGuiButtonFlags larg4) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  ImVec2 arg3 ;
  ImGuiButtonFlags arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::ArrowButtonEx((char const *)arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ArrowButtonEx__SWIG_1 (char *larg1, ImGuiDir larg2, ImVec2 *larg3) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  ImVec2 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)ImGui::ArrowButtonEx((char const *)arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_Scrollbar (ImGuiAxis larg1) {
  ImGuiAxis arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::Scrollbar(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ScrollbarEx (ImRect *larg1, ImGuiID larg2, ImGuiAxis larg3, float *larg4, float larg5, float larg6, ImDrawCornerFlags larg7) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  ImDrawCornerFlags arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::ScrollbarEx((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImageButtonEx (ImGuiID larg1, ImTextureID larg2, ImVec2 *larg3, ImVec2 *larg4, ImVec2 *larg5, ImVec2 *larg6, ImVec4 *larg7, ImVec4 *larg8) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  ImVec4 *arg8 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::ImageButtonEx(arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec4 const &)*arg7,(ImVec4 const &)*arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImRect *_wrap_GetWindowScrollbarRect (ImGuiWindow *larg1, ImGuiAxis larg2) {
  ImRect * lresult = (ImRect *)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiAxis arg2 ;
  ImRect result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ImGui::GetWindowScrollbarRect(arg1,arg2);
    lresult = new ImRect(result);
    return lresult;
  } catch (...) {
    return (ImRect *)0;
  }
}


EXPORT ImGuiID _wrap_GetWindowScrollbarID (ImGuiWindow *larg1, ImGuiAxis larg2) {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  ImGuiAxis arg2 ;
  ImGuiID result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiID)ImGui::GetWindowScrollbarID(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT ImGuiID _wrap_GetWindowResizeID (ImGuiWindow *larg1, int larg2) {
  ImGuiID lresult = (ImGuiID)0 ;
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  int arg2 ;
  ImGuiID result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ImGuiID)ImGui::GetWindowResizeID(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiID)0;
  }
}


EXPORT void _wrap_SeparatorEx (ImGuiSeparatorFlags larg1) {
  ImGuiSeparatorFlags arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::SeparatorEx(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ButtonBehavior__SWIG_0 (ImRect *larg1, ImGuiID larg2, bool *larg3, bool *larg4, ImGuiButtonFlags larg5) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  ImGuiButtonFlags arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::ButtonBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ButtonBehavior__SWIG_1 (ImRect *larg1, ImGuiID larg2, bool *larg3, bool *larg4) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::ButtonBehavior((ImRect const &)*arg1,arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DragBehavior (ImGuiID larg1, ImGuiDataType larg2, void *larg3, float larg4, void *larg5, void *larg6, char *larg7, ImGuiSliderFlags larg8) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::DragBehavior(arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SliderBehavior (ImRect *larg1, ImGuiID larg2, ImGuiDataType larg3, void *larg4, void *larg5, void *larg6, char *larg7, ImGuiSliderFlags larg8, ImRect *larg9) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  ImRect *arg9 = (ImRect *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::SliderBehavior((ImRect const &)*arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SplitterBehavior__SWIG_0 (ImRect *larg1, ImGuiID larg2, ImGuiAxis larg3, float *larg4, float *larg5, float larg6, float larg7, float larg8, float larg9) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SplitterBehavior__SWIG_1 (ImRect *larg1, ImGuiID larg2, ImGuiAxis larg3, float *larg4, float *larg5, float larg6, float larg7, float larg8) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SplitterBehavior__SWIG_2 (ImRect *larg1, ImGuiID larg2, ImGuiAxis larg3, float *larg4, float *larg5, float larg6, float larg7) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  ImGuiAxis arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::SplitterBehavior((ImRect const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeBehavior__SWIG_0 (ImGuiID larg1, ImGuiTreeNodeFlags larg2, char *larg3, char *larg4) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::TreeNodeBehavior(arg1,arg2,(char const *)arg3,(char const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeBehavior__SWIG_1 (ImGuiID larg1, ImGuiTreeNodeFlags larg2, char *larg3) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)ImGui::TreeNodeBehavior(arg1,arg2,(char const *)arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeBehaviorIsOpen__SWIG_0 (ImGuiID larg1, ImGuiTreeNodeFlags larg2) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui::TreeNodeBehaviorIsOpen(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TreeNodeBehaviorIsOpen__SWIG_1 (ImGuiID larg1) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::TreeNodeBehaviorIsOpen(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_TreePushOverrideID (ImGuiID larg1) {
  ImGuiID arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::TreePushOverrideID(arg1);
    
  } catch (...) {
    
  }
}


EXPORT ImGuiDataTypeInfo *_wrap_DataTypeGetInfo (ImGuiDataType larg1) {
  ImGuiDataTypeInfo * lresult = (ImGuiDataTypeInfo *)0 ;
  ImGuiDataType arg1 ;
  ImGuiDataTypeInfo *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiDataTypeInfo *)ImGui::DataTypeGetInfo(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiDataTypeInfo *)0;
  }
}


EXPORT int _wrap_DataTypeFormatString (char *larg1, int larg2, ImGuiDataType larg3, void *larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (int)ImGui::DataTypeFormatString(arg1,arg2,arg3,(void const *)arg4,(char const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_DataTypeApplyOp (ImGuiDataType larg1, int larg2, void *larg3, void *larg4, void *larg5) {
  ImGuiDataType arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImGui::DataTypeApplyOp(arg1,arg2,arg3,arg4,(void const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_DataTypeApplyOpFromText (char *larg1, char *larg2, ImGuiDataType larg3, void *larg4, char *larg5) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)ImGui::DataTypeApplyOpFromText((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_DataTypeClamp (ImGuiDataType larg1, void *larg2, void *larg3, void *larg4) {
  int lresult = (int)0 ;
  ImGuiDataType arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)ImGui::DataTypeClamp(arg1,arg2,(void const *)arg3,(void const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextEx__SWIG_0 (char *larg1, char *larg2, char *larg3, int larg4, ImVec2 *larg5, ImGuiInputTextFlags larg6, ImGuiInputTextCallback larg7, void *larg8) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  ImGuiInputTextCallback arg7 = (ImGuiInputTextCallback) 0 ;
  void *arg8 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextEx__SWIG_1 (char *larg1, char *larg2, char *larg3, int larg4, ImVec2 *larg5, ImGuiInputTextFlags larg6, ImGuiInputTextCallback larg7) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  ImGuiInputTextCallback arg7 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_InputTextEx__SWIG_2 (char *larg1, char *larg2, char *larg3, int larg4, ImVec2 *larg5, ImGuiInputTextFlags larg6) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ImVec2 *arg5 = 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::InputTextEx((char const *)arg1,(char const *)arg2,arg3,arg4,(ImVec2 const &)*arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TempInputText (ImRect *larg1, ImGuiID larg2, char *larg3, char *larg4, int larg5, ImGuiInputTextFlags larg6) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::TempInputText((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TempInputScalar__SWIG_0 (ImRect *larg1, ImGuiID larg2, char *larg3, ImGuiDataType larg4, void *larg5, char *larg6, void *larg7, void *larg8) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,(void const *)arg7,(void const *)arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TempInputScalar__SWIG_1 (ImRect *larg1, ImGuiID larg2, char *larg3, ImGuiDataType larg4, void *larg5, char *larg6, void *larg7) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,(void const *)arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TempInputScalar__SWIG_2 (ImRect *larg1, ImGuiID larg2, char *larg3, ImGuiDataType larg4, void *larg5, char *larg6) {
  int lresult = (int)0 ;
  ImRect *arg1 = 0 ;
  ImGuiID arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiDataType arg4 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)ImGui::TempInputScalar((ImRect const &)*arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_TempInputIsActive (ImGuiID larg1) {
  int lresult = (int)0 ;
  ImGuiID arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui::TempInputIsActive(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ImGuiInputTextState *_wrap_GetInputTextState (ImGuiID larg1) {
  ImGuiInputTextState * lresult = (ImGuiInputTextState *)0 ;
  ImGuiID arg1 ;
  ImGuiInputTextState *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ImGuiInputTextState *)ImGui::GetInputTextState(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ImGuiInputTextState *)0;
  }
}


EXPORT void _wrap_ColorTooltip (char *larg1, float *larg2, ImGuiColorEditFlags larg3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  ImGuiColorEditFlags arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ImGui::ColorTooltip((char const *)arg1,(float const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ColorEditOptionsPopup (float *larg1, ImGuiColorEditFlags larg2) {
  float *arg1 = (float *) 0 ;
  ImGuiColorEditFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::ColorEditOptionsPopup((float const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ColorPickerOptionsPopup (float *larg1, ImGuiColorEditFlags larg2) {
  float *arg1 = (float *) 0 ;
  ImGuiColorEditFlags arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImGui::ColorPickerOptionsPopup((float const *)arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_PlotEx (ImGuiPlotType larg1, char *larg2, float (*larg3)(void *,int), void *larg4, int larg5, int larg6, char *larg7, float larg8, float larg9, ImVec2 *larg10) {
  int lresult = (int)0 ;
  ImGuiPlotType arg1 ;
  char *arg2 = (char *) 0 ;
  float (*arg3)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  float arg9 ;
  ImVec2 arg10 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = *larg10;
  try {
    result = (int)ImGui::PlotEx(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ShadeVertsLinearColorGradientKeepAlpha (ImDrawList *larg1, int larg2, int larg3, ImVec2 *larg4, ImVec2 *larg5, ImU32 larg6, ImU32 larg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImGui::ShadeVertsLinearColorGradientKeepAlpha(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ShadeVertsLinearUV (ImDrawList *larg1, int larg2, int larg3, ImVec2 *larg4, ImVec2 *larg5, ImVec2 *larg6, ImVec2 *larg7, int larg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  bool arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    ImGui::ShadeVertsLinearUV(arg1,arg2,arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GcCompactTransientWindowBuffers (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::GcCompactTransientWindowBuffers(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_GcAwakeTransientWindowBuffers (ImGuiWindow *larg1) {
  ImGuiWindow *arg1 = (ImGuiWindow *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui::GcAwakeTransientWindowBuffers(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_DebugDrawItemRect__SWIG_0 (ImU32 larg1) {
  ImU32 arg1 ;
  
  arg1 = larg1;
  try {
    ImGui::DebugDrawItemRect(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_DebugDrawItemRect__SWIG_1 () {
  try {
    ImGui::DebugDrawItemRect();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_DebugStartItemPicker () {
  try {
    ImGui::DebugStartItemPicker();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImFontAtlasBuildWithStbTruetype (ImFontAtlas *larg1) {
  int lresult = (int)0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImFontAtlasBuildWithStbTruetype(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImFontAtlasBuildInit (ImFontAtlas *larg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = larg1;
  try {
    ImFontAtlasBuildInit(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildSetupFont (ImFontAtlas *larg1, ImFont *larg2, ImFontConfig *larg3, float larg4, float larg5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImFontConfig *arg3 = (ImFontConfig *) 0 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ImFontAtlasBuildSetupFont(arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildPackCustomRects (ImFontAtlas *larg1, void *larg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImFontAtlasBuildPackCustomRects(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildFinish (ImFontAtlas *larg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = larg1;
  try {
    ImFontAtlasBuildFinish(arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildRender1bppRectFromString (ImFontAtlas *larg1, int larg2, int larg3, int larg4, int larg5, char *larg6, char larg7, unsigned char larg8) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  char arg7 ;
  unsigned char arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    ImFontAtlasBuildRender1bppRectFromString(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildMultiplyCalcLookupTable (unsigned char *larg1, float larg2) {
  unsigned char *arg1 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ImFontAtlasBuildMultiplyCalcLookupTable(arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImFontAtlasBuildMultiplyRectAlpha8 (unsigned char *larg1, unsigned char *larg2, int larg3, int larg4, int larg5, int larg6, int larg7) {
  unsigned char *arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    ImFontAtlasBuildMultiplyRectAlpha8((unsigned char const (*))arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImGui_ImplSDL2_InitForOpenGL (SDL_Window *larg1, void *larg2) {
  int lresult = (int)0 ;
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)ImGui_ImplSDL2_InitForOpenGL(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImGui_ImplSDL2_InitForVulkan (SDL_Window *larg1) {
  int lresult = (int)0 ;
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui_ImplSDL2_InitForVulkan(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImGui_ImplSDL2_InitForD3D (SDL_Window *larg1) {
  int lresult = (int)0 ;
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui_ImplSDL2_InitForD3D(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImGui_ImplSDL2_InitForMetal (SDL_Window *larg1) {
  int lresult = (int)0 ;
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui_ImplSDL2_InitForMetal(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImGui_ImplSDL2_Shutdown () {
  try {
    ImGui_ImplSDL2_Shutdown();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImGui_ImplSDL2_NewFrame (SDL_Window *larg1) {
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui_ImplSDL2_NewFrame(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImGui_ImplSDL2_ProcessEvent (SDL_Event *larg1) {
  int lresult = (int)0 ;
  SDL_Event *arg1 = (SDL_Event *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui_ImplSDL2_ProcessEvent((SDL_Event const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImGui_ImplOpenGL3_Init__SWIG_0 (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ImGui_ImplOpenGL3_Init((char const *)arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ImGui_ImplOpenGL3_Init__SWIG_1 () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui_ImplOpenGL3_Init();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImGui_ImplOpenGL3_Shutdown () {
  try {
    ImGui_ImplOpenGL3_Shutdown();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImGui_ImplOpenGL3_NewFrame () {
  try {
    ImGui_ImplOpenGL3_NewFrame();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ImGui_ImplOpenGL3_RenderDrawData (ImDrawData *larg1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  arg1 = larg1;
  try {
    ImGui_ImplOpenGL3_RenderDrawData(arg1);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImGui_ImplOpenGL3_CreateFontsTexture () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui_ImplOpenGL3_CreateFontsTexture();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImGui_ImplOpenGL3_DestroyFontsTexture () {
  try {
    ImGui_ImplOpenGL3_DestroyFontsTexture();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ImGui_ImplOpenGL3_CreateDeviceObjects () {
  int lresult = (int)0 ;
  bool result;
  
  try {
    result = (bool)ImGui_ImplOpenGL3_CreateDeviceObjects();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ImGui_ImplOpenGL3_DestroyDeviceObjects () {
  try {
    ImGui_ImplOpenGL3_DestroyDeviceObjects();
    
  } catch (...) {
    
  }
}


